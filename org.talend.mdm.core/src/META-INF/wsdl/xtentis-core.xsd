<xsd:schema 
	elementFormDefault="unqualified"
	targetNamespace="urn-com-amalto-xtentis-webservice"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:tns="urn-com-amalto-xtentis-webservice"
	>


	<!-- *****************************************************
		              GENERIC ELEMENTS
		*******************************************************-->
		
	<xsd:element name="WSString">
		<xsd:complexType >
			<xsd:sequence>
				<xsd:element minOccurs="1" maxOccurs="1" name="value" type="xsd:string"/>
			</xsd:sequence>		
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="WSStringArray">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="strings"  nillable="true" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSStringArray" type="tns:WSStringArray"/>

	<xsd:complexType name="WSByteArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="bytes"  nillable="true" type="xsd:base64Binary"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSByteArray" type="tns:WSByteArray"/>				

	<xsd:complexType name="WSInt">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="value" type="xsd:int"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSInt" type="tns:WSInt"/>
	
	<xsd:complexType name="WSI18nString">
		<xsd:sequence>
				<xsd:element minOccurs="1" maxOccurs="1" name="language" type="tns:WSLanguage"/>
				<xsd:element minOccurs="1" maxOccurs="1" name="label" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>

	<xsd:complexType name="WSBoolean">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="true" type="xsd:boolean"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSBoolean" type="tns:WSBoolean"/>

	<xsd:simpleType name="WSLanguage">
		<xsd:restriction base="xsd:NMTOKEN">
    		<xsd:enumeration value="FR"/>
    		<xsd:enumeration value="EN"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="WSBaseType">
		<xsd:restriction base="xsd:NMTOKEN">
    		<xsd:enumeration value="string"/>
    		<xsd:enumeration value="int"/>
			<xsd:enumeration value="token"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	
	<xsd:complexType name="WSKey">
		<xsd:annotation>
			<xsd:documentation>
				In simple terms: each key field is found using the path selectorpath/fieldpath within the element
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
				<xsd:element minOccurs="1" maxOccurs="1" name="selectorpath" type="xsd:string"/>
				<xsd:element minOccurs="1" maxOccurs="unbounded" name="fieldpath" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	
	<xsd:complexType name="WSLinkedHashMap">
		<xsd:annotation>
			<xsd:documentation>
				A generic implementation of a linked hash map
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="true" name="typedContentEntry">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="key" type="xsd:string"/>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="value" type="tns:WSStringArray"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSLinkedHashMap" type="tns:WSLinkedHashMap"/>
	
	<xsd:complexType name="WSTypedContent">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="url" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="wsBytes" type="tns:WSByteArray"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="contentType" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSTypedContent" type = "tns:WSTypedContent"/>	
	
	<xsd:complexType name="WSTypedContentMap">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapEntry">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="key"  nillable="false" type="xsd:string"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="typedContent"  nillable="false" type="tns:WSTypedContent"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSTypedContentMap" type="tns:WSTypedContentMap"/>	
	
	<xsd:complexType name="WSConceptRevisionMap">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapEntry">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="concept"  nillable="false" type="xsd:string"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="revision"  nillable="false" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSConceptRevisionMap" type="tns:WSConceptRevisionMap"/>

	<!-- *****************************************************
		MANAGEMENT
		*******************************************************-->
	

	<xsd:simpleType name="WSComponent">
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="DataManager"/>
			<xsd:enumeration value="Service"/>
			<xsd:enumeration value="Connector"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:complexType name="WSGetComponentVersion">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="component" type="tns:WSComponent"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="id" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetComponentVersion" type="tns:WSGetComponentVersion"/>

	<xsd:complexType name="WSVersion">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="major" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="minor" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="revision" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="build" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="date" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSVersion" type="tns:WSVersion"/>
	
		
	<xsd:complexType name="WSPing">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="echo" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType> 
	<xsd:element name="WSPing" type="tns:WSPing"/>

	<xsd:complexType name="WSLogout">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="dummy" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSLogout" type="tns:WSLogout"/>
	

	<!-- *****************************************************
		             INITIALIZATION
		*******************************************************-->

	<xsd:complexType name="WSInitData">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="zap" type="xsd:boolean"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="xmlSchema" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSInitData" type="tns:WSInitData"/>

	<xsd:complexType name="WSDocumentPK">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="pk" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>		
	<xsd:element name="WSDocumentPK" type="tns:WSDocumentPK"/>


	<!-- *****************************************************
		              D A T A   M O D E L
		*******************************************************-->

	<xsd:complexType name="WSDataModel">
		<xsd:annotation>
			<xsd:documentation>
				A Data Model.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="xsdSchema" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDataModel" type="tns:WSDataModel"/>
		
	<xsd:complexType name="WSDataModelPK">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="pk" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>			
	<xsd:element name="WSDataModelPK" type="tns:WSDataModelPK"/>
	
	<xsd:complexType name="WSDataModelArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsDataModels" type="tns:WSDataModel"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDataModelArray" type = "tns:WSDataModelArray"/>
	
	<xsd:complexType name="WSDataModelPKArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsDataModelPKs" type="tns:WSDataModelPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDataModelPKArray" type = "tns:WSDataModelPKArray"/>
	
	<xsd:complexType name="WSBusinessConcept">
		<xsd:annotation>
			<xsd:documentation>
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="businessTemplate" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsUniqueKey" type="tns:WSKey"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="wsLabel" type="tns:WSI18nString"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="wsDescription" type="tns:WSI18nString"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSBusinessConcept" type="tns:WSBusinessConcept"/>
	
	<xsd:simpleType name="WSTemplateType">
		<xsd:restriction base="xsd:NMTOKEN">
    		<xsd:enumeration value="SIMPLE"/>
    		<xsd:enumeration value="COMPLEX"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:complexType name="WSBusinessTemplate">
		<xsd:annotation>
			<xsd:documentation>
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="type" type="tns:WSTemplateType"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="simpleTemplate" type="tns:WSBusinessSimpleTemplate"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="complexTemplate" type="tns:WSBusinessComplexTemplate"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSBusinessTemplate" type="tns:WSBusinessTemplate"/>
	
	
	<xsd:complexType name="WSBusinessSimpleTemplate">
		<xsd:annotation>
			<xsd:documentation>
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="xsdBaseType" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="pattern" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSBusinessSimpleTemplate" type="tns:WSBusinessSimpleTemplate"/>

	<xsd:complexType name="WSBusinessComplexTemplate">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsBusinessElements" type="tns:WSBusinessElement"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSBusinessComplexTemplate" type="tns:WSBusinessComplexTemplate"/>

	<xsd:complexType name="WSBusinessElement">
		<xsd:annotation>
			<xsd:documentation>
				A "sub-element" in a Complex Template 
				xsd types can be used as business template
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="minOccurs" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxOccurs" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="businessTemplate" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="wsForeignKey" type="tns:WSKey"/> <!-- ignored in this release -->
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="wsLabel" type="tns:WSI18nString"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="wsDescription" type="tns:WSI18nString"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSBusinessElement" type="tns:WSBusinessElement"/>
	
	
	<!-- Operations -->

	<xsd:complexType name="WSPutDataModel">
		<xsd:annotation>
			<xsd:documentation>
				Creates - updates a data model
			</xsd:documentation>
		</xsd:annotation>		
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModel" type="tns:WSDataModel"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSPutDataModel" type="tns:WSPutDataModel"/>
	
	<xsd:complexType name="WSGetDataModel">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetDataModel" type="tns:WSGetDataModel"/>

	<xsd:complexType name="WSExistsDataModel">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSExistsDataModel" type="tns:WSExistsDataModel"/>
	
	<xsd:complexType name="WSDeleteDataModel">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
		</xsd:sequence>		
	</xsd:complexType>			
	<xsd:element name="WSDeleteDataModel" type="tns:WSDeleteDataModel"/>
	
	<!--
	<xsd:complexType name="WSRegexDataModels">
		<xsd:annotation>
			<xsd:documentation>
				Get a list of data models using a regular expression
			</xsd:documentation>
		</xsd:annotation>				
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRegexDataModels" type="tns:WSRegexDataModels"/>
	-->
	
	<xsd:complexType name="WSRegexDataModelPKs">
		<xsd:annotation>
			<xsd:documentation>
				Get a list of data model PKs using a regular expression
			</xsd:documentation>
		</xsd:annotation>						
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRegexDataModelPKs" type="tns:WSRegexDataModelPKs"/>
	
	<xsd:complexType name="WSCheckSchema">
		<xsd:annotation>
			<xsd:documentation>
				Check is a schema is valid
			</xsd:documentation>
		</xsd:annotation>						
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="schema" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSCheckSchema" type="tns:WSCheckSchema"/>	

	<xsd:complexType name="WSPutBusinessConcept">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="businessConcept" type="tns:WSBusinessConcept"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSPutBusinessConcept" type="tns:WSPutBusinessConcept"/>
	
	<xsd:complexType name="WSPutBusinessConceptSchema">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="businessConceptSchema" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSPutBusinessConceptSchema" type="tns:WSPutBusinessConceptSchema"/>

	<xsd:complexType name="WSDeleteBusinessConcept">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="businessConceptName" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDeleteBusinessConcept" type="tns:WSDeleteBusinessConcept"/>

	<xsd:complexType name="WSGetBusinessConcepts">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetBusinessConcepts" type="tns:WSGetBusinessConcepts"/>
	
	<xsd:complexType name="WSGetBusinessConceptKey">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="concept" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetBusinessConceptKey" type="tns:WSGetBusinessConceptKey"/>
	
	<xsd:complexType name="WSConceptKey">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="selector" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="fields" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSConceptKey" type="tns:WSConceptKey"/>
	

	

	<!-- *****************************************************
		              D A T A   C L U S T E R
	*******************************************************-->
	

	<xsd:simpleType name="WSDataClusterType">
		<xsd:restriction base="xsd:NMTOKEN">
    		<xsd:enumeration value="CACHE"/>
    		<xsd:enumeration value="ITEMS"/>
			<xsd:enumeration value="UNKNOWN"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WSDataCluster">
		<xsd:annotation>
			<xsd:documentation>
				A data cluster.
				Stemming is only supported with the Xyleme server and is not recommended. Use the value 100 to disable stemming.
				The speller refresh period is ignored at this stage. A value of -1 disables spell checking entirely in the cluster.
				Vocabulary holds the stemmer vocabulary. It should have an empty value on creation.
			</xsd:documentation>
		</xsd:annotation>						
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="vocabulary" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDataCluster" type = "tns:WSDataCluster"/>

	<xsd:complexType name="WSDataClusterPK">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="pk" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDataClusterPK" type="tns:WSDataClusterPK"/>		

	<xsd:complexType name="WSDataClusterArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsDataClusters" type="tns:WSDataCluster"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDataClusterArray" type = "tns:WSDataClusterArray"/>

	<xsd:complexType name="WSDataClusterPKArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsDataClusterPKs" type="tns:WSDataClusterPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDataClusterPKArray" type = "tns:WSDataClusterPKArray"/>

	<!-- Operations -->
	<xsd:complexType name="WSPutDBDataCluster">
						
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="revisionID" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSPutDBDataCluster" type="tns:WSPutDBDataCluster"/>
	<xsd:complexType name="WSPutDataCluster">
		<xsd:annotation>
			<xsd:documentation>
				Creates a data-cluster. Characteristics (stemming, etc...) of a data cluster cannot be changed
			</xsd:documentation>
		</xsd:annotation>						
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataCluster" type="tns:WSDataCluster"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSPutDataCluster" type="tns:WSPutDataCluster"/>

	<xsd:complexType name="WSGetDataCluster">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetDataCluster" type="tns:WSGetDataCluster"/>

	<xsd:complexType name="WSExistsDataCluster">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSExistsDataCluster" type="tns:WSExistsDataCluster"/>
		<xsd:complexType name="WSExistsDBDataCluster">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="revisionID" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSExistsDBDataCluster" type="tns:WSExistsDBDataCluster"/>
	<xsd:complexType name="WSDeleteDataCluster">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDeleteDataCluster" type="tns:WSDeleteDataCluster"/>
		
	<xsd:complexType name="WSRegexDataClusterPKs">
		<xsd:annotation>
			<xsd:documentation>
				A list of Data Custer PKs obtained using  a regex. Pass * to retrieve all of them.
			</xsd:documentation>
		</xsd:annotation>										
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRegexDataClusterPKs" type="tns:WSRegexDataClusterPKs"/>
	
	<xsd:complexType name="WSGetConceptsInDataCluster">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetConceptsInDataCluster" type="tns:WSGetConceptsInDataCluster"/>
	

	<!-- *****************************************************
		              W H E R E    E L E M E N T S
					  used by Views and Searches 
		*******************************************************-->
	<xsd:complexType name="WSWhereCondition">
		<xsd:annotation>
			<xsd:documentation>
				Use this object to write where conditions.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="leftPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="operator" type="tns:WSWhereOperator"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="rightValueOrPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="stringPredicate" type="tns:WSStringPredicate"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellCheck" type="xsd:boolean"/>
		</xsd:sequence>		
	</xsd:complexType>

	<xsd:simpleType name="WSWhereOperator">
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="JOIN"/>
			<xsd:enumeration value="CONTAINS"/>
    		<xsd:enumeration value="STARTSWITH"/>
    		<xsd:enumeration value="STRICTCONTAINS"/>
			<xsd:enumeration value="EQUALS"/>
			<xsd:enumeration value="NOT_EQUALS"/>
			<xsd:enumeration value="GREATER_THAN"/>
			<xsd:enumeration value="GREATER_THAN_OR_EQUAL"/>
			<xsd:enumeration value="LOWER_THAN"/>
			<xsd:enumeration value="LOWER_THAN_OR_EQUAL"/>
			<xsd:enumeration value="NO_OPERATOR"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="WSStringPredicate"> <!-- for CONTAINS and STRICTCONTAINS ONLY -->
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="NONE"/>
			<xsd:enumeration value="OR"/> <!--between words -->
			<xsd:enumeration value="AND"/> <!--between words -->
			<xsd:enumeration value="STRICTAND"/> <!--between words - same PCDATA -->
    		<xsd:enumeration value="EXACTLY"/> <!-- this sentence -->
			<xsd:enumeration value="NOT"/> <!-- does not contains these cords -->
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WSWhereAnd">
		<xsd:annotation>
			<xsd:documentation>
				The And operator between WhereConditions
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="whereItems" type="tns:WSWhereItem"/>
		</xsd:sequence>		
	</xsd:complexType>

	<xsd:complexType name="WSWhereOr">
		<xsd:annotation>
			<xsd:documentation>
				The Or operator between WhereConditions
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="whereItems" type="tns:WSWhereItem"/>
		</xsd:sequence>		
	</xsd:complexType>
	
	<xsd:complexType name="WSWhereItem">
		<xsd:annotation>
			<xsd:documentation>
				An And or Or or WhereCondition
			</xsd:documentation>
		</xsd:annotation>
		<!--
		It should be only one of them due to lack of support for choice
		<xsd:choice>
		-->
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="whereCondition" type="tns:WSWhereCondition"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="whereAnd" type="tns:WSWhereAnd"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="whereOr" type="tns:WSWhereOr"/>
		</xsd:sequence>
		<!--
		</xsd:choice>
		-->		
	</xsd:complexType>
	
	
	<!-- *****************************************************
		              V I E W 
		*******************************************************-->

	<xsd:complexType name="WSView">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="viewableBusinessElements" type="xsd:string"/> <!-- projected business elements -->
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="true" name="whereConditions" type="tns:WSWhereCondition"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="searchableBusinessElements" type="xsd:string"/> 
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSView" type="tns:WSView"/>
	
	<xsd:complexType name="WSViewPK">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="pk" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSViewPK" type="tns:WSViewPK"/>
	
	<xsd:complexType name="WSViewPKArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSViewPKArray" type = "tns:WSViewPKArray"/>
	
		
	<xsd:complexType name="WSViewArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsViews" type="tns:WSView"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSViewArray" type = "tns:WSViewArray"/>
	
	<!-- Operations -->

	<xsd:complexType name="WSPutView">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsView" type="tns:WSView"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSPutView" type="tns:WSPutView"/>
	
	<xsd:complexType name="WSGetView">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetView" type="tns:WSGetView"/>

	<xsd:complexType name="WSExistsView">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSExistsView" type="tns:WSExistsView"/>

	<xsd:complexType name="WSDeleteView">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
		</xsd:sequence>		
	</xsd:complexType>			
	<xsd:element name="WSDeleteView" type="tns:WSDeleteView"/>
		
	<xsd:complexType name="WSRegexViews">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRegexViews" type="tns:WSRegexViews"/>
	
	<xsd:complexType name="WSGetViewPKs">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetViewPKs" type="tns:WSGetViewPKs"/>	
	

	<!-- *****************************************************
		             S E A R C H     I T E M S
		*******************************************************-->

	<xsd:complexType name="WSItem">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="dataModelName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="dataModelRevision" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded" nillable="false" name="ids" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="insertionTime" type="xsd:long"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="content" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSItem" type="tns:WSItem"/>
	
	<xsd:complexType name="WSItemPK">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded" nillable="false" name="ids" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSItemPK" type="tns:WSItemPK"/>
	
	<xsd:complexType name="WSItemPKArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSItemPKArray" type="tns:WSItemPKArray"/>
	
	<xsd:complexType name="WSBusinessConceptPK">
		<xsd:annotation>
			<xsd:documentation>
				The unique key of a business concept
				Used with WSGetBusinessConceptValue
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="ids" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSBusinessConceptPK" type="tns:WSBusinessConceptPK"/>
	
	<!-- Operations -->	
	
	<xsd:complexType name="WSGetItem">
		<xsd:annotation>
			<xsd:documentation>
				Returns an item based on its cluster pk and its key(s)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetItem" type="tns:WSGetItem"/>

	<xsd:complexType name="WSExistsItem">
		<xsd:annotation>
			<xsd:documentation>
				Returns whether an item exists
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSExistsItem" type="tns:WSExistsItem"/>

	<xsd:complexType name="WSGetItems">
		<xsd:annotation>
			<xsd:documentation>
				Returns items based on the cluster pk and a search
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="skip" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxItems" type="xsd:int"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetItems" type="tns:WSGetItems"/>

	<xsd:complexType name="WSGetItemPKsByCriteria">
		<xsd:annotation>
			<xsd:documentation>
				Returns items based on criteria
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="contentKeywords" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="keysKeywords" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="fromDate" type="xsd:long"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="toDate" type="xsd:long"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="skip" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxItems" type="xsd:int"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetItemPKsByCriteria" type="tns:WSGetItemPKsByCriteria"/>
	
	<xsd:complexType name="WSItemPKsByCriteriaResponse">
		<xsd:annotation>
			<xsd:documentation>
				items returned based on criteria
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="results">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="date" type="xsd:long"/>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>						
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSItemPKsByCriteriaResponse" type="tns:WSItemPKsByCriteriaResponse"/>
	
	<xsd:complexType name="WSGetBusinessConceptValue">
		<xsd:annotation>
			<xsd:documentation>
				Returns the value for a business concept based on its key
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsBusinessConceptPK" type="tns:WSBusinessConceptPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetBusinessConceptValue" type="tns:WSGetBusinessConceptValue"/>
	
	
	
	<xsd:complexType name="WSGetFullPathValues">
		<xsd:annotation>
			<xsd:documentation>
				Return all the possible values for a full path starting with the concept name
				optionally filtered with a condition
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="fullPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellThreshold" type="xsd:int"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="orderBy" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="direction" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetFullPathValues" type="tns:WSGetFullPathValues"/>
	
	
	<xsd:complexType name="WSViewSearch">
		<xsd:annotation>
			<xsd:documentation>
				Performs a search on the searchable elements of a view
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="skip" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxItems" type="xsd:int"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="orderBy" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="direction" type="xsd:string"/>			
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSViewSearch" type="tns:WSViewSearch"/>
	
	
	<xsd:complexType name="WSXPathsSearch">
		<xsd:annotation>
			<xsd:documentation>
				Performs a search and returns the values for the viewable paths
				If the pivot is null, the first element of the viewable paths is used
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="pivotPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="viewablePaths" type="tns:WSStringArray"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="skip" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxItems" type="xsd:int"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="orderBy" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="direction" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSXPathsSearch" type="tns:WSXPathsSearch"/>
	
	<xsd:complexType name="WSGetItemsPivotIndex">
		<xsd:annotation>
			<xsd:documentation>
				Get items hierarchical tree according to pivots
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="clusterName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="mainPivotName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="pivotWithKeys" type="tns:WSLinkedHashMap"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="indexPaths" type="tns:WSStringArray"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="pivotDirections" type="tns:WSStringArray"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="indexDirections" type="tns:WSStringArray"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="start" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="limit" type="xsd:int"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetItemsPivotIndex" type="tns:WSGetItemsPivotIndex"/>
	
	<xsd:complexType name="WSCount">
		<xsd:annotation>
			<xsd:documentation>
				Counts the number of occurrences of the count path matching the whereItem
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="countPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSCount" type="tns:WSCount"/>
	
	
	<xsd:complexType name="WSQuickSearch">
		<xsd:annotation>
			<xsd:documentation>
				Quick searches on the searchable elements of the view
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="searchedValue" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxItems" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="skip" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="matchAllWords" type="xsd:boolean"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="orderBy" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="direction" type="xsd:string"/>			
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSQuickSearch" type="tns:WSQuickSearch"/>
	
	
	

	<!-- *****************************************************
		P U T    I T E M		
		*******************************************************-->
	<xsd:complexType name="WSPutItem">
		<xsd:annotation>
			<xsd:documentation>
				Puts an item in the xml storage.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="xmlString" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="isUpdate" default="false" type="xsd:boolean"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSPutItem" type="tns:WSPutItem"/>
	
	
	<xsd:complexType name="WSUpdateReportItemPOJO">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="path" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="newValue" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="oldValue" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSUpdateReportItemPOJO" type="tns:WSUpdateReportItemPOJO"/>
	
	<xsd:complexType name="WSUpdateReportItemArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="true" name="wsUpdateReportItemPOJO" type="tns:WSUpdateReportItemPOJO"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSUpdateReportItemArray" type="tns:WSUpdateReportItemArray"/>
	
	<xsd:complexType name="WSPutItemWithReport">
		<xsd:annotation>
			<xsd:documentation>
				Puts an item in the xml storage with update report
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsPutItem" type="tns:WSPutItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="source" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="invokeBeforeSaving" default="true" type="xsd:boolean"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSPutItemWithReport" type="tns:WSPutItemWithReport"/>
	

	
	<!-- *****************************************************
		             D E L E T E     I T E M S
		*******************************************************-->	
	
	<xsd:complexType name="WSDeleteItem">
		<xsd:annotation>
			<xsd:documentation>
				Deletes an item based on its cluster pk and its key(s)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDeleteItem" type="tns:WSDeleteItem"/>

	<xsd:complexType name="WSDeleteItems">
		<xsd:annotation>
			<xsd:documentation>
				Deletes items of a concept based on a query
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="wsWhereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDeleteItems" type="tns:WSDeleteItems"/>
	
	<xsd:complexType name="WSDropItem">
		<xsd:annotation>
			<xsd:documentation>
				Drop an item to items trash
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="partPath" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDropItem" type="tns:WSDropItem"/>
	
	<!-- *****************************************************
		D I R E C T   Q U E R Y
		** !!! Use of this is fast but dangerous and makes !!!
		** !!! code non portable accross xml servers         !!!
		*******************************************************-->
	<xsd:complexType name="WSRunQuery">
		<xsd:annotation>
			<xsd:documentation>
				Runs an xQuery on the XML DB in the revision ID, the Query is run from the DataCluster at the head
				The Data Cluster can be null to run cross-cluster queries
				** !!! Use of this is fast but dangerous and makes !!!
				** !!! code non portable accross xml servers         !!!
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="revisionID" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="query" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="parameters" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRunQuery" type="tns:WSRunQuery"/>
	
	
	
	<!-- *****************************************************
		C O N N E C T O R
		*******************************************************-->
	
	<xsd:complexType name="WSBase64KeyValue">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="key" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="base64StringValue" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	
	<xsd:simpleType name="WSConnectorFunction">
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="GET_STATUS"/>
			<xsd:enumeration value="START"/>
			<xsd:enumeration value="STOP"/>
			<xsd:enumeration value="PULL"/>
			<xsd:enumeration value="PUSH"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:complexType name="WSConnectorInteraction">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="JNDIName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="function" type="tns:WSConnectorFunction"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded" nillable="true" name="parameters" type="tns:WSBase64KeyValue"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSConnectorInteraction" type="tns:WSConnectorInteraction"/>

	<xsd:simpleType name="WSConnectorResponseCode">
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="OK"/>
			<xsd:enumeration value="STOPPED"/>
			<xsd:enumeration value="ERROR"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WSConnectorInteractionResponse">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="code" type="tns:WSConnectorResponseCode"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded" nillable="true" name="parameters" type="tns:WSBase64KeyValue"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSConnectorInteractionResponse" type="tns:WSConnectorInteractionResponse"/>


	<!-- *****************************************************
		ROUTING RULE 
		*******************************************************-->
	<xsd:simpleType name="WSRoutingRuleOperator">
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="CONTAINS"/>
			<xsd:enumeration value="MATCHES"/>
			<xsd:enumeration value="STARTSWITH"/>
			<xsd:enumeration value="EQUALS"/>
			<xsd:enumeration value="NOT_EQUALS"/>
			<xsd:enumeration value="GREATER_THAN"/>
			<xsd:enumeration value="GREATER_THAN_OR_EQUAL"/>
			<xsd:enumeration value="LOWER_THAN"/>
			<xsd:enumeration value="LOWER_THAN_OR_EQUAL"/>
			<xsd:enumeration value="IS_NULL"/>
			<xsd:enumeration value="IS_NOT_NULL"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	
	<xsd:complexType name="WSRoutingRuleExpression">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="xpath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsOperator" type="tns:WSRoutingRuleOperator"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="value" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	
	<xsd:complexType name="WSRoutingRule">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="synchronous" type="xsd:boolean"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="concept" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="serviceJNDI" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="parameters" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="true" name="wsRoutingRuleExpressions" type="tns:WSRoutingRuleExpression"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="condition" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="deactive" type="xsd:boolean"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRoutingRule" type="tns:WSRoutingRule"/>
	
	<xsd:complexType name="WSRoutingRulePK">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="pk" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRoutingRulePK" type="tns:WSRoutingRulePK"/>
	
	<xsd:complexType name="WSRoutingRuleArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="true" name="wsRoutingRules" type="tns:WSRoutingRule"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRoutingRuleArray" type = "tns:WSRoutingRuleArray"/>

	<xsd:complexType name="WSRoutingRulePKArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="true" name="wsRoutingRulePKs" type="tns:WSRoutingRulePK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRoutingRulePKArray" type = "tns:WSRoutingRulePKArray"/>	
	
	<!-- Operations -->
	
	<xsd:complexType name="WSPutRoutingRule">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsRoutingRule" type="tns:WSRoutingRule"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSPutRoutingRule" type="tns:WSPutRoutingRule"/>
	
	<xsd:complexType name="WSGetRoutingRule">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsRoutingRulePK" type="tns:WSRoutingRulePK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetRoutingRule" type="tns:WSGetRoutingRule"/>
	
	<xsd:complexType name="WSExistsRoutingRule">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsRoutingRulePK" type="tns:WSRoutingRulePK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSExistsRoutingRule" type="tns:WSExistsRoutingRule"/>
	
	<xsd:complexType name="WSDeleteRoutingRule">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsRoutingRulePK" type="tns:WSRoutingRulePK"/>
		</xsd:sequence>		
	</xsd:complexType>			
	<xsd:element name="WSDeleteRoutingRule" type="tns:WSDeleteRoutingRule"/>
	
	
	<xsd:complexType name="WSGetRoutingRulePKs">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetRoutingRulePKs" type="tns:WSGetRoutingRulePKs"/>	
	
	
	<!-- *****************************************************
		SERVICES
		*******************************************************-->
	
	<xsd:simpleType name="WSServiceActionCode">
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="START"/>
			<xsd:enumeration value="STOP"/>
			<xsd:enumeration value="STATUS"/>
			<xsd:enumeration value="EXECUTE"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:element name="WSServiceActionCode" type="tns:WSServiceActionCode"/>
	

	<xsd:complexType name="WSServicesList">
		<xsd:sequence >
			<xsd:element name="Item" minOccurs="0" maxOccurs="unbounded">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="jndiName" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSServicesList" type="tns:WSServicesList"/>
	
	<!-- ******************** A C T I O N S************************* -->
	
	<xsd:complexType name="WSGetServicesList">
		<xsd:annotation>
			<xsd:documentation>
				Returns the list of available Services in a WSServicesList 
				that provides their JNDI Name 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="language" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetServicesList" type="tns:WSGetServicesList"/>
	
	<xsd:complexType name="WSServiceAction">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="jndiName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsAction" type="tns:WSServiceActionCode"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="methodName" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="true" name="methodParameters" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSServiceAction" type="tns:WSServiceAction"/>
	
	<xsd:complexType name="WSServicePutConfiguration">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="jndiName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="configuration" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSServicePutConfiguration" type="tns:WSServicePutConfiguration"/>
	
	<xsd:complexType name="WSServiceGetConfiguration">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="jndiName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="optionalParameter" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSServiceGetConfiguration" type="tns:WSServiceGetConfiguration"/>
	
	<xsd:complexType name="WSServiceGetDocument">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="configure" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="document" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSServiceGetDocument" type="tns:WSServiceGetDocument"/>
	
	
	<!-- *****************************************************
		Stored Procedures
		*******************************************************-->

	<xsd:complexType name="WSStoredProcedure">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="procedure" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSStoredProcedure" type = "tns:WSStoredProcedure"/>	
	
	<xsd:complexType name="WSStoredProcedurePK">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="pk" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSStoredProcedurePK" type="tns:WSStoredProcedurePK"/>		

	<xsd:complexType name="WSRegexStoredProcedure">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRegexStoredProcedure" type="tns:WSRegexStoredProcedure"/>	
	
	<xsd:complexType name="WSStoredProcedurePKArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsStoredProcedurePK" type="tns:WSStoredProcedurePK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSStoredProcedurePKArray" type = "tns:WSStoredProcedurePKArray"/>
	
	<xsd:complexType name="WSGetStoredProcedure">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsStoredProcedurePK" type="tns:WSStoredProcedurePK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetStoredProcedure" type="tns:WSGetStoredProcedure"/>

	<xsd:complexType name="WSExistsStoredProcedure">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsStoredProcedurePK" type="tns:WSStoredProcedurePK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSExistsStoredProcedure" type="tns:WSExistsStoredProcedure"/>

	<xsd:complexType name="WSPutStoredProcedure">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsStoredProcedure" type="tns:WSStoredProcedure"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSPutStoredProcedure" type="tns:WSPutStoredProcedure"/>
	
	<xsd:complexType name="WSDeleteStoredProcedure">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsStoredProcedurePK" type="tns:WSStoredProcedurePK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDeleteStoredProcedure" type="tns:WSDeleteStoredProcedure"/>

	<xsd:complexType name="WSExecuteStoredProcedure">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsStoredProcedurePK" type="tns:WSStoredProcedurePK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="revisionID" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="parameters" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSExecuteStoredProcedure" type="tns:WSExecuteStoredProcedure"/>

	<xsd:complexType name="WSGetStoredProcedurePKs">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetStoredProcedurePKs" type="tns:WSGetStoredProcedurePKs"/>
	
	

	
	
	<!-- *****************************************************
		Menus
		*******************************************************-->
		
	<xsd:complexType name="WSMenu">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="menuEntries" type="tns:WSMenuEntry"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSMenu" type = "tns:WSMenu"/>	
	
	<xsd:complexType name="WSMenuEntry">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="id" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="descriptions">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="language" type="xsd:string"/>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="label" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="context" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="application" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="subMenus" type="tns:WSMenuEntry"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSMenuEntry" type = "tns:WSMenuEntry"/>		
	
	<xsd:complexType name="WSMenuPK">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="pk" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSMenuPK" type="tns:WSMenuPK"/>		
	
	<xsd:complexType name="WSMenuPKArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsMenuPK" type="tns:WSMenuPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSMenuPKArray" type = "tns:WSMenuPKArray"/>
	
	<xsd:complexType name="WSGetMenu">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsMenuPK" type="tns:WSMenuPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetMenu" type="tns:WSGetMenu"/>

	<xsd:complexType name="WSExistsMenu">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsMenuPK" type="tns:WSMenuPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSExistsMenu" type="tns:WSExistsMenu"/>
	
	<xsd:complexType name="WSPutMenu">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsMenu" type="tns:WSMenu"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSPutMenu" type="tns:WSPutMenu"/>
	
	<xsd:complexType name="WSDeleteMenu">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsMenuPK" type="tns:WSMenuPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDeleteMenu" type="tns:WSDeleteMenu"/>
	
	<xsd:complexType name="WSGetMenuPKs">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSGetMenuPKs" type="tns:WSGetMenuPKs"/>	
	
   <!-- *****************************************************
		Dropped Item
		*******************************************************-->
    <xsd:complexType name="WSDroppedItem">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="revisionID" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="uniqueId" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded" nillable="true" name="ids" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="partPath" type="xsd:string"/>
		    <xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="insertionUserName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="insertionTime" type="xsd:long"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="projection" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDroppedItem" type="tns:WSDroppedItem"/>
	
	<xsd:complexType name="WSDroppedItemPK">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="partPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="revisionId" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDroppedItemPK" type="tns:WSDroppedItemPK"/>
	
	<xsd:complexType name="WSDroppedItemPKArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsDroppedItemPK" type="tns:WSDroppedItemPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSDroppedItemPKArray" type="tns:WSDroppedItemPKArray"/>
	
	<xsd:complexType name="WSFindAllDroppedItemsPKs">
	    <xsd:annotation>
			<xsd:documentation>
				Find all dropped items in items trash
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSFindAllDroppedItemsPKs" type="tns:WSFindAllDroppedItemsPKs"/>
	
	<xsd:complexType name="WSLoadDroppedItem">
	    <xsd:annotation>
			<xsd:documentation>
				Load a dropped item from items trash
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDroppedItemPK" type="tns:WSDroppedItemPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSLoadDroppedItem" type="tns:WSLoadDroppedItem"/>
	
	<xsd:complexType name="WSRecoverDroppedItem">
	    <xsd:annotation>
			<xsd:documentation>
				Recover a dropped item from items trash
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDroppedItemPK" type="tns:WSDroppedItemPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRecoverDroppedItem" type="tns:WSRecoverDroppedItem"/>
	
	<xsd:complexType name="WSRemoveDroppedItem">
	    <xsd:annotation>
			<xsd:documentation>
				Remove a dropped item from items trash
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDroppedItemPK" type="tns:WSDroppedItemPK"/>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSRemoveDroppedItem" type="tns:WSRemoveDroppedItem"/>
	

			
</xsd:schema>