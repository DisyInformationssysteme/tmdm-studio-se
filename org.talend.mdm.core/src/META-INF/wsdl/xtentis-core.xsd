<xsd:schema
	elementFormDefault="unqualified"
	targetNamespace="urn-com-amalto-xtentis-webservice"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:tns="urn-com-amalto-xtentis-webservice"
	>


	<!-- *****************************************************
		              GENERIC ELEMENTS
		*******************************************************-->

	<xsd:element name="WSString">
		<xsd:annotation>
			<xsd:documentation>
				A return message containing a single string
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType >
			<xsd:sequence>
				<xsd:element minOccurs="1" maxOccurs="1" name="value" type="xsd:string"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

	<xsd:complexType name="WSStringArray">
		<xsd:annotation>
			<xsd:documentation>
				An array of string
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="strings"  nillable="true" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSStringArray" type="tns:WSStringArray"/>

	<xsd:complexType name="WSByteArray">
		<xsd:annotation>
			<xsd:documentation>
				An array of bytes
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="bytes"  nillable="true" type="xsd:base64Binary"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSByteArray" type="tns:WSByteArray"/>

	<xsd:complexType name="WSInt">
		<xsd:annotation>
			<xsd:documentation>
				A return message containing a single Integer
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="value" type="xsd:int"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSInt" type="tns:WSInt"/>

	<xsd:complexType name="WSI18nString">
		<xsd:annotation>
			<xsd:documentation>
				An internaitoanlized/lovalized String
				language: the ISO lanaguage code
				label: the localized label value
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
				<xsd:element minOccurs="1" maxOccurs="1" name="language" type="tns:WSLanguage"/>
				<xsd:element minOccurs="1" maxOccurs="1" name="label" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="WSBoolean">
		<xsd:annotation>
			<xsd:documentation>
				A return message containing a single boolean (true/false)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="true" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSBoolean" type="tns:WSBoolean"/>

	<xsd:simpleType name="WSLanguage">
		<xsd:annotation>
			<xsd:documentation>
				An enumeration of supported 2 letter language codes
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:NMTOKEN">
    		<xsd:enumeration value="FR"/>
    		<xsd:enumeration value="EN"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="WSBaseType">
		<xsd:restriction base="xsd:NMTOKEN">
    		<xsd:enumeration value="string"/>
    		<xsd:enumeration value="int"/>
			<xsd:enumeration value="token"/>
		</xsd:restriction>
	</xsd:simpleType>


	<xsd:complexType name="WSKey">
		<xsd:annotation>
			<xsd:documentation>
				The description of an XSD style key
				The full xPath of a key field is found using the path 'selectorpath/fieldpath' within the element
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
				<xsd:element minOccurs="1" maxOccurs="1" name="selectorpath" type="xsd:string"/>
				<xsd:element minOccurs="1" maxOccurs="unbounded" name="fieldpath" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="WSLinkedHashMap">
		<xsd:annotation>
			<xsd:documentation>
				A generic implementation of a linked hash map
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="true" name="typedContentEntry">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="key" type="xsd:string"/>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="value" type="tns:WSStringArray"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSLinkedHashMap" type="tns:WSLinkedHashMap"/>

	<xsd:complexType name="WSTypedContent">
		<xsd:annotation>
			<xsd:documentation>
				A return message containing and array of bytes or an URL pointing to data and the content-type of the data
				url: an url pointing to data (e.g. http://www.mysite.com/data/MyData or file://var/data/myData)
				wsBytes: an array of bytes. url should be nil or non present when used.
				contentType: the content type (e.g. 'application/pdf' or 'text/xml; charset=utf-8')
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="url" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="wsBytes" type="tns:WSByteArray"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="contentType" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSTypedContent" type = "tns:WSTypedContent"/>

	<xsd:complexType name="WSTypedContentMap">
		<xsd:annotation>
			<xsd:documentation>
				An implementation of an HashMap of TypedCOntent - see WSTypedContent
				key: the key of the typed content in the hashmap
				wsBytes: an array of bytes. url should be nil or non present when used.
				typedCOntent: the WSTypedContent
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapEntry">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="key"  nillable="false" type="xsd:string"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="typedContent"  nillable="false" type="tns:WSTypedContent"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSTypedContentMap" type="tns:WSTypedContentMap"/>

	<xsd:complexType name="WSConceptRevisionMap">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapEntry">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="concept"  nillable="false" type="xsd:string"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="revision"  nillable="false" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>		
	</xsd:complexType>
	<xsd:element name="WSConceptRevisionMap" type="tns:WSConceptRevisionMap"/>

	<!-- *****************************************************
		MANAGEMENT
		*******************************************************-->


	<xsd:simpleType name="WSComponent">
		<xsd:annotation>
			<xsd:documentation>
				An enumeration of the type of components inside the core
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="DataManager"/>
			<xsd:enumeration value="Service"/>
			<xsd:enumeration value="Connector"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WSGetComponentVersion">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve the version of a component
				component: the type of component -see WSComponent
				id: the id of the component; its JNDI name for services and connectors
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="component" type="tns:WSComponent"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="id" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetComponentVersion" type="tns:WSGetComponentVersion"/>

	<xsd:complexType name="WSVersion">
		<xsd:annotation>
			<xsd:documentation>
				A return message containing the version of the component - see WSGetComponentVersion
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="major" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="minor" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="revision" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="build" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="date" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSVersion" type="tns:WSVersion"/>

	<xsd:complexType name="WSPing">
		<xsd:annotation>
			<xsd:documentation>
				A message to ping an MDM server and see if it is up and running
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="echo" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPing" type="tns:WSPing"/>

	<xsd:complexType name="WSLogout">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="dummy" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSLogout" type="tns:WSLogout"/>


	<!-- *****************************************************
		             INITIALIZATION
		*******************************************************-->

	<xsd:complexType name="WSInitData">
		<xsd:annotation>
			<xsd:documentation>
				DEPRECATED
				A message to automatically initialize the MDM server
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="zap" type="xsd:boolean"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="xmlSchema" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSInitData" type="tns:WSInitData"/>

	<xsd:complexType name="WSDocumentPK">
		<xsd:annotation>
			<xsd:documentation>
				DEPRECATED
				The primary key of a document - kept for calls compatibility; always null in calls
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="pk" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDocumentPK" type="tns:WSDocumentPK"/>


	<!-- *****************************************************
		              D A T A   M O D E L
		*******************************************************-->

	<xsd:complexType name="WSDataModel">
		<xsd:annotation>
			<xsd:documentation>
				A Data Model core object.
				name: the unique name of the data model
				description: the description of the data model
				xsdSchema: the XSD schema for this data model
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="xsdSchema" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDataModel" type="tns:WSDataModel"/>

	<xsd:complexType name="WSDataModelPK">
		<xsd:annotation>
			<xsd:documentation>
				The Primary key of a Data Model: its name
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="pk" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDataModelPK" type="tns:WSDataModelPK"/>

	<xsd:complexType name="WSDataModelArray">
		<xsd:annotation>
			<xsd:documentation>
				An array of Data Models - see WSDataModel
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsDataModels" type="tns:WSDataModel"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDataModelArray" type = "tns:WSDataModelArray"/>

	<xsd:complexType name="WSDataModelPKArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsDataModelPKs" type="tns:WSDataModelPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDataModelPKArray" type = "tns:WSDataModelPKArray"/>

	<xsd:complexType name="WSBusinessConcept">
		<xsd:annotation>
			<xsd:documentation>
				The description of a concept within a Data Model
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="businessTemplate" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsUniqueKey" type="tns:WSKey"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="wsLabel" type="tns:WSI18nString"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="wsDescription" type="tns:WSI18nString"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSBusinessConcept" type="tns:WSBusinessConcept"/>

	<xsd:simpleType name="WSTemplateType">
		<xsd:annotation>
			<xsd:documentation>
				An enumertion of the type of template for a concept in a data model
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:NMTOKEN">
    		<xsd:enumeration value="SIMPLE"/>
    		<xsd:enumeration value="COMPLEX"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WSBusinessTemplate">
		<xsd:annotation>
			<xsd:documentation>
				The description of a generic type for a concept of sub-element in a model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="type" type="tns:WSTemplateType"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="simpleTemplate" type="tns:WSBusinessSimpleTemplate"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="complexTemplate" type="tns:WSBusinessComplexTemplate"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSBusinessTemplate" type="tns:WSBusinessTemplate"/>


	<xsd:complexType name="WSBusinessSimpleTemplate">
		<xsd:annotation>
			<xsd:documentation>
				The desription of a simple generic type within a data model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="xsdBaseType" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="pattern" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSBusinessSimpleTemplate" type="tns:WSBusinessSimpleTemplate"/>

	<xsd:complexType name="WSBusinessComplexTemplate">
		<xsd:annotation>
			<xsd:documentation>
				The description of a complex type within a data model
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsBusinessElements" type="tns:WSBusinessElement"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSBusinessComplexTemplate" type="tns:WSBusinessComplexTemplate"/>

	<xsd:complexType name="WSBusinessElement">
		<xsd:annotation>
			<xsd:documentation>
				A "sub-element" in a Complex Template
				xsd types can be used as business template
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="minOccurs" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxOccurs" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="businessTemplate" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="wsForeignKey" type="tns:WSKey"/> <!-- ignored in this release -->
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="wsLabel" type="tns:WSI18nString"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="wsDescription" type="tns:WSI18nString"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSBusinessElement" type="tns:WSBusinessElement"/>


	<!-- Operations -->

	<xsd:complexType name="WSPutDataModel">
		<xsd:annotation>
			<xsd:documentation>
				A message to create or overwrite a data model
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModel" type="tns:WSDataModel"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPutDataModel" type="tns:WSPutDataModel"/>

	<xsd:complexType name="WSGetDataModel">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve a data model.
				A SOAP Exception is thrown if the data model is not found
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetDataModel" type="tns:WSGetDataModel"/>

	<xsd:complexType name="WSExistsDataModel">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve a data model.
				No Exception is thrown if the data model is not found
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSExistsDataModel" type="tns:WSExistsDataModel"/>

	<xsd:complexType name="WSDeleteDataModel">
		<xsd:annotation>
			<xsd:documentation>
				A message to delete a Data Model
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDeleteDataModel" type="tns:WSDeleteDataModel"/>

	<xsd:complexType name="WSRegexDataModelPKs">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrive  a list of data model Primary Keys (their name) using a regular expression on their names
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSRegexDataModelPKs" type="tns:WSRegexDataModelPKs"/>

	<xsd:complexType name="WSCheckSchema">
		<xsd:annotation>
			<xsd:documentation>
				A message to check if a an XSD is a valid data model schema
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="schema" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSCheckSchema" type="tns:WSCheckSchema"/>

	<xsd:complexType name="WSPutBusinessConcept">
		<xsd:annotation>
			<xsd:documentation>
				A message to create/overwrite a concept in an existing data model
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="businessConcept" type="tns:WSBusinessConcept"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPutBusinessConcept" type="tns:WSPutBusinessConcept"/>

	<xsd:complexType name="WSPutBusinessConceptSchema">
		<xsd:annotation>
			<xsd:documentation>
				A message to create/overwrite a generic type in an existing data model
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="businessConceptSchema" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPutBusinessConceptSchema" type="tns:WSPutBusinessConceptSchema"/>

	<xsd:complexType name="WSDeleteBusinessConcept">
		<xsd:annotation>
			<xsd:documentation>
				A message to delete an existing cncept in an existing data model
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="businessConceptName" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDeleteBusinessConcept" type="tns:WSDeleteBusinessConcept"/>

	<xsd:complexType name="WSGetBusinessConcepts">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrive the list of all concepts in a data model
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetBusinessConcepts" type="tns:WSGetBusinessConcepts"/>

	<xsd:complexType name="WSGetBusinessConceptKey">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve the XSD Key structure (see WSConceptKey) of a concept in data model
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="concept" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetBusinessConceptKey" type="tns:WSGetBusinessConceptKey"/>

	<xsd:complexType name="WSConceptKey">
		<xsd:annotation>
			<xsd:documentation>
				The XSD key structure of a concept in a data model (see WSGetBusinessConceptKey)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="selector" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="fields" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSConceptKey" type="tns:WSConceptKey"/>




	<!-- *****************************************************
		              D A T A   C L U S T E R
	*******************************************************-->


	<xsd:simpleType name="WSDataClusterType">
		<xsd:annotation>
			<xsd:documentation>
				DEPRECATED
				The type of Data Clusters
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:NMTOKEN">
    		<xsd:enumeration value="CACHE"/>
    		<xsd:enumeration value="ITEMS"/>
			<xsd:enumeration value="UNKNOWN"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WSDataCluster">
		<xsd:annotation>
			<xsd:documentation>
				A data cluster.
				name: the unique name (primary key) of the data cluster
				description: an optional description of the data cluster
				vocabulary: a list of all the words of 3 letters of more composing the vocabulary of items stored in the data cluster; the list is collected during insertions and is used by the spell checker.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="vocabulary" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDataCluster" type = "tns:WSDataCluster"/>

	<xsd:complexType name="WSDataClusterPK">
		<xsd:annotation>
			<xsd:documentation>
				The primary key of a data cluster (its name)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="pk" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDataClusterPK" type="tns:WSDataClusterPK"/>

	<xsd:complexType name="WSDataClusterArray">
		<xsd:annotation>
			<xsd:documentation>
				An array of data cluster instances
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsDataClusters" type="tns:WSDataCluster"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDataClusterArray" type = "tns:WSDataClusterArray"/>

	<xsd:complexType name="WSDataClusterPKArray">
		<xsd:annotation>
			<xsd:documentation>
				An array of data cluster primary keys
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsDataClusterPKs" type="tns:WSDataClusterPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDataClusterPKArray" type = "tns:WSDataClusterPKArray"/>

	<!-- Operations -->
	<xsd:complexType name="WSPutDBDataCluster">
		<xsd:annotation>
			<xsd:documentation>
				?
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="revisionID" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPutDBDataCluster" type="tns:WSPutDBDataCluster"/>
	<xsd:complexType name="WSPutDataCluster">
		<xsd:annotation>
			<xsd:documentation>
				A message to create/overwrite a data-cluster
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataCluster" type="tns:WSDataCluster"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPutDataCluster" type="tns:WSPutDataCluster"/>

	<xsd:complexType name="WSGetDataCluster">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve a data cluster
				Will throw a SOAP exception if the data cluster is not found
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetDataCluster" type="tns:WSGetDataCluster"/>

	<xsd:complexType name="WSExistsDataCluster">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve a data cluster
				Will return null if the data cluster is not found
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSExistsDataCluster" type="tns:WSExistsDataCluster"/>

	<xsd:complexType name="WSExistsDBDataCluster">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve a DB (?) data cluster
				Will throw a SOAP exception if the data cluster is not found
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="revisionID" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSExistsDBDataCluster" type="tns:WSExistsDBDataCluster"/>

	<xsd:complexType name="WSDeleteDataCluster">
		<xsd:annotation>
			<xsd:documentation>
				A message to delete a data cluster
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDeleteDataCluster" type="tns:WSDeleteDataCluster"/>

	<xsd:complexType name="WSRegexDataClusterPKs">
		<xsd:annotation>
			<xsd:documentation>
				A message list Data Custer Priary Keys (their name) using a regular expression on their names.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSRegexDataClusterPKs" type="tns:WSRegexDataClusterPKs"/>

	<xsd:complexType name="WSGetConceptsInDataCluster">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve the list of concepts actually stored in a Data Cluster
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetConceptsInDataCluster" type="tns:WSGetConceptsInDataCluster"/>


	<!-- *****************************************************
		              W H E R E    E L E M E N T S
					  used by Views and Searches
		*******************************************************-->
	<xsd:complexType name="WSWhereCondition">
		<xsd:annotation>
			<xsd:documentation>
				The object used to write where conditions in queries.
				leftPath: the condition left xPath to test
				operator: the test operator; see WSWhereOperator
				rightValueOrPath: the condition right xPath or value to test against the left path
				stringPredicate: the condition predicate that further specifies the test for the CONTAINS operator
				spellCheck: whether to run a spell check on the right hand value.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="leftPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="operator" type="tns:WSWhereOperator"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="rightValueOrPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="stringPredicate" type="tns:WSStringPredicate"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellCheck" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:simpleType name="WSWhereOperator">
		<xsd:annotation>
			<xsd:documentation>
				One of the operator that can be used in a test condition; see WSWhereCondition
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="JOIN"/>
			<xsd:enumeration value="CONTAINS"/>
    		<xsd:enumeration value="STARTSWITH"/>
    		<xsd:enumeration value="STRICTCONTAINS"/>
			<xsd:enumeration value="EQUALS"/>
			<xsd:enumeration value="NOT_EQUALS"/>
			<xsd:enumeration value="GREATER_THAN"/>
			<xsd:enumeration value="GREATER_THAN_OR_EQUAL"/>
			<xsd:enumeration value="LOWER_THAN"/>
			<xsd:enumeration value="LOWER_THAN_OR_EQUAL"/>
			<xsd:enumeration value="NO_OPERATOR"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="WSStringPredicate"> <!-- for CONTAINS and STRICTCONTAINS ONLY -->
		<xsd:annotation>
			<xsd:documentation>
				A predicate for the CONTAINS operator in a condition; see WSWhereCondition
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="NONE"/>
			<xsd:enumeration value="OR"/> <!--between words -->
			<xsd:enumeration value="AND"/> <!--between words -->
			<xsd:enumeration value="STRICTAND"/> <!--between words - same PCDATA -->
    		<xsd:enumeration value="EXACTLY"/> <!-- this sentence -->
			<xsd:enumeration value="NOT"/> <!-- does not contains these cords -->
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WSWhereAnd">
		<xsd:annotation>
			<xsd:documentation>
				Links multiple conditions using an AND
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="whereItems" type="tns:WSWhereItem"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="WSWhereOr">
		<xsd:annotation>
			<xsd:documentation>
				Links multiple conditions using an OR
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="whereItems" type="tns:WSWhereItem"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="WSWhereItem">
		<xsd:annotation>
			<xsd:documentation>
				The "SuperClass" of an And or Or or WhereCondition which is passed to queries.
				To use, specify either a whereCondition, or a whereAnd or a whereOr.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="whereCondition" type="tns:WSWhereCondition"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="whereAnd" type="tns:WSWhereAnd"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="whereOr" type="tns:WSWhereOr"/>
		</xsd:sequence>
	</xsd:complexType>


	<!-- *****************************************************
		              V I E W
		*******************************************************-->

	<xsd:complexType name="WSView">
		<xsd:annotation>
			<xsd:documentation>
				A filter on items that specify the xPaths to extract, the conditions that the items must meet and the xPaths that can be searched when the user imposes additional search conditions.
				name: the name of the view
				description: the description of the view
				viewableBusinessElements: the visible xPaths (starting with the concept name) of the items found in the view
				whereConditions: the conditions that all the items must meet
				searchableBusinessElements: the xPaths (starting with the concept name) of the elements that can be seached to further refine the result
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="viewableBusinessElements" type="xsd:string"/> <!-- projected business elements -->
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="true" name="whereConditions" type="tns:WSWhereCondition"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="searchableBusinessElements" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSView" type="tns:WSView"/>

	<xsd:complexType name="WSViewPK">
		<xsd:annotation>
			<xsd:documentation>
				The primary key of a view (its name)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="pk" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSViewPK" type="tns:WSViewPK"/>

	<xsd:complexType name="WSViewPKArray">
		<xsd:annotation>
			<xsd:documentation>
				An array of view primary keys
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSViewPKArray" type = "tns:WSViewPKArray"/>

	<xsd:complexType name="WSViewArray">
		<xsd:annotation>
			<xsd:documentation>
				An array of views
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsViews" type="tns:WSView"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSViewArray" type = "tns:WSViewArray"/>

	<!-- Operations -->

	<xsd:complexType name="WSPutView">
		<xsd:annotation>
			<xsd:documentation>
				A message to create/update a view. see WSView
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsView" type="tns:WSView"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPutView" type="tns:WSPutView"/>

	<xsd:complexType name="WSGetView">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve a viwe
				Throws a SOAP exception if the view dooes not exist
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetView" type="tns:WSGetView"/>

	<xsd:complexType name="WSExistsView">
		<xsd:annotation>
			<xsd:documentation>
				A message to test if a viw exists.
				Returns the view if it exists, nil otherwise
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSExistsView" type="tns:WSExistsView"/>

	<xsd:complexType name="WSDeleteView">
		<xsd:annotation>
			<xsd:documentation>
				A message to delete an existing view
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDeleteView" type="tns:WSDeleteView"/>

	<xsd:complexType name="WSRegexViews">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve a list of views using a regular expression on their names
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSRegexViews" type="tns:WSRegexViews"/>

	<xsd:complexType name="WSGetViewPKs">
		<xsd:annotation>
			<xsd:documentation>
				A essage to retrieve a list of view primary keys using a regular expression on their names
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetViewPKs" type="tns:WSGetViewPKs"/>


	<!-- *****************************************************
		             S E A R C H     I T E M S
		*******************************************************-->

	<xsd:complexType name="WSItem">
		<xsd:annotation>
			<xsd:documentation>
				An item.
				wsDataClusterPK: the primary key of the cluster where the item is stored
				dataModelName: the name of the data model used to validate the item
				dataModelRevision: the revision of the data model used to validate the item
				conceptName: the concept of the item
				ids: a list of values making the primary key of the item
				insertionTime: the time in millis at whch the item was last stored (e.g. created or overwritten)
				content: an xml string of the item content
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="dataModelName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="dataModelRevision" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded" nillable="false" name="ids" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="insertionTime" type="xsd:long"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="content" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSItem" type="tns:WSItem"/>

	<xsd:complexType name="WSItemPK">
		<xsd:annotation>
			<xsd:documentation>
				An item Primary Key
				wsDataClusterPK: the primary key of the data cluster where the item is stored
				conceptName: the name of the concept
				ids: a list of values unique for that concept in that cluster
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded" nillable="false" name="ids" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSItemPK" type="tns:WSItemPK"/>

	<xsd:complexType name="WSItemPKArray">
		<xsd:annotation>
			<xsd:documentation>
				An array of items primary key
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSItemPKArray" type="tns:WSItemPKArray"/>

	<xsd:complexType name="WSBusinessConceptPK">
		<xsd:annotation>
			<xsd:documentation>
				The unique key of a concept
				Used in conjunction with WSGetBusinessConceptValue
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="ids" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSBusinessConceptPK" type="tns:WSBusinessConceptPK"/>

	<!-- Operations -->

	<xsd:complexType name="WSGetItem">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve an item using its primary key
				Throw an exception if not found.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetItem" type="tns:WSGetItem"/>

	<xsd:complexType name="WSExistsItem">
		<xsd:annotation>
			<xsd:documentation>
				A message to tests if an item exists.
				Returns the item if found, nil otherwise
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSExistsItem" type="tns:WSExistsItem"/>

	<xsd:complexType name="WSGetItems">
		<xsd:annotation>
			<xsd:documentation>
				A message to retieve a list of items using conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the nam of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="skip" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxItems" type="xsd:int"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetItems" type="tns:WSGetItems"/>

	<xsd:complexType name="WSGetItemPKsByCriteria">
		<xsd:annotation>
			<xsd:documentation>
				A message to retieve a list of items using keywords, storing dates and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				contentKeywords: a list of words, separated by spaces, that must be found in the content of the items
				keysKeywords: a list of words, separated by spaces, that must be found in the primary key of the items
				fromDate: the lower date in millis at which the items were last stored
				fromDate: the upper date in millis at which the items wer last stored
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="contentKeywords" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="keysKeywords" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="fromDate" type="xsd:long"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="toDate" type="xsd:long"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="skip" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxItems" type="xsd:int"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetItemPKsByCriteria" type="tns:WSGetItemPKsByCriteria"/>

	<xsd:complexType name="WSItemPKsByCriteriaResponse">
		<xsd:annotation>
			<xsd:documentation>
				The return message of WSGetItemPKsByCriteria containing the storing dates and primary keys of the matching items
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="results">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="date" type="xsd:long"/>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSItemPKsByCriteriaResponse" type="tns:WSItemPKsByCriteriaResponse"/>

	<xsd:complexType name="WSGetBusinessConceptValue">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve the value of a concept base on the data cluster and key
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsBusinessConceptPK" type="tns:WSBusinessConceptPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetBusinessConceptValue" type="tns:WSGetBusinessConceptValue"/>

	<xsd:complexType name="WSGetFullPathValues">
		<xsd:annotation>
			<xsd:documentation>
				A message to retieve all the values for an item xPath matching certain conditions
				wsDataClusterPK: the data cluster
				fullPath; the xPath to seach starting with the concept name
				whereItem: the conditions
				spellThreshold: the spell check to perform. -1 to deactivate
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="fullPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellThreshold" type="xsd:int"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="orderBy" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="direction" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetFullPathValues" type="tns:WSGetFullPathValues"/>


	<xsd:complexType name="WSViewSearch">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve items through a view using conditions and paging
				wsdataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="skip" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxItems" type="xsd:int"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="orderBy" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="direction" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSViewSearch" type="tns:WSViewSearch"/>


	<xsd:complexType name="WSXPathsSearch">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve elements of items using xPaths and optionally conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				pivotPath: the pivot xPath against which all the xPaths in viewablePaths are factored. If nil, the first viewablePath is used. The xPath must be full, strating with the concept name.
				viewablePaths: the list of xPaths for which data is retrieved. These paths are refactored against the pivot xPath. The xPaths must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="pivotPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="viewablePaths" type="tns:WSStringArray"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="skip" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxItems" type="xsd:int"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="orderBy" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="direction" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSXPathsSearch" type="tns:WSXPathsSearch"/>

	<xsd:complexType name="WSGetItemsPivotIndex">
		<xsd:annotation>
			<xsd:documentation>
				Get items hierarchical tree according to pivots
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="clusterName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="mainPivotName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="pivotWithKeys" type="tns:WSLinkedHashMap"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="indexPaths" type="tns:WSStringArray"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="pivotDirections" type="tns:WSStringArray"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="indexDirections" type="tns:WSStringArray"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="start" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="limit" type="xsd:int"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetItemsPivotIndex" type="tns:WSGetItemsPivotIndex"/>

	<xsd:complexType name="WSCount">
		<xsd:annotation>
			<xsd:documentation>
				A message to count the number of values at an xPath on items matching optional conditions.
				wsDataClusterPK: the primary key of the cluster where the items are stored
				countPath: the xPath valus which are counted. The xPath must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="countPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="whereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSCount" type="tns:WSCount"/>


	<xsd:complexType name="WSQuickSearch">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve items through a view using keywords and paging and paging
				wsDataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				searchValue: the keywords searched in the item content sparated by spaces.
				matchAllWords: if set to true, the items must math all words in searchValue
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsViewPK" type="tns:WSViewPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="searchedValue" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="maxItems" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="skip" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="matchAllWords" type="xsd:boolean"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="orderBy" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="direction" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSQuickSearch" type="tns:WSQuickSearch"/>




	<!-- *****************************************************
		P U T    I T E M
		*******************************************************-->
	<xsd:complexType name="WSPutItem">
		<xsd:annotation>
			<xsd:documentation>
				A message to create/overwrite an item
				wsDataClusterPK: the primary key of the cluster where the item is stored
				xmlString: the XML content of the item
				wsDataModelPK: the primary key of the data model used to validate the item.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="xmlString" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDataModelPK" type="tns:WSDataModelPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPutItem" type="tns:WSPutItem"/>


	<xsd:complexType name="WSUpdateReportItemPOJO">
		<xsd:annotation>
			<xsd:documentation>
				???
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="path" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="newValue" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="oldValue" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSUpdateReportItemPOJO" type="tns:WSUpdateReportItemPOJO"/>

	<xsd:complexType name="WSUpdateReportItemArray">
		<xsd:annotation>
			<xsd:documentation>
				???
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="true" name="wsUpdateReportItemPOJO" type="tns:WSUpdateReportItemPOJO"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSUpdateReportItemArray" type="tns:WSUpdateReportItemArray"/>

	<xsd:complexType name="WSPutItemWithReport">
		<xsd:annotation>
			<xsd:documentation>
				Puts an item in the xml storage with update report
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsPutItem" type="tns:WSPutItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="source" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="false" name="invokeBeforeSaving" default="true" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPutItemWithReport" type="tns:WSPutItemWithReport"/>



	<!-- *****************************************************
		             D E L E T E     I T E M S
		*******************************************************-->

	<xsd:complexType name="WSDeleteItem">
		<xsd:annotation>
			<xsd:documentation>
				A message to delete an item using its primary key
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDeleteItem" type="tns:WSDeleteItem"/>

	<xsd:complexType name="WSDeleteItems">
		<xsd:annotation>
			<xsd:documentation>
				A message to delete a list of items of a specified concept and optionally matching certain conditions
				wsDataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="wsWhereItem" type="tns:WSWhereItem"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="spellTreshold" type="xsd:int"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDeleteItems" type="tns:WSDeleteItems"/>

	<xsd:complexType name="WSDropItem">
		<xsd:annotation>
			<xsd:documentation>
				Drop an item to items trash
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="partPath" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDropItem" type="tns:WSDropItem"/>

	<!-- *****************************************************
		D I R E C T   Q U E R Y
		** !!! Use of this is fast but dangerous and makes !!!
		** !!! code non portable accross xml servers         !!!
		*******************************************************-->
	<xsd:complexType name="WSRunQuery">
		<xsd:annotation>
			<xsd:documentation>
				A message to directly run an xQuery on the XML DB.
				dataClusterPK: the primary key of the data cluster. The primary key can be nil to run cross-cluster queries
				revisionID: the revision ID of the DataCluster: nil, for the HEAD.
				query: the xQuery
				parameters: a list of parmaters that will replace the {n} in the query, where n is the nth parameter.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="revisionID" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="query" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="parameters" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSRunQuery" type="tns:WSRunQuery"/>



	<!-- *****************************************************
		C O N N E C T O R
		*******************************************************-->

	<xsd:complexType name="WSBase64KeyValue">
		<xsd:annotation>
			<xsd:documentation>
				An object used to pass data to a connector in a connector interaction - see WSConnectorInteraction
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="key" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="base64StringValue" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:simpleType name="WSConnectorFunction">
		<xsd:annotation>
			<xsd:documentation>
				An enumeration of the wtandard interactions with a connector
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="GET_STATUS"/>
			<xsd:enumeration value="START"/>
			<xsd:enumeration value="STOP"/>
			<xsd:enumeration value="PULL"/>
			<xsd:enumeration value="PUSH"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WSConnectorInteraction">
		<xsd:annotation>
			<xsd:documentation>
				A message to interact with a connector
				JNDIName: the JNDI name of the connector
				function: one of the enumerated interactions - see WSConnectorFunction
				parameters: parameters to pass to the connector - see WSBase64KeyValue
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="JNDIName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="function" type="tns:WSConnectorFunction"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded" nillable="true" name="parameters" type="tns:WSBase64KeyValue"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSConnectorInteraction" type="tns:WSConnectorInteraction"/>

	<xsd:simpleType name="WSConnectorResponseCode">
		<xsd:annotation>
			<xsd:documentation>
				A response code returned by a connector after an interaction - see WSConnectorInteraction
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="OK"/>
			<xsd:enumeration value="STOPPED"/>
			<xsd:enumeration value="ERROR"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WSConnectorInteractionResponse">
		<xsd:annotation>
			<xsd:documentation>
				The response to an interaction with a connector - see WSConnectorInteraction
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="code" type="tns:WSConnectorResponseCode"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded" nillable="true" name="parameters" type="tns:WSBase64KeyValue"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSConnectorInteractionResponse" type="tns:WSConnectorInteractionResponse"/>


	<!-- *****************************************************
		ROUTING RULE
		*******************************************************-->
	<xsd:simpleType name="WSRoutingRuleOperator">
		<xsd:annotation>
			<xsd:documentation>
				An enumerator of the conditional operators that can be used to specify conditions in Routing Rules
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="CONTAINS"/>
			<xsd:enumeration value="MATCHES"/>
			<xsd:enumeration value="STARTSWITH"/>
			<xsd:enumeration value="EQUALS"/>
			<xsd:enumeration value="NOT_EQUALS"/>
			<xsd:enumeration value="GREATER_THAN"/>
			<xsd:enumeration value="GREATER_THAN_OR_EQUAL"/>
			<xsd:enumeration value="LOWER_THAN"/>
			<xsd:enumeration value="LOWER_THAN_OR_EQUAL"/>
			<xsd:enumeration value="IS_NULL"/>
			<xsd:enumeration value="IS_NOT_NULL"/>
		</xsd:restriction>
	</xsd:simpleType>


	<xsd:complexType name="WSRoutingRuleExpression">
		<xsd:annotation>
			<xsd:documentation>
				A conditional expression in a routing rule
				name: the name of the condition
				xPath: the xPath applied to the item for the left hand value
				operator: one of the possible operators - see WSRoutingRuleOperator
				value: the right hand value
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="xpath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsOperator" type="tns:WSRoutingRuleOperator"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="value" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="WSRoutingRule">
		<xsd:annotation>
			<xsd:documentation>
				A routing rule
				name: the unique name of the rule
				description: an optional description
				synchronous: whether the rule is executed synchronously or asynchronously by the routing engine
				concept: the item concept to match. A '*' matches any concept
				serviceJNDI: the JNDI entry of the service to call when the routing rule matches
				parameters: the parmaters to be passed to the service
				wsRoutingRuleExpressions: conditional consitions that item must meet for the rule to match
				deactive: true to deactivate the rule
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="synchronous" type="xsd:boolean"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="concept" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="serviceJNDI" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="parameters" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="true" name="wsRoutingRuleExpressions" type="tns:WSRoutingRuleExpression"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="condition" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="deactive" type="xsd:boolean"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSRoutingRule" type="tns:WSRoutingRule"/>

	<xsd:complexType name="WSRoutingRulePK">
		<xsd:annotation>
			<xsd:documentation>
				The primary key of a routing rule (its name)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="pk" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSRoutingRulePK" type="tns:WSRoutingRulePK"/>

	<xsd:complexType name="WSRoutingRuleArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="true" name="wsRoutingRules" type="tns:WSRoutingRule"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSRoutingRuleArray" type = "tns:WSRoutingRuleArray"/>

	<xsd:complexType name="WSRoutingRulePKArray">
		<xsd:annotation>
			<xsd:documentation>
				A list of routing rules
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="true" name="wsRoutingRulePKs" type="tns:WSRoutingRulePK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSRoutingRulePKArray" type = "tns:WSRoutingRulePKArray"/>

	<!-- Operations -->

	<xsd:complexType name="WSPutRoutingRule">
		<xsd:annotation>
			<xsd:documentation>
				A message to create/overwrite a routing rule
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsRoutingRule" type="tns:WSRoutingRule"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPutRoutingRule" type="tns:WSPutRoutingRule"/>

	<xsd:complexType name="WSGetRoutingRule">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve a routing rule.
				Throws an Exception if the rule is not found.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsRoutingRulePK" type="tns:WSRoutingRulePK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetRoutingRule" type="tns:WSGetRoutingRule"/>

	<xsd:complexType name="WSExistsRoutingRule">
		<xsd:annotation>
			<xsd:documentation>
				A message to check the existence of a routing rule.
				Returns the rule if found, nil otherwise.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsRoutingRulePK" type="tns:WSRoutingRulePK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSExistsRoutingRule" type="tns:WSExistsRoutingRule"/>

	<xsd:complexType name="WSDeleteRoutingRule">
		<xsd:annotation>
			<xsd:documentation>
				A messaage to delete an existing routing rule
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsRoutingRulePK" type="tns:WSRoutingRulePK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDeleteRoutingRule" type="tns:WSDeleteRoutingRule"/>


	<xsd:complexType name="WSGetRoutingRulePKs">
		<xsd:annotation>
			<xsd:documentation>
				A message to list the primary keys of routing rules which names match a regular expression
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetRoutingRulePKs" type="tns:WSGetRoutingRulePKs"/>


	<!-- *****************************************************
		SERVICES
		*******************************************************-->

	<xsd:simpleType name="WSServiceActionCode">
		<xsd:annotation>
			<xsd:documentation>
				An enumeration of the various actions that can be taken on a service
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:NMTOKEN">
			<xsd:enumeration value="START"/>
			<xsd:enumeration value="STOP"/>
			<xsd:enumeration value="STATUS"/>
			<xsd:enumeration value="EXECUTE"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:element name="WSServiceActionCode" type="tns:WSServiceActionCode"/>


	<xsd:complexType name="WSServicesList">
		<xsd:annotation>
			<xsd:documentation>
				A list of JNDI names belonging to services
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence >
			<xsd:element name="Item" minOccurs="0" maxOccurs="unbounded">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="jndiName" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSServicesList" type="tns:WSServicesList"/>

	<!-- ******************** A C T I O N S************************* -->

	<xsd:complexType name="WSGetServicesList">
		<xsd:annotation>
			<xsd:documentation>
				A message to return the list of JNDI names of available Services in a WSServicesList
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="language" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetServicesList" type="tns:WSGetServicesList"/>

	<xsd:complexType name="WSServiceAction">
		<xsd:annotation>
			<xsd:documentation>
				A message to perform an action on a service
				jndiName: the JNDI name of the service
				wsAction: the action to take on the service - see WSServiceActionCode
				methodName: the service method name to call (a public EJB method)
				methodParameters: a list of parameters to pass to the method
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="jndiName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsAction" type="tns:WSServiceActionCode"/>
			<xsd:element minOccurs="0" maxOccurs="1"  nillable="true" name="methodName" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="true" name="methodParameters" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSServiceAction" type="tns:WSServiceAction"/>

	<xsd:complexType name="WSServicePutConfiguration">
		<xsd:annotation>
			<xsd:documentation>
				A message to store a configuration of a service on the server
				jndiName: the JNDI name of the service
				configuration: the configuration of the service to store on the server
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="jndiName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="configuration" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSServicePutConfiguration" type="tns:WSServicePutConfiguration"/>

	<xsd:complexType name="WSServiceGetConfiguration">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve the configuration of a service
				jndiName: the JNDI name of the service
				otionalParameter: an optional parameter to pass on the call
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="jndiName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="optionalParameter" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSServiceGetConfiguration" type="tns:WSServiceGetConfiguration"/>

	<xsd:complexType name="WSServiceGetDocument">
		<xsd:annotation>
			<xsd:documentation>
				???
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="configure" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="document" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSServiceGetDocument" type="tns:WSServiceGetDocument"/>


	<!-- *****************************************************
		Stored Procedures
		*******************************************************-->

	<xsd:complexType name="WSStoredProcedure">
		<xsd:annotation>
			<xsd:documentation>
				A stored procedure
				name: the unique name of the procedure
				description: the optional description of the procedure
				procedure: the xQuery
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="procedure" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSStoredProcedure" type = "tns:WSStoredProcedure"/>

	<xsd:complexType name="WSStoredProcedurePK">
		<xsd:annotation>
			<xsd:documentation>
				The primary key of a stored procedure (its name)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="pk" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSStoredProcedurePK" type="tns:WSStoredProcedurePK"/>

	<xsd:complexType name="WSRegexStoredProcedure">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve stored procedures which names match a regular expression
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSRegexStoredProcedure" type="tns:WSRegexStoredProcedure"/>

	<xsd:complexType name="WSStoredProcedurePKArray">
		<xsd:annotation>
			<xsd:documentation>
				A list of stored procedures primary keys
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsStoredProcedurePK" type="tns:WSStoredProcedurePK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSStoredProcedurePKArray" type = "tns:WSStoredProcedurePKArray"/>

	<xsd:complexType name="WSGetStoredProcedure">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve a stored procedure.
				An exception will be thrown if the stored procedure does not exist.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsStoredProcedurePK" type="tns:WSStoredProcedurePK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetStoredProcedure" type="tns:WSGetStoredProcedure"/>

	<xsd:complexType name="WSExistsStoredProcedure">
		<xsd:annotation>
			<xsd:documentation>
				A message to check that a stored procedure exists.
				Will return the stored procedure if found, nil otherwise.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsStoredProcedurePK" type="tns:WSStoredProcedurePK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSExistsStoredProcedure" type="tns:WSExistsStoredProcedure"/>

	<xsd:complexType name="WSPutStoredProcedure">
		<xsd:annotation>
			<xsd:documentation>
				A message to create/overwrite a stored procedure
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsStoredProcedure" type="tns:WSStoredProcedure"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPutStoredProcedure" type="tns:WSPutStoredProcedure"/>

	<xsd:complexType name="WSDeleteStoredProcedure">
		<xsd:annotation>
			<xsd:documentation>
				A message to delete a stored procedure.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsStoredProcedurePK" type="tns:WSStoredProcedurePK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDeleteStoredProcedure" type="tns:WSDeleteStoredProcedure"/>

	<xsd:complexType name="WSExecuteStoredProcedure">
		<xsd:annotation>
			<xsd:documentation>
				A message to execute a stored procedure.
				wsStoredProcedurePK: the primary key of the procedure to execute
				revisionID: the revisionID of the procedure
				wsDataClusterPK: the cluster where the procedure will be executed. If nil, the procedure will use the root of the DB as context.
				parameters: parameters passed to the stored procedure that will replace the {n} where n is the nth parameter
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsStoredProcedurePK" type="tns:WSStoredProcedurePK"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="revisionID" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="parameters" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSExecuteStoredProcedure" type="tns:WSExecuteStoredProcedure"/>

	<xsd:complexType name="WSGetStoredProcedurePKs">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieved stored procedure primary keys which names match a particular regex
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetStoredProcedurePKs" type="tns:WSGetStoredProcedurePKs"/>





	<!-- *****************************************************
		Menus
		*******************************************************-->

	<xsd:complexType name="WSMenu">
		<xsd:annotation>
			<xsd:documentation>
				A menu.
				name: the unique name of the menu
				description: the description of the menu
				menuEntries: a list of entries tha make up the menu - see WSMenuEntry
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="name" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="description" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="menuEntries" type="tns:WSMenuEntry"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSMenu" type = "tns:WSMenu"/>

	<xsd:complexType name="WSMenuEntry">
		<xsd:annotation>
			<xsd:documentation>
				An entry in a menu (a menu item).
				id: the unique id of the entry
				descriptions: a list of localized string made of their label and respective two letter code language
				context:  the context of the webapp that should be launched when clicking on the entry
				application: the name of the application within the context that should be launched when clicking on the entry
				subMenu: a list of nested menu entries that make up the sub menus
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="id" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="descriptions">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="language" type="xsd:string"/>
						<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="label" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="context" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="true" name="application" type="xsd:string"/>
			<xsd:element minOccurs="0" maxOccurs="unbounded"  nillable="false" name="subMenus" type="tns:WSMenuEntry"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSMenuEntry" type = "tns:WSMenuEntry"/>

	<xsd:complexType name="WSMenuPK">
		<xsd:annotation>
			<xsd:documentation>
				The primary key of a menu (its name)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="pk" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSMenuPK" type="tns:WSMenuPK"/>

	<xsd:complexType name="WSMenuPKArray">
		<xsd:annotation>
			<xsd:documentation>
				A list of menu primary keys
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsMenuPK" type="tns:WSMenuPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSMenuPKArray" type = "tns:WSMenuPKArray"/>

	<xsd:complexType name="WSGetMenu">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrive an existing menu.
				Throws a SOAP Exception if the menu is not found
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsMenuPK" type="tns:WSMenuPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetMenu" type="tns:WSGetMenu"/>

	<xsd:complexType name="WSExistsMenu">
		<xsd:annotation>
			<xsd:documentation>
				A message to check that a menu exists
				Returns the menu if it exists, nil otherwise
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsMenuPK" type="tns:WSMenuPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSExistsMenu" type="tns:WSExistsMenu"/>

	<xsd:complexType name="WSPutMenu">
		<xsd:annotation>
			<xsd:documentation>
				A message to create/overwrite a menu
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsMenu" type="tns:WSMenu"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSPutMenu" type="tns:WSPutMenu"/>

	<xsd:complexType name="WSDeleteMenu">
		<xsd:annotation>
			<xsd:documentation>
				A message to delete an existing menu
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsMenuPK" type="tns:WSMenuPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDeleteMenu" type="tns:WSDeleteMenu"/>

	<xsd:complexType name="WSGetMenuPKs">
		<xsd:annotation>
			<xsd:documentation>
				A message to retrieve a list of menu primary keys which names match a regular expression
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSGetMenuPKs" type="tns:WSGetMenuPKs"/>

   <!-- *****************************************************
		Dropped Item
		*******************************************************-->
    <xsd:complexType name="WSDroppedItem">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="revisionID" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="wsDataClusterPK" type="tns:WSDataClusterPK"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="uniqueId" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="conceptName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="unbounded" nillable="true" name="ids" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="partPath" type="xsd:string"/>
		    <xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="insertionUserName" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="insertionTime" type="xsd:long"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="projection" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDroppedItem" type="tns:WSDroppedItem"/>

	<xsd:complexType name="WSDroppedItemPK">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsItemPK" type="tns:WSItemPK"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="false" name="partPath" type="xsd:string"/>
			<xsd:element minOccurs="1" maxOccurs="1" nillable="true" name="revisionId" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDroppedItemPK" type="tns:WSDroppedItemPK"/>

	<xsd:complexType name="WSDroppedItemPKArray">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded"  nillable="false" name="wsDroppedItemPK" type="tns:WSDroppedItemPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSDroppedItemPKArray" type="tns:WSDroppedItemPKArray"/>

	<xsd:complexType name="WSFindAllDroppedItemsPKs">
	    <xsd:annotation>
			<xsd:documentation>
				Find all dropped items in items trash
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="regex" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSFindAllDroppedItemsPKs" type="tns:WSFindAllDroppedItemsPKs"/>

	<xsd:complexType name="WSLoadDroppedItem">
	    <xsd:annotation>
			<xsd:documentation>
				Load a dropped item from items trash
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDroppedItemPK" type="tns:WSDroppedItemPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSLoadDroppedItem" type="tns:WSLoadDroppedItem"/>

	<xsd:complexType name="WSRecoverDroppedItem">
	    <xsd:annotation>
			<xsd:documentation>
				Recover a dropped item from items trash
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDroppedItemPK" type="tns:WSDroppedItemPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSRecoverDroppedItem" type="tns:WSRecoverDroppedItem"/>

	<xsd:complexType name="WSRemoveDroppedItem">
	    <xsd:annotation>
			<xsd:documentation>
				Remove a dropped item from items trash
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1"  nillable="false" name="wsDroppedItemPK" type="tns:WSDroppedItemPK"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WSRemoveDroppedItem" type="tns:WSRemoveDroppedItem"/>



</xsd:schema>