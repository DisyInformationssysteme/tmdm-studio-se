/*
 * Generated by XDoclet - Do not edit!
 */
package com.amalto.core.ejb.local;

/**
 * Local interface for WorkflowServiceCtrl.
 * @xdoclet-generated
 * @copyright The XDoclet Team
 * @author XDoclet
 * @version ${version}
 */
public interface WorkflowServiceCtrlLocal
   extends com.amalto.core.ejb.local.ServiceCtrlLocal
{
   /**
    * deploy
    * @throws XtentisException
    */
   public org.ow2.bonita.facade.uuid.ProcessDefinitionUUID deploy( java.lang.String barFilePath ) throws com.amalto.core.util.XtentisException;

   /**
    * undeploy
    * @throws XtentisException
    */
   public void undeploy( org.ow2.bonita.facade.uuid.ProcessDefinitionUUID uuid ) throws com.amalto.core.util.XtentisException;

   /**
    * Get Process Definitions
    * @throws XtentisException
    */
   public java.util.Set getProcessDefinitions(  ) throws com.amalto.core.util.XtentisException;

   /**
    * instantiate Process
    * @throws XtentisException
    */
   public org.ow2.bonita.facade.uuid.ProcessInstanceUUID instantiateProcess( java.lang.String processDefinitionId,java.lang.String processDefinitionVersion ) throws com.amalto.core.util.XtentisException;

   /**
    * Get Process Instances
    * @throws XtentisException
    */
   public java.util.Set getProcessInstances( org.ow2.bonita.facade.uuid.ProcessDefinitionUUID processDefinitionUUID ) throws com.amalto.core.util.XtentisException;

   /**
    * Cancel ProcessInstance
    * @throws XtentisException
    */
   public void cancelProcessInstance( org.ow2.bonita.facade.uuid.ProcessInstanceUUID instanceUUID ) throws com.amalto.core.util.XtentisException;

   /**
    * Delete Process Instances
    * @throws XtentisException
    */
   public void deleteProcessInstance( org.ow2.bonita.facade.uuid.ProcessInstanceUUID instanceUUID ) throws com.amalto.core.util.XtentisException;

   /**
    * Get Process Instance Variables
    * @throws XtentisException
    */
   public java.util.Map getProcessInstanceVariables( org.ow2.bonita.facade.uuid.ProcessInstanceUUID instanceUUID ) throws com.amalto.core.util.XtentisException;

   /**
    * Set Process Instance Variable
    * @throws XtentisException
    */
   public void setProcessInstanceVariable( org.ow2.bonita.facade.uuid.ProcessInstanceUUID instanceUUID,java.lang.String variableName,java.lang.Object variableValue ) throws com.amalto.core.util.XtentisException;

   /**
    * Get Task List
    * @throws XtentisException
    */
   public java.util.Collection getTaskList( org.ow2.bonita.facade.uuid.ProcessInstanceUUID instanceUUID,org.ow2.bonita.facade.runtime.ActivityState state ) throws com.amalto.core.util.XtentisException;

   /**
    * Get Task List
    * @throws XtentisException
    */
   public java.util.Collection getTaskList( org.ow2.bonita.facade.uuid.ProcessInstanceUUID instanceUUID ) throws com.amalto.core.util.XtentisException;

   /**
    * Get Task State
    * @throws XtentisException
    */
   public org.ow2.bonita.facade.runtime.ActivityState getTaskState( org.ow2.bonita.facade.uuid.ActivityInstanceUUID taskUUID ) throws com.amalto.core.util.XtentisException;

   /**
    * Start Task
    * @throws XtentisException
    */
   public void startTask( org.ow2.bonita.facade.uuid.ActivityInstanceUUID taskUUID ) throws com.amalto.core.util.XtentisException;

   /**
    * Suspend Task
    * @throws XtentisException
    */
   public void suspendTask( org.ow2.bonita.facade.uuid.ActivityInstanceUUID taskUUID ) throws com.amalto.core.util.XtentisException;

   /**
    * Resume Task
    * @throws XtentisException
    */
   public void resumeTask( org.ow2.bonita.facade.uuid.ActivityInstanceUUID taskUUID ) throws com.amalto.core.util.XtentisException;

   /**
    * Finish Task
    * @throws XtentisException
    */
   public void finishTask( org.ow2.bonita.facade.uuid.ActivityInstanceUUID taskUUID ) throws com.amalto.core.util.XtentisException;

   /**
    * Set Activity Instance Variable
    * @throws XtentisException
    */
   public void setActivityInstanceVariable( org.ow2.bonita.facade.uuid.ActivityInstanceUUID taskUUID,java.lang.String variableName,java.lang.Object variableValue ) throws com.amalto.core.util.XtentisException;

   /**
    * To be Implemented. Returns the unique JNDI name of the service. The JNDI name must be of the type amalto/local/service/[NAME] where [NAME] matchs the pattern "[a-zA-Z][a-zA-Z0-9]*" and is unique accross services
    * @throws EJBException
    */
   public java.lang.String getJNDIName(  ) throws com.amalto.core.util.XtentisException;

   /**
    * To be Implemented. Returns the description of the service. Can be null
    * @throws EJBException
    */
   public java.lang.String getDescription( java.lang.String twoLettersLanguageCode ) throws com.amalto.core.util.XtentisException;

   public java.lang.String getDocumentation( java.lang.String twoLettersLanguageCode ) throws com.amalto.core.util.XtentisException;

   /**
    * To be Implemented. Starts if needed the service Can be null
    * @throws EJBException
    */
   public void start(  ) throws com.amalto.core.util.XtentisException;

   /**
    * To be Implemented. Stops if needed the service Can be null
    * @throws EJBException
    */
   public void stop(  ) throws com.amalto.core.util.XtentisException;

   /**
    * To be Implemented. Returns a status of the service Can be null
    * @throws EJBException
    */
   public java.lang.String getStatus(  ) throws com.amalto.core.util.XtentisException;

   /**
    * To be implemented Runs the service. The object received in an HashMap made of -username - String -password - String -contentType - String -charset - String -bytes - bytes[] -paramameters - HashMap
    * @throws EJBException
    * @return Serializable - a serializable Object to be passed backed to the connector
    */
   public java.io.Serializable receiveFromOutbound( java.util.HashMap map ) throws com.amalto.core.util.XtentisException;

   /**
    * To be implemented Runs the service. The item received in an XML String
    * @param itemPK - the item that triggered a Routing Rule <hich created the Active Routing Order
    * @param routingOrderID - the routing Order ID of the routing rule that called - From 2.19.0, the Routing Order is an ActiveRoutingOrderPOJO
    * @param parameters - the routing rules parameters
    * @return this value is appended at the end of the message field of the Routing Order
    * @throws XtentisException
    */
   public java.lang.String receiveFromInbound( com.amalto.core.ejb.ItemPOJOPK itemPK,java.lang.String routingOrderID,java.lang.String parameters ) throws com.amalto.core.util.XtentisException;

   /**
    * To be implemented To request and get the response from other applications
    * @param command - used to call different pull method in service Object
    * @param parameters - incoming parameters, may be in xml format
    * @param schedulePlanID - the ID of schedule plan, if in schedule mode
    * @return Serializable - a serializable Object to be passed backed to the system
    * @throws XtentisException
    */
   public java.io.Serializable fetchFromOutbound( java.lang.String command,java.lang.String parameters,java.lang.String schedulePlanID ) throws com.amalto.core.util.XtentisException;

   /**
    * Configuration received from outbound, typically a portlet The default implementation stores the configuration string "as is"
    * @throws EJBException
    */
   public void putConfiguration( java.lang.String configuration ) throws com.amalto.core.util.XtentisException;

   /**
    * Returns the XML schema for the configuration<br> Can be null
    * @throws XtentisException
    */
   public java.lang.String getConfigurationSchema(  ) throws com.amalto.core.util.XtentisException;

   /**
    * return default the configuration<br> Can be null
    * @throws XtentisException
    */
   public java.lang.String getDefaultConfiguration(  ) throws com.amalto.core.util.XtentisException;

   /**
    * Retrieves the configuration The default implementation renders the configuration string "as stored" and ignore the optional parameter
    * @throws EJBException
    */
   public java.lang.String getConfiguration( java.lang.String optionalParameter ) throws com.amalto.core.util.XtentisException;

   /**
    * Configuration received from outbound, typically a portlet The default implementation stores the configuration string "as is"
    * @throws EJBException
    */
   public void putServiceData( java.lang.String serviceData ) throws com.amalto.core.util.XtentisException;

}
