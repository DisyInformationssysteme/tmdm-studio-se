<?xml version="1.0" encoding="UTF-8"?>
<documentation>
   <operations>
      <operation>
         <name>getComponentVersion</name>
         <documentation>Retrieves the version of a component, typically the version of the core or of a connector</documentation>
         <in>WSGetComponentVersion</in>
         <out>WSVersion</out>
      </operation>
      <operation>
         <name>ping</name>
         <documentation>A simple ping to which the server respond to by a pong. Used to check if the server is up</documentation>
         <in>WSPing</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>logout</name>
         <documentation>Logs out an user by clearing the JAAS caches.This operation must be invoked after a role is changed on an user.</documentation>
         <in>WSLogout</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>initMDM</name>
         <documentation>DEPRECATED</documentation>
         <in>WSInitData</in>
         <out>WSInt</out>
      </operation>
      <operation>
         <name>getDataModelPKs</name>
         <documentation>Lists the Data Models using a regular expression on their names</documentation>
         <in>WSRegexDataModelPKs</in>
         <out>WSDataModelPKArray</out>
      </operation>
      <operation>
         <name>existsDataModel</name>
         <documentation>Checks the existence of a Data Model and returns it if it exists</documentation>
         <in>WSExistsDataModel</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>getDataModel</name>
         <documentation>Retrieve a Data Model</documentation>
         <in>WSGetDataModel</in>
         <out>WSDataModel</out>
      </operation>
      <operation>
         <name>putDataModel</name>
         <documentation>Store/overwrites a Data Model</documentation>
         <in>WSPutDataModel</in>
         <out>WSDataModelPK</out>
      </operation>
      <operation>
         <name>deleteDataModel</name>
         <documentation>Delete a Data Model</documentation>
         <in>WSDeleteDataModel</in>
         <out>WSDataModelPK</out>
      </operation>
      <operation>
         <name>checkSchema</name>
         <documentation>Checks the validity of an (XSD) schema for a Data Model</documentation>
         <in>WSCheckSchema</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>deleteBusinessConcept</name>
         <documentation>Delete a Concept from a Data Model</documentation>
         <in>WSDeleteBusinessConcept</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>putBusinessConceptSchema</name>
         <documentation>Create a Concept in Data Model by inserting it (XSD) schema</documentation>
         <in>WSPutBusinessConceptSchema</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>getBusinessConcepts</name>
         <documentation>Retrieve the list of Concepts in a Data Model</documentation>
         <in>WSGetBusinessConcepts</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>putBusinessConcept</name>
         <documentation>Create aConcept</documentation>
         <in>WSPutBusinessConcept</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>getBusinessConceptKey</name>
         <documentation>Retrieve the elements constitutive of the key of a Concept</documentation>
         <in>WSGetBusinessConceptKey</in>
         <out>WSConceptKey</out>
      </operation>
      <operation>
         <name>getDataClusterPKs</name>
         <documentation>Retrieve the list of Data Clusters using a regular expression on their names</documentation>
         <in>WSRegexDataClusterPKs</in>
         <out>WSDataClusterPKArray</out>
      </operation>
      <operation>
         <name>getDataCluster</name>
         <documentation>Retrieve a Data Cluster</documentation>
         <in>WSGetDataCluster</in>
         <out>WSDataCluster</out>
      </operation>
      <operation>
         <name>existsDataCluster</name>
         <documentation>Checks the existence of a Data Cluster and return it if it exists</documentation>
         <in>WSExistsDataCluster</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>existsDBDataCluster</name>
         <documentation>???</documentation>
         <in>WSExistsDBDataCluster</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>putDataCluster</name>
         <documentation>Store/Overwrites a Data Cluster</documentation>
         <in>WSPutDataCluster</in>
         <out>WSDataClusterPK</out>
      </operation>
      <operation>
         <name>putDBDataCluster</name>
         <documentation>???</documentation>
         <in>WSPutDBDataCluster</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>deleteDataCluster</name>
         <documentation>Delete a Data Cluster (and the Items contained inside the Data Cluster)</documentation>
         <in>WSDeleteDataCluster</in>
         <out>WSDataClusterPK</out>
      </operation>
      <operation>
         <name>getConceptsInDataCluster</name>
         <documentation>Retrieve a list of all the Concepts stored in a Data Cluster</documentation>
         <in>WSGetConceptsInDataCluster</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>getConceptsInDataClusterWithRevisions</name>
         <documentation>Retrieve the list of all Concepts stored in a Data Cluster for a specific revision</documentation>
         <in>WSGetConceptsInDataClusterWithRevisions</in>
         <out>WSConceptRevisionMap</out>
      </operation>
      <operation>
         <name>getViewPKs</name>
         <documentation>Retrieve a list of Views using a regular expression on their names</documentation>
         <in>WSGetViewPKs</in>
         <out>WSViewPKArray</out>
      </operation>
      <operation>
         <name>getView</name>
         <documentation>Retrieve a View</documentation>
         <in>WSGetView</in>
         <out>WSView</out>
      </operation>
      <operation>
         <name>existsView</name>
         <documentation>Checks the existence of a View and return it if it exists</documentation>
         <in>WSExistsView</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>putView</name>
         <documentation>Create/Overwrite a View</documentation>
         <in>WSPutView</in>
         <out>WSViewPK</out>
      </operation>
      <operation>
         <name>deleteView</name>
         <documentation>Delete a View</documentation>
         <in>WSDeleteView</in>
         <out>WSViewPK</out>
      </operation>
      <operation>
         <name>getBusinessConceptValue</name>
         <documentation>???</documentation>
         <in>WSGetBusinessConceptValue</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>getFullPathValues</name>
         <documentation>Retrieve the values for a list of xPaths</documentation>
         <in>WSGetFullPathValues</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>getItem</name>
         <documentation>Retrieve an Item</documentation>
         <in>WSGetItem</in>
         <out>WSItem</out>
      </operation>
      <operation>
         <name>existsItem</name>
         <documentation>Checks the existence of an Item and return it if it exists</documentation>
         <in>WSExistsItem</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>getItems</name>
         <documentation>Retrieve a list or sublist of items for a designated concept using search criteria</documentation>
         <in>WSGetItems</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>getItemPKsByCriteria</name>
         <documentation>Retrieve a list or sublist of Item primary keys for a designated concept using search criteria</documentation>
         <in>WSGetItemPKsByCriteria</in>
         <out>WSItemPKsByCriteriaResponse</out>
      </operation>
      <operation>
         <name>viewSearch</name>
         <documentation>Retrieve a list of values specified using a View</documentation>
         <in>WSViewSearch</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>xPathsSearch</name>
         <documentation>Retrieve a list or sublist of xml documents specified using xPaths and optional conditions on the Items content</documentation>
         <in>WSXPathsSearch</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>getItemsPivotIndex</name>
         <documentation>Get Items hierarchical tree according to pivots</documentation>
         <in>WSGetItemsPivotIndex</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>count</name>
         <documentation>Count values for a particular xPath using optional conditions on the Items content</documentation>
         <in>WSCount</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>quickSearch</name>
         <documentation>Retrieve Items thru a view using optional conditions and keywords on the Items content</documentation>
         <in>WSQuickSearch</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>putItem</name>
         <documentation>Create/Overwrite an Item</documentation>
         <in>WSPutItem</in>
         <out>WSItemPK</out>
      </operation>
      <operation>
         <name>putItemArray</name>
         <documentation>Create/overwrite a list of Items</documentation>
         <in>WSPutItemArray</in>
         <out>WSItemPKArray</out>
      </operation>
      <operation>
         <name>putItemWithReport</name>
         <documentation>???</documentation>
         <in>WSPutItemWithReport</in>
         <out>WSItemPK</out>
      </operation>
      <operation>
         <name>putItemWithReportArray</name>
         <documentation>???</documentation>
         <in>WSPutItemWithReportArray</in>
         <out>WSItemPKArray</out>
      </operation>
      <operation>
         <name>extractUsingTransformer</name>
         <documentation>Extract an Item using its key and return the result after having it processed thriough a Transformer</documentation>
         <in>WSExtractUsingTransformer</in>
         <out>WSPipeline</out>
      </operation>
      <operation>
         <name>extractUsingTransformerThruView</name>
         <documentation>Extract an Item using its key and return the result after having it processed thriough a Transformer and filtered by a View</documentation>
         <in>WSExtractUsingTransformerThruView</in>
         <out>WSPipeline</out>
      </operation>
      <operation>
         <name>deleteItem</name>
         <documentation>Delete an existing Item</documentation>
         <in>WSDeleteItem</in>
         <out>WSItemPK</out>
      </operation>
      <operation>
         <name>deleteItems</name>
         <documentation>Delete a list of existing Items</documentation>
         <in>WSDeleteItems</in>
         <out>WSInt</out>
      </operation>
      <operation>
         <name>dropItem</name>
         <documentation>???</documentation>
         <in>WSDropItem</in>
         <out>WSDroppedItemPK</out>
      </operation>
      <operation>
         <name>runQuery</name>
         <documentation>Directly execute a query on the database and return the response</documentation>
         <in>WSRunQuery</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>connectorInteraction</name>
         <documentation>Interact with a Connector: start, stop, get status, etc...</documentation>
         <in>WSConnectorInteraction</in>
         <out>WSConnectorInteractionResponse</out>
      </operation>
      <operation>
         <name>getRoutingRulePKs</name>
         <documentation>Retrieve a list if Routing Rules using a regular expression on their name</documentation>
         <in>WSGetRoutingRulePKs</in>
         <out>WSRoutingRulePKArray</out>
      </operation>
      <operation>
         <name>getRoutingRule</name>
         <documentation>Retrieve an existing Routing Rule</documentation>
         <in>WSGetRoutingRule</in>
         <out>WSRoutingRule</out>
      </operation>
      <operation>
         <name>existsRoutingRule</name>
         <documentation>Check the existence of a Routing Rule and return it if it exists</documentation>
         <in>WSExistsRoutingRule</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>putRoutingRule</name>
         <documentation>Create/Overwrite a Routing Rule</documentation>
         <in>WSPutRoutingRule</in>
         <out>WSRoutingRulePK</out>
      </operation>
      <operation>
         <name>deleteRoutingRule</name>
         <documentation>Delete and existing Routing Rule</documentation>
         <in>WSDeleteRoutingRule</in>
         <out>WSRoutingRulePK</out>
      </operation>
      <operation>
         <name>serviceAction</name>
         <documentation>Interact with a Service: start, stop, get status, execute....</documentation>
         <in>WSServiceAction</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>getServiceConfiguration</name>
         <documentation>Retrieve the configuration of a Service</documentation>
         <in>WSServiceGetConfiguration</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>putServiceConfiguration</name>
         <documentation>Store the configuration of a Service</documentation>
         <in>WSServicePutConfiguration</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>getServicesList</name>
         <documentation>Retrieve the list of available Services on the server</documentation>
         <in>WSGetServicesList</in>
         <out>WSServicesList</out>
      </operation>
      <operation>
         <name>getServiceDocument</name>
         <documentation>???</documentation>
         <in>WSString</in>
         <out>WSServiceGetDocument</out>
      </operation>
      <operation>
         <name>getStoredProcedure</name>
         <documentation>Retrieve an existing Stored Procedure</documentation>
         <in>WSGetStoredProcedure</in>
         <out>WSStoredProcedure</out>
      </operation>
      <operation>
         <name>existsStoredProcedure</name>
         <documentation>Checks the existence of a Stored Procedure and return it if it exists</documentation>
         <in>WSExistsStoredProcedure</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>getStoredProcedurePKs</name>
         <documentation>Retrieve a list of Stored Procedures using a regular expression on their names</documentation>
         <in>WSRegexStoredProcedure</in>
         <out>WSStoredProcedurePKArray</out>
      </operation>
      <operation>
         <name>putStoredProcedure</name>
         <documentation>Creates/Overwrites a Stored Procedure</documentation>
         <in>WSPutStoredProcedure</in>
         <out>WSStoredProcedurePK</out>
      </operation>
      <operation>
         <name>deleteStoredProcedure</name>
         <documentation>Deletes an existing Stored Procedure</documentation>
         <in>WSDeleteStoredProcedure</in>
         <out>WSStoredProcedurePK</out>
      </operation>
      <operation>
         <name>executeStoredProcedure</name>
         <documentation>Executes a Stored Procedure with optional parameters and return the result</documentation>
         <in>WSExecuteStoredProcedure</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>getTransformer</name>
         <documentation>DEPRECATED - use the TransformerV2 version</documentation>
         <in>WSGetTransformer</in>
         <out>WSTransformer</out>
      </operation>
      <operation>
         <name>existsTransformer</name>
         <documentation>DEPRECATED - use the TransformerV2 version</documentation>
         <in>WSExistsTransformer</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>getTransformerPKs</name>
         <documentation>DEPRECATED - use the TransformerV2 version</documentation>
         <in>WSGetTransformerPKs</in>
         <out>WSTransformerPKArray</out>
      </operation>
      <operation>
         <name>putTransformer</name>
         <documentation>DEPRECATED - use the TransformerV2 version</documentation>
         <in>WSPutTransformer</in>
         <out>WSTransformerPK</out>
      </operation>
      <operation>
         <name>deleteTransformer</name>
         <documentation>DEPRECATED - use the TransformerV2 version</documentation>
         <in>WSDeleteTransformer</in>
         <out>WSTransformerPK</out>
      </operation>
      <operation>
         <name>processBytesUsingTransformer</name>
         <documentation>DEPRECATED - use the TransformerV2 version</documentation>
         <in>WSProcessBytesUsingTransformer</in>
         <out>WSPipeline</out>
      </operation>
      <operation>
         <name>processFileUsingTransformer</name>
         <documentation>DEPRECATED - use the TransformerV2 version</documentation>
         <in>WSProcessFileUsingTransformer</in>
         <out>WSPipeline</out>
      </operation>
      <operation>
         <name>processBytesUsingTransformerAsBackgroundJob</name>
         <documentation>DEPRECATED - use the TransformerV2 version</documentation>
         <in>WSProcessBytesUsingTransformerAsBackgroundJob</in>
         <out>WSBackgroundJobPK</out>
      </operation>
      <operation>
         <name>processFileUsingTransformerAsBackgroundJob</name>
         <documentation>DEPRECATED - use the TransformerV2 version</documentation>
         <in>WSProcessFileUsingTransformerAsBackgroundJob</in>
         <out>WSBackgroundJobPK</out>
      </operation>
      <operation>
         <name>getTransformerV2</name>
         <documentation>Retrieve a Transformer</documentation>
         <in>WSGetTransformerV2</in>
         <out>WSTransformerV2</out>
      </operation>
      <operation>
         <name>existsTransformerV2</name>
         <documentation>Checks the existence of a Transformer and return it if it exists</documentation>
         <in>WSExistsTransformerV2</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>getTransformerV2PKs</name>
         <documentation>Retrieve a list of Transformers using a regular expression on their names</documentation>
         <in>WSGetTransformerV2PKs</in>
         <out>WSTransformerV2PKArray</out>
      </operation>
      <operation>
         <name>putTransformerV2</name>
         <documentation>Create/Overwrite a Transformer</documentation>
         <in>WSPutTransformerV2</in>
         <out>WSTransformerV2PK</out>
      </operation>
      <operation>
         <name>deleteTransformerV2</name>
         <documentation>Delete and existing Transformer</documentation>
         <in>WSDeleteTransformerV2</in>
         <out>WSTransformerV2PK</out>
      </operation>
      <operation>
         <name>executeTransformerV2</name>
         <documentation>Execute a Transformer by passing it an initial Pipeline content and return the result</documentation>
         <in>WSExecuteTransformerV2</in>
         <out>WSTransformerContext</out>
      </operation>
      <operation>
         <name>executeTransformerV2AsJob</name>
         <documentation>Execute in the background a Transformer by passing it an initial Pipeline content. This call returns a Job ID. Use this ID to retrieve the Job and read the progress and result</documentation>
         <in>WSExecuteTransformerV2AsJob</in>
         <out>WSBackgroundJobPK</out>
      </operation>
      <operation>
         <name>extractThroughTransformerV2</name>
         <documentation>Extracts and item en process it through a transformer before returning the result</documentation>
         <in>WSExtractThroughTransformerV2</in>
         <out>WSTransformerContext</out>
      </operation>
      <operation>
         <name>existsTransformerPluginV2</name>
         <documentation>Checks the exsitence of a Transformer Plugin and return it if it exists</documentation>
         <in>WSExistsTransformerPluginV2</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>getTransformerPluginV2Configuration</name>
         <documentation>Retrieve the configuration of a Transformer Plugin</documentation>
         <in>WSTransformerPluginV2GetConfiguration</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>putTransformerPluginV2Configuration</name>
         <documentation>Store the configuration of a Transformer Plugin</documentation>
         <in>WSTransformerPluginV2PutConfiguration</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>getTransformerPluginV2Details</name>
         <documentation>Retrieve information about a Transformer Plugin: documentation, </documentation>
         <in>WSGetTransformerPluginV2Details</in>
         <out>WSTransformerPluginV2Details</out>
      </operation>
      <operation>
         <name>getTransformerPluginV2sList</name>
         <documentation>Retrieve a list of Transformer PLugins</documentation>
         <in>WSGetTransformerPluginV2sList</in>
         <out>WSTransformerPluginV2sList</out>
      </operation>
      <operation>
         <name>getRole</name>
         <documentation>Retrieve a Role</documentation>
         <in>WSGetRole</in>
         <out>WSRole</out>
      </operation>
      <operation>
         <name>existsRole</name>
         <documentation>Checks the existence of a role and return it if it exists</documentation>
         <in>WSExistsRole</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>getRolePKs</name>
         <documentation>Retrieve a list of roles using a regular expression</documentation>
         <in>WSGetRolePKs</in>
         <out>WSRolePKArray</out>
      </operation>
      <operation>
         <name>putRole</name>
         <documentation>Create/Overwrite a Role</documentation>
         <in>WSPutRole</in>
         <out>WSRolePK</out>
      </operation>
      <operation>
         <name>deleteRole</name>
         <documentation>Delete a Role</documentation>
         <in>WSDeleteRole</in>
         <out>WSRolePK</out>
      </operation>
      <operation>
         <name>getObjectsForRoles</name>
         <documentation>Retrieve the list of MDM objects that can be subjected to roles management</documentation>
         <in>WSGetObjectsForRoles</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>getMenu</name>
         <documentation>Retrieve a Menu</documentation>
         <in>WSGetMenu</in>
         <out>WSMenu</out>
      </operation>
      <operation>
         <name>existsMenu</name>
         <documentation>Checks the existence of a Menu and return it it exists</documentation>
         <in>WSExistsMenu</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>getMenuPKs</name>
         <documentation>Retrieve a list of Menus using a regular expression on their names</documentation>
         <in>WSGetMenuPKs</in>
         <out>WSMenuPKArray</out>
      </operation>
      <operation>
         <name>putMenu</name>
         <documentation>Create/Overwrite a Menu</documentation>
         <in>WSPutMenu</in>
         <out>WSMenuPK</out>
      </operation>
      <operation>
         <name>deleteMenu</name>
         <documentation>Delete an existing Menu</documentation>
         <in>WSDeleteMenu</in>
         <out>WSMenuPK</out>
      </operation>
      <operation>
         <name>versioningGetObjectsHistory</name>
         <documentation>Retrieve the SVN history of an MDM object</documentation>
         <in>WSVersioningGetObjectsHistory</in>
         <out>WSVersioningObjectsHistory</out>
      </operation>
      <operation>
         <name>versioningGetItemsHistory</name>
         <documentation>Retrieve the SVN history of an Item</documentation>
         <in>WSVersioningGetItemsHistory</in>
         <out>WSVersioningItemsHistory</out>
      </operation>
      <operation>
         <name>getVersioningSystemConfiguration</name>
         <documentation>Retrieve the versioning system configuration</documentation>
         <in>WSGetVersioningSystemConfiguration</in>
         <out>WSVersioningSystemConfiguration</out>
      </operation>
      <operation>
         <name>putVersioningSystemConfiguration</name>
         <documentation>Store the versioning system configuration</documentation>
         <in>WSPutVersioningSystemConfiguration</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>versioningGetInfo</name>
         <documentation>Retrieve whether the versioning system is enabled</documentation>
         <in>WSVersioningGetInfo</in>
         <out>WSVersioningInfo</out>
      </operation>
      <operation>
         <name>versioningTagObjects</name>
         <documentation>Tag an MDM Object in the versioning system</documentation>
         <in>WSVersioningTagObjects</in>
         <out>WSBackgroundJobPK</out>
      </operation>
      <operation>
         <name>versioningTagItems</name>
         <documentation>Tag an Item in the versioning system</documentation>
         <in>WSVersioningTagItems</in>
         <out>WSBackgroundJobPK</out>
      </operation>
      <operation>
         <name>versioningRestoreObjects</name>
         <documentation>Restore an MDM Object of a particular version and replace the current MDM Object</documentation>
         <in>WSVersioningRestoreObjects</in>
         <out>WSBackgroundJobPK</out>
      </operation>
      <operation>
         <name>versioningRestoreItems</name>
         <documentation>Restore an Item of a particular version and replace the current Item</documentation>
         <in>WSVersioningRestoreItems</in>
         <out>WSBackgroundJobPK</out>
      </operation>
      <operation>
         <name>findBackgroundJobPKs</name>
         <documentation>Retrieve a list of Background Jobs using a regular expression of their ids</documentation>
         <in>WSFindBackgroundJobPKs</in>
         <out>WSBackgroundJobPKArray</out>
      </operation>
      <operation>
         <name>putBackgroundJob</name>
         <documentation>Create/Overwrite a Background Job</documentation>
         <in>WSPutBackgroundJob</in>
         <out>WSBackgroundJobPK</out>
      </operation>
      <operation>
         <name>getBackgroundJob</name>
         <documentation>Retrieve an existing BackGround Job</documentation>
         <in>WSGetBackgroundJob</in>
         <out>WSBackgroundJob</out>
      </operation>
      <operation>
         <name>getRoutingOrderV2</name>
         <documentation>Retrieve a Routing Order</documentation>
         <in>WSGetRoutingOrderV2</in>
         <out>WSRoutingOrderV2</out>
      </operation>
      <operation>
         <name>existsRoutingOrderV2</name>
         <documentation>Checks the existence of a Routing Order and return it if it exists</documentation>
         <in>WSExistsRoutingOrderV2</in>
         <out>WSRoutingOrderV2</out>
      </operation>
      <operation>
         <name>deleteRoutingOrderV2</name>
         <documentation>Delete an existing Routing Order</documentation>
         <in>WSDeleteRoutingOrderV2</in>
         <out>WSRoutingOrderV2PK</out>
      </operation>
      <operation>
         <name>executeRoutingOrderV2Asynchronously</name>
         <documentation>Execute a Routing Order asynchronously (e.g. "fire and forget")</documentation>
         <in>WSExecuteRoutingOrderV2Asynchronously</in>
         <out>WSRoutingOrderV2PK</out>
      </operation>
      <operation>
         <name>executeRoutingOrderV2Synchronously</name>
         <documentation>Executes a Routing Order and return the result of the execution</documentation>
         <in>WSExecuteRoutingOrderV2Synchronously</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>getRoutingOrderV2PKsByCriteria</name>
         <documentation>Retrieve a list of Routing Order primary keys using criteria on their content</documentation>
         <in>WSGetRoutingOrderV2PKsByCriteria</in>
         <out>WSRoutingOrderV2PKArray</out>
      </operation>
      <operation>
         <name>getRoutingOrderV2sByCriteria</name>
         <documentation>Retrieve a list of Routing Order objects using criteria on their content</documentation>
         <in>WSGetRoutingOrderV2sByCriteria</in>
         <out>WSRoutingOrderV2Array</out>
      </operation>
      <operation>
         <name>routeItemV2</name>
         <documentation>Sends an Item for routing to the Subscription Engine</documentation>
         <in>WSRouteItemV2</in>
         <out>WSRoutingRulePKArray</out>
      </operation>
      <operation>
         <name>routingEngineV2Action</name>
         <documentation>Perform an action on the Subscription Engine: Start, Stop, Suspend, Resume,.....</documentation>
         <in>WSRoutingEngineV2Action</in>
         <out>WSRoutingEngineV2Status</out>
      </operation>
      <operation>
         <name>getUniverse</name>
         <documentation>Retrieve an Universe</documentation>
         <in>WSGetUniverse</in>
         <out>WSUniverse</out>
      </operation>
      <operation>
         <name>existsUniverse</name>
         <documentation>Checks the existence of an Universe and return it if it exists</documentation>
         <in>WSExistsUniverse</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>getUniversePKs</name>
         <documentation>Retrieve a list of Universes using a regular expression on thier names</documentation>
         <in>WSGetUniversePKs</in>
         <out>WSUniversePKArray</out>
      </operation>
      <operation>
         <name>putUniverse</name>
         <documentation>Create/Overwrite an existing Universe</documentation>
         <in>WSPutUniverse</in>
         <out>WSUniversePK</out>
      </operation>
      <operation>
         <name>deleteUniverse</name>
         <documentation>Delete and existing Universe</documentation>
         <in>WSDeleteUniverse</in>
         <out>WSUniversePK</out>
      </operation>
      <operation>
         <name>getObjectsForUniverses</name>
         <documentation>Retrieve the list of MDM Objects that can be subjected to Universes</documentation>
         <in>WSGetObjectsForUniverses</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>getCurrentUniverse</name>
         <documentation>Retrieve the current Universe for the user making call this web service</documentation>
         <in>WSGetCurrentUniverse</in>
         <out>WSUniverse</out>
      </operation>
      <operation>
         <name>getSynchronizationPlan</name>
         <documentation>Retrieve a Synchronization Plan</documentation>
         <in>WSGetSynchronizationPlan</in>
         <out>WSSynchronizationPlan</out>
      </operation>
      <operation>
         <name>existsSynchronizationPlan</name>
         <documentation>Check the existence of a Synchronization Plan and return it if it exists</documentation>
         <in>WSExistsSynchronizationPlan</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>getSynchronizationPlanPKs</name>
         <documentation>Retrieve a list if Synchronization Plans using a regular expression on their names</documentation>
         <in>WSGetSynchronizationPlanPKs</in>
         <out>WSSynchronizationPlanPKArray</out>
      </operation>
      <operation>
         <name>putSynchronizationPlan</name>
         <documentation>Create/Overwrite a Synchronization Plan</documentation>
         <in>WSPutSynchronizationPlan</in>
         <out>WSSynchronizationPlanPK</out>
      </operation>
      <operation>
         <name>deleteSynchronizationPlan</name>
         <documentation>Delete a Synchronization Plan</documentation>
         <in>WSDeleteSynchronizationPlan</in>
         <out>WSSynchronizationPlanPK</out>
      </operation>
      <operation>
         <name>getObjectsForSynchronizationPlans</name>
         <documentation>Retrieve the list of object that can be subjected to a Synchronization Plan</documentation>
         <in>WSGetObjectsForSynchronizationPlans</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>getSynchronizationPlanObjectsAlgorithms</name>
         <documentation>Retrieve the available list of conflict resolution algorithms for MDM Objects</documentation>
         <in>WSGetSynchronizationPlanObjectsAlgorithms</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>getSynchronizationPlanItemsAlgorithms</name>
         <documentation>Retrieve the availbale list of conflict resolution algorithms for Items</documentation>
         <in>WSGetSynchronizationPlanItemsAlgorithms</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>synchronizationPlanAction</name>
         <documentation>Perform an action of a Synchronization Plan, start a synchronization</documentation>
         <in>WSSynchronizationPlanAction</in>
         <out>WSSynchronizationPlanStatus</out>
      </operation>
      <operation>
         <name>synchronizationGetUnsynchronizedObjectsIDs</name>
         <documentation>Retrieve the lists of MDM Objects IDs which are not zynchronized</documentation>
         <in>WSSynchronizationGetUnsynchronizedObjectsIDs</in>
         <out>WSStringArray</out>
      </operation>
      <operation>
         <name>synchronizationGetObjectXML</name>
         <documentation>Retrieve the raw XML content of an MDM Object</documentation>
         <in>WSSynchronizationGetObjectXML</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>synchronizationPutObjectXML</name>
         <documentation>Create/Overwrite an MDM Object by storing its raw XML</documentation>
         <in>WSSynchronizationPutObjectXML</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>synchronizationGetUnsynchronizedItemPKs</name>
         <documentation>Retrieve the list of Items which are not Synchronized</documentation>
         <in>WSSynchronizationGetUnsynchronizedItemPKs</in>
         <out>WSItemPKArray</out>
      </operation>
      <operation>
         <name>synchronizationGetItemXML</name>
         <documentation>Retrieve the raw XLM of an Item</documentation>
         <in>WSSynchronizationGetItemXML</in>
         <out>WSString</out>
      </operation>
      <operation>
         <name>synchronizationPutItemXML</name>
         <documentation>Create/Overwrite and Item by pushing its raw XML</documentation>
         <in>WSSynchronizationPutItemXML</in>
         <out>WSItemPK</out>
      </operation>
      <operation>
         <name>getSynchronizationItem</name>
         <documentation>Retreive a Synchronization Conflict</documentation>
         <in>WSGetSynchronizationItem</in>
         <out>WSSynchronizationItem</out>
      </operation>
      <operation>
         <name>existsSynchronizationItem</name>
         <documentation>Check the existence of a Synchronization Conflict and return it if it exists</documentation>
         <in>WSExistsSynchronizationItem</in>
         <out>WSBoolean</out>
      </operation>
      <operation>
         <name>getSynchronizationItemPKs</name>
         <documentation>Retrieve a list of Synchronization Conflicts using a regular expression on their IDs</documentation>
         <in>WSGetSynchronizationItemPKs</in>
         <out>WSSynchronizationItemPKArray</out>
      </operation>
      <operation>
         <name>putSynchronizationItem</name>
         <documentation>Create/Overwrite a Synchronization Conflict</documentation>
         <in>WSPutSynchronizationItem</in>
         <out>WSSynchronizationItemPK</out>
      </operation>
      <operation>
         <name>deleteSynchronizationItem</name>
         <documentation>Delete a Synchronization Conflict</documentation>
         <in>WSDeleteSynchronizationItem</in>
         <out>WSSynchronizationItemPK</out>
      </operation>
      <operation>
         <name>resolveSynchronizationItem</name>
         <documentation>Resolve a Synchronization Conflict (by indicating the final content)</documentation>
         <in>WSResolveSynchronizationItem</in>
         <out>WSSynchronizationItem</out>
      </operation>
      <operation>
         <name>recoverDroppedItem</name>
         <documentation>???</documentation>
         <in>WSRecoverDroppedItem</in>
         <out>WSItemPK</out>
      </operation>
      <operation>
         <name>findAllDroppedItemsPKs</name>
         <documentation>???</documentation>
         <in>WSFindAllDroppedItemsPKs</in>
         <out>WSDroppedItemPKArray</out>
      </operation>
      <operation>
         <name>loadDroppedItem</name>
         <documentation>???</documentation>
         <in>WSLoadDroppedItem</in>
         <out>WSDroppedItem</out>
      </operation>
      <operation>
         <name>removeDroppedItem</name>
         <documentation>???</documentation>
         <in>WSRemoveDroppedItem</in>
         <out>WSDroppedItemPK</out>
      </operation>
   </operations>
   <types>
      <type>
         <name>WSStringArray</name>
         <documentation>
				An array of string
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSByteArray</name>
         <documentation>
				An array of bytes
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSInt</name>
         <documentation>
				A return message containing a single Integer
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSI18nString</name>
         <documentation>
				An internationalized/localized String
				-language: the ISO lanaguage code
				-label: the localized label value
			</documentation>
         <subtypes>
            <subtype>WSLanguage</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBoolean</name>
         <documentation>
				A return message containing a single boolean (true/false)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSKey</name>
         <documentation>
				The description of an XSD style key
				The full xPath of a key field is found using the path 'selectorpath/fieldpath' within the element
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLinkedHashMap</name>
         <documentation>
				A generic implementation of a linked hash map
			</documentation>
         <subtypes>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContent</name>
         <documentation>
				A return message containing and array of bytes or an URL pointing to data and the content-type of the data
				url: an url pointing to data (e.g. http://www.mysite.com/data/MyData or file://var/data/myData)
				wsBytes: an array of bytes. url should be nil or non present when used.
				contentType: the content type (e.g. 'application/pdf' or 'text/xml; charset=utf-8')
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContentMap</name>
         <documentation>
				An implementation of an HashMap of TypedCOntent - see WSTypedContent
				key: the key of the typed content in the hashmap
				wsBytes: an array of bytes. url should be nil or non present when used.
				typedCOntent: the WSTypedContent
			</documentation>
         <subtypes>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptRevisionMap</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetComponentVersion</name>
         <documentation>
				A message to retrieve the version of a component
				component: the type of component -see WSComponent
				id: the id of the component; its JNDI name for services and connectors
			</documentation>
         <subtypes>
            <subtype>WSComponent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersion</name>
         <documentation>
				A return message containing the version of the component - see WSGetComponentVersion
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPing</name>
         <documentation>
				A message to ping an MDM server and see if it is up and running
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLogout</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSInitData</name>
         <documentation>
				DEPRECATED
				A message to automatically initialize the MDM server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDocumentPK</name>
         <documentation>
				DEPRECATED
				The primary key of a document - kept for calls compatibility; always null in calls
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModel</name>
         <documentation>
				A Data Model core object.
				name: the unique name of the data model
				description: the description of the data model
				xsdSchema: the XSD schema for this data model
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelPK</name>
         <documentation>
				The Primary key of a Data Model: its name
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelArray</name>
         <documentation>
				An array of Data Models - see WSDataModel
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataModelPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConcept</name>
         <documentation>
				The description of a concept within a Data Model
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessTemplate</name>
         <documentation>
				The description of a generic type for a concept of sub-element in a model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</documentation>
         <subtypes>
            <subtype>WSTemplateType</subtype>
            <subtype>WSBusinessSimpleTemplate</subtype>
            <subtype>WSBusinessComplexTemplate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessSimpleTemplate</name>
         <documentation>
				The desription of a simple generic type within a data model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSBusinessComplexTemplate</name>
         <documentation>
				The description of a complex type within a data model
			</documentation>
         <subtypes>
            <subtype>WSBusinessElement</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessElement</name>
         <documentation>
				A "sub-element" in a Complex Template
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDataModel</name>
         <documentation>
				A message to create or overwrite a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataModel</name>
         <documentation>
				A message to retrieve a data model.
				A SOAP Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataModel</name>
         <documentation>
				A message to retrieve a data model.
				No Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteDataModel</name>
         <documentation>
				A message to delete a Data Model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataModelPKs</name>
         <documentation>
				A message to retrieve  a list of data model Primary Keys (their name) using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSCheckSchema</name>
         <documentation>
				A message to check if a an XSD is a valid data model schema
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutBusinessConcept</name>
         <documentation>
				A message to create/overwrite a concept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
            <subtype>WSBusinessConcept</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutBusinessConceptSchema</name>
         <documentation>
				A message to create/overwrite a generic type in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteBusinessConcept</name>
         <documentation>
				A message to delete an existing cncept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConcepts</name>
         <documentation>
				A message to retrieve the list of all concepts in a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptKey</name>
         <documentation>
				A message to retrieve the XSD Key structure (see WSConceptKey) of a concept in data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptKey</name>
         <documentation>
				The XSD key structure of a concept in a data model (see WSGetBusinessConceptKey)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataCluster</name>
         <documentation>
				A data cluster.
				name: the unique name (primary key) of the data cluster
				description: an optional description of the data cluster
				vocabulary: a list of all the words of 3 letters of more composing the vocabulary of items stored in the data cluster; the list is collected during insertions and is used by the spell checker.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterPK</name>
         <documentation>
				The primary key of a data cluster (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterArray</name>
         <documentation>
				An array of data cluster instances
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataClusterPKArray</name>
         <documentation>
				An array of data cluster primary keys
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDBDataCluster</name>
         <documentation>
				?
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutDataCluster</name>
         <documentation>
				A message to create/overwrite a data-cluster
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will return null if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDBDataCluster</name>
         <documentation>
				A message to retrieve a DB (?) data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDeleteDataCluster</name>
         <documentation>
				A message to delete a data cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataClusterPKs</name>
         <documentation>
				A message list Data Custer Priary Keys (their name) using a regular expression on their names.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetConceptsInDataCluster</name>
         <documentation>
				A message to retrieve the list of concepts actually stored in a Data Cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereCondition</name>
         <documentation>
				The object used to write where conditions in queries.
				leftPath: the condition left xPath to test
				operator: the test operator; see WSWhereOperator
				rightValueOrPath: the condition right xPath or value to test against the left path
				stringPredicate: the condition predicate that further specifies the test for the CONTAINS operator
				spellCheck: whether to run a spell check on the right hand value.
			</documentation>
         <subtypes>
            <subtype>WSWhereOperator</subtype>
            <subtype>WSStringPredicate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereAnd</name>
         <documentation>
				Links multiple conditions using an AND
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereOr</name>
         <documentation>
				Links multiple conditions using an OR
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereItem</name>
         <documentation>
				The "SuperClass" of an And or Or or WhereCondition which is passed to queries.
				To use, specify either a whereCondition, or a whereAnd or a whereOr.
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
            <subtype>WSWhereAnd</subtype>
            <subtype>WSWhereOr</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSView</name>
         <documentation>
				A filter on items that specify the xPaths to extract, the conditions that the items must meet and the xPaths that can be searched when the user imposes additional search conditions.
				name: the name of the view
				description: the description of the view
				viewableBusinessElements: the visible xPaths (starting with the concept name) of the items found in the view
				whereConditions: the conditions that all the items must meet
				searchableBusinessElements: the xPaths (starting with the concept name) of the elements that can be seached to further refine the result
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewPK</name>
         <documentation>
				The primary key of a view (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSViewPKArray</name>
         <documentation>
				An array of view primary keys
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewArray</name>
         <documentation>
				An array of views
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutView</name>
         <documentation>
				A message to create/update a view. see WSView
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetView</name>
         <documentation>
				A message to retrieve a viwe
				Throws a SOAP exception if the view dooes not exist
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsView</name>
         <documentation>
				A message to test if a viw exists.
				Returns the view if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteView</name>
         <documentation>
				A message to delete an existing view
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexViews</name>
         <documentation>
				A message to retrieve a list of views using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetViewPKs</name>
         <documentation>
				A essage to retrieve a list of view primary keys using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSItem</name>
         <documentation>
				An item.
				wsDataClusterPK: the primary key of the cluster where the item is stored
				dataModelName: the name of the data model used to validate the item
				dataModelRevision: the revision of the data model used to validate the item
				conceptName: the concept of the item
				ids: a list of values making the primary key of the item
				insertionTime: the time in millis at whch the item was last stored (e.g. created or overwritten)
				content: an xml string of the item content
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPK</name>
         <documentation>
				An item Primary Key
				wsDataClusterPK: the primary key of the data cluster where the item is stored
				conceptName: the name of the concept
				ids: a list of values unique for that concept in that cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKArray</name>
         <documentation>
				An array of items primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConceptPK</name>
         <documentation>
				The unique key of a concept
				Used in conjunction with WSGetBusinessConceptValue
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetItem</name>
         <documentation>
				A message to retrieve an item using its primary key
				Throw an exception if not found.
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsItem</name>
         <documentation>
				A message to tests if an item exists.
				Returns the item if found, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItems</name>
         <documentation>
				A message to retieve a list of items using conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemPKsByCriteria</name>
         <documentation>
				A message to retieve a list of items using keywords, storing dates and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				contentKeywords: a list of words, separated by spaces, that must be found in the content of the items
				keysKeywords: a list of words, separated by spaces, that must be found in the primary key of the items
				fromDate: the lower date in millis at which the items were last stored
				fromDate: the upper date in millis at which the items wer last stored
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKsByCriteriaResponse</name>
         <documentation>
				The return message of WSGetItemPKsByCriteria containing the storing dates and primary keys of the matching items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptValue</name>
         <documentation>
				A message to retrieve the value of a concept base on the data cluster and key
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSBusinessConceptPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetFullPathValues</name>
         <documentation>
				A message to retieve all the values for an item xPath matching certain conditions
				wsDataClusterPK: the data cluster
				fullPath; the xPath to seach starting with the concept name
				whereItem: the conditions
				spellThreshold: the spell check to perform. -1 to deactivate
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewSearch</name>
         <documentation>
				A message to retrieve items through a view using conditions and paging
				wsdataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSXPathsSearch</name>
         <documentation>
				A message to retrieve elements of items using xPaths and optionally conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				pivotPath: the pivot xPath against which all the xPaths in viewablePaths are factored. If nil, the first viewablePath is used. The xPath must be full, strating with the concept name.
				viewablePaths: the list of xPaths for which data is retrieved. These paths are refactored against the pivot xPath. The xPaths must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemsPivotIndex</name>
         <documentation>
				Get items hierarchical tree according to pivots
			</documentation>
         <subtypes>
            <subtype>WSLinkedHashMap</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSCount</name>
         <documentation>
				A message to count the number of values at an xPath on items matching optional conditions.
				wsDataClusterPK: the primary key of the cluster where the items are stored
				countPath: the xPath valus which are counted. The xPath must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSQuickSearch</name>
         <documentation>
				A message to retrieve items through a view using keywords and paging and paging
				wsDataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				searchValue: the keywords searched in the item content sparated by spaces.
				matchAllWords: if set to true, the items must math all words in searchValue
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItem</name>
         <documentation>
				A message to create/overwrite an item
				wsDataClusterPK: the primary key of the cluster where the item is stored
				xmlString: the XML content of the item
				wsDataModelPK: the primary key of the data model used to validate the item.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSUpdateReportItemPOJO</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSUpdateReportItemArray</name>
         <documentation>
				???
			</documentation>
         <subtypes>
            <subtype>WSUpdateReportItemPOJO</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItemWithReport</name>
         <documentation>
				Puts an item in the xml storage with update report
			</documentation>
         <subtypes>
            <subtype>WSPutItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItem</name>
         <documentation>
				A message to delete an item using its primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItems</name>
         <documentation>
				A message to delete a list of items of a specified concept and optionally matching certain conditions
				wsDataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDropItem</name>
         <documentation>
				Drop an item to items trash
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRunQuery</name>
         <documentation>
				A message to directly run an xQuery on the XML DB.
				dataClusterPK: the primary key of the data cluster. The primary key can be nil to run cross-cluster queries
				revisionID: the revision ID of the DataCluster: nil, for the HEAD.
				query: the xQuery
				parameters: a list of parmaters that will replace the {n} in the query, where n is the nth parameter.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBase64KeyValue</name>
         <documentation>
				An object used to pass data to a connector in a connector interaction - see WSConnectorInteraction
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSConnectorInteraction</name>
         <documentation>
				A message to interact with a connector
				JNDIName: the JNDI name of the connector
				function: one of the enumerated interactions - see WSConnectorFunction
				parameters: parameters to pass to the connector - see WSBase64KeyValue
			</documentation>
         <subtypes>
            <subtype>WSConnectorFunction</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConnectorInteractionResponse</name>
         <documentation>
				The response to an interaction with a connector - see WSConnectorInteraction
			</documentation>
         <subtypes>
            <subtype>WSConnectorResponseCode</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRuleExpression</name>
         <documentation>
				A conditional expression in a routing rule
				name: the name of the condition
				xPath: the xPath applied to the item for the left hand value
				operator: one of the possible operators - see WSRoutingRuleOperator
				value: the right hand value
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleOperator</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRule</name>
         <documentation>
				A routing rule
				name: the unique name of the rule
				description: an optional description
				synchronous: whether the rule is executed synchronously or asynchronously by the routing engine
				concept: the item concept to match. A '*' matches any concept
				serviceJNDI: the JNDI entry of the service to call when the routing rule matches
				parameters: the parmaters to be passed to the service
				wsRoutingRuleExpressions: conditional consitions that item must meet for the rule to match
				deactive: true to deactivate the rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleExpression</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePK</name>
         <documentation>
				The primary key of a routing rule (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRoutingRuleArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePKArray</name>
         <documentation>
				A list of routing rules
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutRoutingRule</name>
         <documentation>
				A message to create/overwrite a routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRule</name>
         <documentation>
				A message to retrieve a routing rule.
				Throws an Exception if the rule is not found.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRoutingRule</name>
         <documentation>
				A message to check the existence of a routing rule.
				Returns the rule if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRoutingRule</name>
         <documentation>
				A messaage to delete an existing routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRulePKs</name>
         <documentation>
				A message to list the primary keys of routing rules which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServicesList</name>
         <documentation>
				A list of JNDI names belonging to services
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetServicesList</name>
         <documentation>
				A message to return the list of JNDI names of available Services in a WSServicesList
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceAction</name>
         <documentation>
				A message to perform an action on a service
				jndiName: the JNDI name of the service
				wsAction: the action to take on the service - see WSServiceActionCode
				methodName: the service method name to call (a public EJB method)
				methodParameters: a list of parameters to pass to the method
			</documentation>
         <subtypes>
            <subtype>WSServiceActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSServicePutConfiguration</name>
         <documentation>
				A message to store a configuration of a service on the server
				jndiName: the JNDI name of the service
				configuration: the configuration of the service to store on the server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetConfiguration</name>
         <documentation>
				A message to retrieve the configuration of a service
				jndiName: the JNDI name of the service
				otionalParameter: an optional parameter to pass on the call
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetDocument</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedure</name>
         <documentation>
				A stored procedure
				name: the unique name of the procedure
				description: the optional description of the procedure
				procedure: the xQuery
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePK</name>
         <documentation>
				The primary key of a stored procedure (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRegexStoredProcedure</name>
         <documentation>
				A message to retrieve stored procedures which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePKArray</name>
         <documentation>
				A list of stored procedures primary keys
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedure</name>
         <documentation>
				A message to retrieve a stored procedure.
				An exception will be thrown if the stored procedure does not exist.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsStoredProcedure</name>
         <documentation>
				A message to check that a stored procedure exists.
				Will return the stored procedure if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutStoredProcedure</name>
         <documentation>
				A message to create/overwrite a stored procedure
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedure</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteStoredProcedure</name>
         <documentation>
				A message to delete a stored procedure.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteStoredProcedure</name>
         <documentation>
				A message to execute a stored procedure.
				wsStoredProcedurePK: the primary key of the procedure to execute
				revisionID: the revisionID of the procedure
				wsDataClusterPK: the cluster where the procedure will be executed. If nil, the procedure will use the root of the DB as context.
				parameters: parameters passed to the stored procedure that will replace the {n} where n is the nth parameter
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedurePKs</name>
         <documentation>
				A message to retrieved stored procedure primary keys which names match a particular regex
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenu</name>
         <documentation>
				A menu.
				name: the unique name of the menu
				description: the description of the menu
				menuEntries: a list of entries tha make up the menu - see WSMenuEntry
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuEntry</name>
         <documentation>
				An entry in a menu (a menu item).
				id: the unique id of the entry
				descriptions: a list of localized string made of their label and respective two letter code language
				context:  the context of the webapp that should be launched when clicking on the entry
				application: the name of the application within the context that should be launched when clicking on the entry
				subMenu: a list of nested menu entries that make up the sub menus
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuPK</name>
         <documentation>
				The primary key of a menu (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenuPKArray</name>
         <documentation>
				A list of menu primary keys
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenu</name>
         <documentation>
				A message to retrieve an existing menu.
				Throws a SOAP Exception if the menu is not found
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsMenu</name>
         <documentation>
				A message to check that a menu exists
				Returns the menu if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutMenu</name>
         <documentation>
				A message to create/overwrite a menu
			</documentation>
         <subtypes>
            <subtype>WSMenu</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteMenu</name>
         <documentation>
				A message to delete an existing menu
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenuPKs</name>
         <documentation>
				A message to retrieve a list of menu primary keys which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDroppedItem</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPK</name>
         <documentation/>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSFindAllDroppedItemsPKs</name>
         <documentation>
				Find all dropped items in items trash
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLoadDroppedItem</name>
         <documentation>
				Load a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRecoverDroppedItem</name>
         <documentation>
				Recover a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRemoveDroppedItem</name>
         <documentation>
				Remove a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTransformerContext</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerV2PK</subtype>
            <subtype>WSTypedContent</subtype>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTransformerVariablesMapping</name>
         <documentation/>
         <subtypes>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTransformerProcessStep</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerVariablesMapping</subtype>
            <subtype>WSTransformerVariablesMapping</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTransformerV2</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerProcessStep</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTransformerV2PK</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSTransformerV2PKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerV2PK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetTransformerV2</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerV2PK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsTransformerV2</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerV2PK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutTransformerV2</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerV2</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteTransformerV2</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerV2PK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetTransformerV2PKs</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSExecuteTransformerV2</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerContext</subtype>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteTransformerV2AsJob</name>
         <documentation>
				Starts the execution of a transformer as a background job and return the PK of a Background Job
				The result must be obtained by reading the content of the BackgroundJob
			</documentation>
         <subtypes>
            <subtype>WSTransformerContext</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExtractThroughTransformerV2</name>
         <documentation>
				Extracts data through a Transformer
				The item content is mapped to the _DEFAULT_ transformer variable
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
            <subtype>WSTransformerV2PK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsTransformerPluginV2</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSTransformerPluginV2PutConfiguration</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSTransformerPluginV2GetConfiguration</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSTransformerPluginV2VariableDescriptor</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSTransformerPluginV2Details</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerPluginV2VariableDescriptor</subtype>
            <subtype>WSTransformerPluginV2VariableDescriptor</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetTransformerPluginV2Details</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSTransformerPluginV2sList</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetTransformerPluginV2sList</name>
         <documentation>
				Returns the list of available Transformer Plugins in a WSTransformerPluginV2sList 
				that provides their JNDI Name and Description in the requested language
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStringArray</name>
         <documentation>
				An array of string
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSByteArray</name>
         <documentation>
				An array of bytes
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSInt</name>
         <documentation>
				A return message containing a single Integer
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSI18nString</name>
         <documentation>
				An internationalized/localized String
				-language: the ISO lanaguage code
				-label: the localized label value
			</documentation>
         <subtypes>
            <subtype>WSLanguage</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBoolean</name>
         <documentation>
				A return message containing a single boolean (true/false)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSKey</name>
         <documentation>
				The description of an XSD style key
				The full xPath of a key field is found using the path 'selectorpath/fieldpath' within the element
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLinkedHashMap</name>
         <documentation>
				A generic implementation of a linked hash map
			</documentation>
         <subtypes>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContent</name>
         <documentation>
				A return message containing and array of bytes or an URL pointing to data and the content-type of the data
				url: an url pointing to data (e.g. http://www.mysite.com/data/MyData or file://var/data/myData)
				wsBytes: an array of bytes. url should be nil or non present when used.
				contentType: the content type (e.g. 'application/pdf' or 'text/xml; charset=utf-8')
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContentMap</name>
         <documentation>
				An implementation of an HashMap of TypedCOntent - see WSTypedContent
				key: the key of the typed content in the hashmap
				wsBytes: an array of bytes. url should be nil or non present when used.
				typedCOntent: the WSTypedContent
			</documentation>
         <subtypes>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptRevisionMap</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetComponentVersion</name>
         <documentation>
				A message to retrieve the version of a component
				component: the type of component -see WSComponent
				id: the id of the component; its JNDI name for services and connectors
			</documentation>
         <subtypes>
            <subtype>WSComponent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersion</name>
         <documentation>
				A return message containing the version of the component - see WSGetComponentVersion
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPing</name>
         <documentation>
				A message to ping an MDM server and see if it is up and running
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLogout</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSInitData</name>
         <documentation>
				DEPRECATED
				A message to automatically initialize the MDM server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDocumentPK</name>
         <documentation>
				DEPRECATED
				The primary key of a document - kept for calls compatibility; always null in calls
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModel</name>
         <documentation>
				A Data Model core object.
				name: the unique name of the data model
				description: the description of the data model
				xsdSchema: the XSD schema for this data model
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelPK</name>
         <documentation>
				The Primary key of a Data Model: its name
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelArray</name>
         <documentation>
				An array of Data Models - see WSDataModel
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataModelPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConcept</name>
         <documentation>
				The description of a concept within a Data Model
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessTemplate</name>
         <documentation>
				The description of a generic type for a concept of sub-element in a model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</documentation>
         <subtypes>
            <subtype>WSTemplateType</subtype>
            <subtype>WSBusinessSimpleTemplate</subtype>
            <subtype>WSBusinessComplexTemplate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessSimpleTemplate</name>
         <documentation>
				The desription of a simple generic type within a data model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSBusinessComplexTemplate</name>
         <documentation>
				The description of a complex type within a data model
			</documentation>
         <subtypes>
            <subtype>WSBusinessElement</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessElement</name>
         <documentation>
				A "sub-element" in a Complex Template
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDataModel</name>
         <documentation>
				A message to create or overwrite a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataModel</name>
         <documentation>
				A message to retrieve a data model.
				A SOAP Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataModel</name>
         <documentation>
				A message to retrieve a data model.
				No Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteDataModel</name>
         <documentation>
				A message to delete a Data Model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataModelPKs</name>
         <documentation>
				A message to retrieve  a list of data model Primary Keys (their name) using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSCheckSchema</name>
         <documentation>
				A message to check if a an XSD is a valid data model schema
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutBusinessConcept</name>
         <documentation>
				A message to create/overwrite a concept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
            <subtype>WSBusinessConcept</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutBusinessConceptSchema</name>
         <documentation>
				A message to create/overwrite a generic type in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteBusinessConcept</name>
         <documentation>
				A message to delete an existing cncept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConcepts</name>
         <documentation>
				A message to retrieve the list of all concepts in a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptKey</name>
         <documentation>
				A message to retrieve the XSD Key structure (see WSConceptKey) of a concept in data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptKey</name>
         <documentation>
				The XSD key structure of a concept in a data model (see WSGetBusinessConceptKey)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataCluster</name>
         <documentation>
				A data cluster.
				name: the unique name (primary key) of the data cluster
				description: an optional description of the data cluster
				vocabulary: a list of all the words of 3 letters of more composing the vocabulary of items stored in the data cluster; the list is collected during insertions and is used by the spell checker.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterPK</name>
         <documentation>
				The primary key of a data cluster (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterArray</name>
         <documentation>
				An array of data cluster instances
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataClusterPKArray</name>
         <documentation>
				An array of data cluster primary keys
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDBDataCluster</name>
         <documentation>
				?
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutDataCluster</name>
         <documentation>
				A message to create/overwrite a data-cluster
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will return null if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDBDataCluster</name>
         <documentation>
				A message to retrieve a DB (?) data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDeleteDataCluster</name>
         <documentation>
				A message to delete a data cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataClusterPKs</name>
         <documentation>
				A message list Data Custer Priary Keys (their name) using a regular expression on their names.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetConceptsInDataCluster</name>
         <documentation>
				A message to retrieve the list of concepts actually stored in a Data Cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereCondition</name>
         <documentation>
				The object used to write where conditions in queries.
				leftPath: the condition left xPath to test
				operator: the test operator; see WSWhereOperator
				rightValueOrPath: the condition right xPath or value to test against the left path
				stringPredicate: the condition predicate that further specifies the test for the CONTAINS operator
				spellCheck: whether to run a spell check on the right hand value.
			</documentation>
         <subtypes>
            <subtype>WSWhereOperator</subtype>
            <subtype>WSStringPredicate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereAnd</name>
         <documentation>
				Links multiple conditions using an AND
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereOr</name>
         <documentation>
				Links multiple conditions using an OR
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereItem</name>
         <documentation>
				The "SuperClass" of an And or Or or WhereCondition which is passed to queries.
				To use, specify either a whereCondition, or a whereAnd or a whereOr.
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
            <subtype>WSWhereAnd</subtype>
            <subtype>WSWhereOr</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSView</name>
         <documentation>
				A filter on items that specify the xPaths to extract, the conditions that the items must meet and the xPaths that can be searched when the user imposes additional search conditions.
				name: the name of the view
				description: the description of the view
				viewableBusinessElements: the visible xPaths (starting with the concept name) of the items found in the view
				whereConditions: the conditions that all the items must meet
				searchableBusinessElements: the xPaths (starting with the concept name) of the elements that can be seached to further refine the result
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewPK</name>
         <documentation>
				The primary key of a view (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSViewPKArray</name>
         <documentation>
				An array of view primary keys
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewArray</name>
         <documentation>
				An array of views
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutView</name>
         <documentation>
				A message to create/update a view. see WSView
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetView</name>
         <documentation>
				A message to retrieve a viwe
				Throws a SOAP exception if the view dooes not exist
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsView</name>
         <documentation>
				A message to test if a viw exists.
				Returns the view if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteView</name>
         <documentation>
				A message to delete an existing view
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexViews</name>
         <documentation>
				A message to retrieve a list of views using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetViewPKs</name>
         <documentation>
				A essage to retrieve a list of view primary keys using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSItem</name>
         <documentation>
				An item.
				wsDataClusterPK: the primary key of the cluster where the item is stored
				dataModelName: the name of the data model used to validate the item
				dataModelRevision: the revision of the data model used to validate the item
				conceptName: the concept of the item
				ids: a list of values making the primary key of the item
				insertionTime: the time in millis at whch the item was last stored (e.g. created or overwritten)
				content: an xml string of the item content
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPK</name>
         <documentation>
				An item Primary Key
				wsDataClusterPK: the primary key of the data cluster where the item is stored
				conceptName: the name of the concept
				ids: a list of values unique for that concept in that cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKArray</name>
         <documentation>
				An array of items primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConceptPK</name>
         <documentation>
				The unique key of a concept
				Used in conjunction with WSGetBusinessConceptValue
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetItem</name>
         <documentation>
				A message to retrieve an item using its primary key
				Throw an exception if not found.
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsItem</name>
         <documentation>
				A message to tests if an item exists.
				Returns the item if found, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItems</name>
         <documentation>
				A message to retieve a list of items using conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemPKsByCriteria</name>
         <documentation>
				A message to retieve a list of items using keywords, storing dates and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				contentKeywords: a list of words, separated by spaces, that must be found in the content of the items
				keysKeywords: a list of words, separated by spaces, that must be found in the primary key of the items
				fromDate: the lower date in millis at which the items were last stored
				fromDate: the upper date in millis at which the items wer last stored
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKsByCriteriaResponse</name>
         <documentation>
				The return message of WSGetItemPKsByCriteria containing the storing dates and primary keys of the matching items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptValue</name>
         <documentation>
				A message to retrieve the value of a concept base on the data cluster and key
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSBusinessConceptPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetFullPathValues</name>
         <documentation>
				A message to retieve all the values for an item xPath matching certain conditions
				wsDataClusterPK: the data cluster
				fullPath; the xPath to seach starting with the concept name
				whereItem: the conditions
				spellThreshold: the spell check to perform. -1 to deactivate
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewSearch</name>
         <documentation>
				A message to retrieve items through a view using conditions and paging
				wsdataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSXPathsSearch</name>
         <documentation>
				A message to retrieve elements of items using xPaths and optionally conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				pivotPath: the pivot xPath against which all the xPaths in viewablePaths are factored. If nil, the first viewablePath is used. The xPath must be full, strating with the concept name.
				viewablePaths: the list of xPaths for which data is retrieved. These paths are refactored against the pivot xPath. The xPaths must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemsPivotIndex</name>
         <documentation>
				Get items hierarchical tree according to pivots
			</documentation>
         <subtypes>
            <subtype>WSLinkedHashMap</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSCount</name>
         <documentation>
				A message to count the number of values at an xPath on items matching optional conditions.
				wsDataClusterPK: the primary key of the cluster where the items are stored
				countPath: the xPath valus which are counted. The xPath must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSQuickSearch</name>
         <documentation>
				A message to retrieve items through a view using keywords and paging and paging
				wsDataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				searchValue: the keywords searched in the item content sparated by spaces.
				matchAllWords: if set to true, the items must math all words in searchValue
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItem</name>
         <documentation>
				A message to create/overwrite an item
				wsDataClusterPK: the primary key of the cluster where the item is stored
				xmlString: the XML content of the item
				wsDataModelPK: the primary key of the data model used to validate the item.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSUpdateReportItemPOJO</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSUpdateReportItemArray</name>
         <documentation>
				???
			</documentation>
         <subtypes>
            <subtype>WSUpdateReportItemPOJO</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItemWithReport</name>
         <documentation>
				Puts an item in the xml storage with update report
			</documentation>
         <subtypes>
            <subtype>WSPutItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItem</name>
         <documentation>
				A message to delete an item using its primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItems</name>
         <documentation>
				A message to delete a list of items of a specified concept and optionally matching certain conditions
				wsDataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDropItem</name>
         <documentation>
				Drop an item to items trash
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRunQuery</name>
         <documentation>
				A message to directly run an xQuery on the XML DB.
				dataClusterPK: the primary key of the data cluster. The primary key can be nil to run cross-cluster queries
				revisionID: the revision ID of the DataCluster: nil, for the HEAD.
				query: the xQuery
				parameters: a list of parmaters that will replace the {n} in the query, where n is the nth parameter.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBase64KeyValue</name>
         <documentation>
				An object used to pass data to a connector in a connector interaction - see WSConnectorInteraction
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSConnectorInteraction</name>
         <documentation>
				A message to interact with a connector
				JNDIName: the JNDI name of the connector
				function: one of the enumerated interactions - see WSConnectorFunction
				parameters: parameters to pass to the connector - see WSBase64KeyValue
			</documentation>
         <subtypes>
            <subtype>WSConnectorFunction</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConnectorInteractionResponse</name>
         <documentation>
				The response to an interaction with a connector - see WSConnectorInteraction
			</documentation>
         <subtypes>
            <subtype>WSConnectorResponseCode</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRuleExpression</name>
         <documentation>
				A conditional expression in a routing rule
				name: the name of the condition
				xPath: the xPath applied to the item for the left hand value
				operator: one of the possible operators - see WSRoutingRuleOperator
				value: the right hand value
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleOperator</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRule</name>
         <documentation>
				A routing rule
				name: the unique name of the rule
				description: an optional description
				synchronous: whether the rule is executed synchronously or asynchronously by the routing engine
				concept: the item concept to match. A '*' matches any concept
				serviceJNDI: the JNDI entry of the service to call when the routing rule matches
				parameters: the parmaters to be passed to the service
				wsRoutingRuleExpressions: conditional consitions that item must meet for the rule to match
				deactive: true to deactivate the rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleExpression</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePK</name>
         <documentation>
				The primary key of a routing rule (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRoutingRuleArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePKArray</name>
         <documentation>
				A list of routing rules
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutRoutingRule</name>
         <documentation>
				A message to create/overwrite a routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRule</name>
         <documentation>
				A message to retrieve a routing rule.
				Throws an Exception if the rule is not found.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRoutingRule</name>
         <documentation>
				A message to check the existence of a routing rule.
				Returns the rule if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRoutingRule</name>
         <documentation>
				A messaage to delete an existing routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRulePKs</name>
         <documentation>
				A message to list the primary keys of routing rules which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServicesList</name>
         <documentation>
				A list of JNDI names belonging to services
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetServicesList</name>
         <documentation>
				A message to return the list of JNDI names of available Services in a WSServicesList
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceAction</name>
         <documentation>
				A message to perform an action on a service
				jndiName: the JNDI name of the service
				wsAction: the action to take on the service - see WSServiceActionCode
				methodName: the service method name to call (a public EJB method)
				methodParameters: a list of parameters to pass to the method
			</documentation>
         <subtypes>
            <subtype>WSServiceActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSServicePutConfiguration</name>
         <documentation>
				A message to store a configuration of a service on the server
				jndiName: the JNDI name of the service
				configuration: the configuration of the service to store on the server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetConfiguration</name>
         <documentation>
				A message to retrieve the configuration of a service
				jndiName: the JNDI name of the service
				otionalParameter: an optional parameter to pass on the call
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetDocument</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedure</name>
         <documentation>
				A stored procedure
				name: the unique name of the procedure
				description: the optional description of the procedure
				procedure: the xQuery
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePK</name>
         <documentation>
				The primary key of a stored procedure (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRegexStoredProcedure</name>
         <documentation>
				A message to retrieve stored procedures which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePKArray</name>
         <documentation>
				A list of stored procedures primary keys
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedure</name>
         <documentation>
				A message to retrieve a stored procedure.
				An exception will be thrown if the stored procedure does not exist.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsStoredProcedure</name>
         <documentation>
				A message to check that a stored procedure exists.
				Will return the stored procedure if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutStoredProcedure</name>
         <documentation>
				A message to create/overwrite a stored procedure
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedure</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteStoredProcedure</name>
         <documentation>
				A message to delete a stored procedure.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteStoredProcedure</name>
         <documentation>
				A message to execute a stored procedure.
				wsStoredProcedurePK: the primary key of the procedure to execute
				revisionID: the revisionID of the procedure
				wsDataClusterPK: the cluster where the procedure will be executed. If nil, the procedure will use the root of the DB as context.
				parameters: parameters passed to the stored procedure that will replace the {n} where n is the nth parameter
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedurePKs</name>
         <documentation>
				A message to retrieved stored procedure primary keys which names match a particular regex
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenu</name>
         <documentation>
				A menu.
				name: the unique name of the menu
				description: the description of the menu
				menuEntries: a list of entries tha make up the menu - see WSMenuEntry
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuEntry</name>
         <documentation>
				An entry in a menu (a menu item).
				id: the unique id of the entry
				descriptions: a list of localized string made of their label and respective two letter code language
				context:  the context of the webapp that should be launched when clicking on the entry
				application: the name of the application within the context that should be launched when clicking on the entry
				subMenu: a list of nested menu entries that make up the sub menus
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuPK</name>
         <documentation>
				The primary key of a menu (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenuPKArray</name>
         <documentation>
				A list of menu primary keys
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenu</name>
         <documentation>
				A message to retrieve an existing menu.
				Throws a SOAP Exception if the menu is not found
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsMenu</name>
         <documentation>
				A message to check that a menu exists
				Returns the menu if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutMenu</name>
         <documentation>
				A message to create/overwrite a menu
			</documentation>
         <subtypes>
            <subtype>WSMenu</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteMenu</name>
         <documentation>
				A message to delete an existing menu
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenuPKs</name>
         <documentation>
				A message to retrieve a list of menu primary keys which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDroppedItem</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPK</name>
         <documentation/>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSFindAllDroppedItemsPKs</name>
         <documentation>
				Find all dropped items in items trash
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLoadDroppedItem</name>
         <documentation>
				Load a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRecoverDroppedItem</name>
         <documentation>
				Recover a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRemoveDroppedItem</name>
         <documentation>
				Remove a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExtractedContent</name>
         <documentation>
				Content extracted using one of the ExtractUsingTransformer web service
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPipeline</name>
         <documentation>
				The pipeline after running a transformer
			</documentation>
         <subtypes>
            <subtype>WSExtractedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExtractUsingTransformer</name>
         <documentation>
				Extracts data using a Transformer
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
            <subtype>WSTransformerPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExtractUsingTransformerThruView</name>
         <documentation>
				Extract data using a Transformer and thru a View
				Data is returned in the pipeline in com.amalto.core.extract.xxx
				where xxx is sequential number starting from 1
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSTransformerPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTransformerPluginSpec</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSTransformer</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerPluginSpec</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTransformerPK</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSTransformerPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetTransformer</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsTransformer</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutTransformer</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformer</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteTransformer</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetTransformerPKs</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSProcessBytesUsingTransformer</name>
         <documentation>
				Process Bytes after transformation in a Transformer
				and using a DecisionTable for the ouput variables
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
            <subtype>WSTransformerPK</subtype>
            <subtype>WSOutputDecisionTable</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSProcessFileUsingTransformer</name>
         <documentation>
				Processes the content of a local (to the data manager)  file 
				after transformation in a Transformer
				and using a DecisionTable for the ouput variables
			</documentation>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
            <subtype>WSOutputDecisionTable</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSProcessBytesUsingTransformerAsBackgroundJob</name>
         <documentation>
				Process Bytes after transformation in a Transformer
				and using a DecisionTable for the ouput variables
				Uses a Background Job. Call getBackGroundJob to follow the Job Process
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
            <subtype>WSTransformerPK</subtype>
            <subtype>WSOutputDecisionTable</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSProcessFileUsingTransformerAsBackgroundJob</name>
         <documentation>
				Processes the content of a local (to the data manager)  file 
				after transformation in a Transformer
				and using a DecisionTable for the ouput variables
				Uses a Background Job. Call getBackGroundJob to follow the Job Process
			</documentation>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
            <subtype>WSOutputDecisionTable</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSOutputDecisionTable</name>
         <documentation>
				Used by the WSProcess...UsingTransformer
				The decision Tables specifies what happens to the ouptut variables
				NONE: the variables is present in the pipeline with its content
				DISCARD: the variable and its content is removed from the pipeline before the web service returns
				PROJECT(DataCluster,DataModel[,overwrite]): the content is projected to DataCluster after having been validated by DataModel. 
				"overwrite" specifies whether to overwrite an existing item and is true by default. 
				Possible values are true or false
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStringArray</name>
         <documentation>
				An array of string
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSByteArray</name>
         <documentation>
				An array of bytes
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSInt</name>
         <documentation>
				A return message containing a single Integer
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSI18nString</name>
         <documentation>
				An internationalized/localized String
				-language: the ISO lanaguage code
				-label: the localized label value
			</documentation>
         <subtypes>
            <subtype>WSLanguage</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBoolean</name>
         <documentation>
				A return message containing a single boolean (true/false)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSKey</name>
         <documentation>
				The description of an XSD style key
				The full xPath of a key field is found using the path 'selectorpath/fieldpath' within the element
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLinkedHashMap</name>
         <documentation>
				A generic implementation of a linked hash map
			</documentation>
         <subtypes>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContent</name>
         <documentation>
				A return message containing and array of bytes or an URL pointing to data and the content-type of the data
				url: an url pointing to data (e.g. http://www.mysite.com/data/MyData or file://var/data/myData)
				wsBytes: an array of bytes. url should be nil or non present when used.
				contentType: the content type (e.g. 'application/pdf' or 'text/xml; charset=utf-8')
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContentMap</name>
         <documentation>
				An implementation of an HashMap of TypedCOntent - see WSTypedContent
				key: the key of the typed content in the hashmap
				wsBytes: an array of bytes. url should be nil or non present when used.
				typedCOntent: the WSTypedContent
			</documentation>
         <subtypes>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptRevisionMap</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetComponentVersion</name>
         <documentation>
				A message to retrieve the version of a component
				component: the type of component -see WSComponent
				id: the id of the component; its JNDI name for services and connectors
			</documentation>
         <subtypes>
            <subtype>WSComponent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersion</name>
         <documentation>
				A return message containing the version of the component - see WSGetComponentVersion
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPing</name>
         <documentation>
				A message to ping an MDM server and see if it is up and running
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLogout</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSInitData</name>
         <documentation>
				DEPRECATED
				A message to automatically initialize the MDM server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDocumentPK</name>
         <documentation>
				DEPRECATED
				The primary key of a document - kept for calls compatibility; always null in calls
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModel</name>
         <documentation>
				A Data Model core object.
				name: the unique name of the data model
				description: the description of the data model
				xsdSchema: the XSD schema for this data model
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelPK</name>
         <documentation>
				The Primary key of a Data Model: its name
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelArray</name>
         <documentation>
				An array of Data Models - see WSDataModel
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataModelPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConcept</name>
         <documentation>
				The description of a concept within a Data Model
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessTemplate</name>
         <documentation>
				The description of a generic type for a concept of sub-element in a model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</documentation>
         <subtypes>
            <subtype>WSTemplateType</subtype>
            <subtype>WSBusinessSimpleTemplate</subtype>
            <subtype>WSBusinessComplexTemplate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessSimpleTemplate</name>
         <documentation>
				The desription of a simple generic type within a data model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSBusinessComplexTemplate</name>
         <documentation>
				The description of a complex type within a data model
			</documentation>
         <subtypes>
            <subtype>WSBusinessElement</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessElement</name>
         <documentation>
				A "sub-element" in a Complex Template
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDataModel</name>
         <documentation>
				A message to create or overwrite a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataModel</name>
         <documentation>
				A message to retrieve a data model.
				A SOAP Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataModel</name>
         <documentation>
				A message to retrieve a data model.
				No Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteDataModel</name>
         <documentation>
				A message to delete a Data Model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataModelPKs</name>
         <documentation>
				A message to retrieve  a list of data model Primary Keys (their name) using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSCheckSchema</name>
         <documentation>
				A message to check if a an XSD is a valid data model schema
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutBusinessConcept</name>
         <documentation>
				A message to create/overwrite a concept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
            <subtype>WSBusinessConcept</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutBusinessConceptSchema</name>
         <documentation>
				A message to create/overwrite a generic type in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteBusinessConcept</name>
         <documentation>
				A message to delete an existing cncept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConcepts</name>
         <documentation>
				A message to retrieve the list of all concepts in a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptKey</name>
         <documentation>
				A message to retrieve the XSD Key structure (see WSConceptKey) of a concept in data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptKey</name>
         <documentation>
				The XSD key structure of a concept in a data model (see WSGetBusinessConceptKey)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataCluster</name>
         <documentation>
				A data cluster.
				name: the unique name (primary key) of the data cluster
				description: an optional description of the data cluster
				vocabulary: a list of all the words of 3 letters of more composing the vocabulary of items stored in the data cluster; the list is collected during insertions and is used by the spell checker.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterPK</name>
         <documentation>
				The primary key of a data cluster (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterArray</name>
         <documentation>
				An array of data cluster instances
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataClusterPKArray</name>
         <documentation>
				An array of data cluster primary keys
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDBDataCluster</name>
         <documentation>
				?
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutDataCluster</name>
         <documentation>
				A message to create/overwrite a data-cluster
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will return null if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDBDataCluster</name>
         <documentation>
				A message to retrieve a DB (?) data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDeleteDataCluster</name>
         <documentation>
				A message to delete a data cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataClusterPKs</name>
         <documentation>
				A message list Data Custer Priary Keys (their name) using a regular expression on their names.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetConceptsInDataCluster</name>
         <documentation>
				A message to retrieve the list of concepts actually stored in a Data Cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereCondition</name>
         <documentation>
				The object used to write where conditions in queries.
				leftPath: the condition left xPath to test
				operator: the test operator; see WSWhereOperator
				rightValueOrPath: the condition right xPath or value to test against the left path
				stringPredicate: the condition predicate that further specifies the test for the CONTAINS operator
				spellCheck: whether to run a spell check on the right hand value.
			</documentation>
         <subtypes>
            <subtype>WSWhereOperator</subtype>
            <subtype>WSStringPredicate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereAnd</name>
         <documentation>
				Links multiple conditions using an AND
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereOr</name>
         <documentation>
				Links multiple conditions using an OR
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereItem</name>
         <documentation>
				The "SuperClass" of an And or Or or WhereCondition which is passed to queries.
				To use, specify either a whereCondition, or a whereAnd or a whereOr.
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
            <subtype>WSWhereAnd</subtype>
            <subtype>WSWhereOr</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSView</name>
         <documentation>
				A filter on items that specify the xPaths to extract, the conditions that the items must meet and the xPaths that can be searched when the user imposes additional search conditions.
				name: the name of the view
				description: the description of the view
				viewableBusinessElements: the visible xPaths (starting with the concept name) of the items found in the view
				whereConditions: the conditions that all the items must meet
				searchableBusinessElements: the xPaths (starting with the concept name) of the elements that can be seached to further refine the result
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewPK</name>
         <documentation>
				The primary key of a view (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSViewPKArray</name>
         <documentation>
				An array of view primary keys
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewArray</name>
         <documentation>
				An array of views
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutView</name>
         <documentation>
				A message to create/update a view. see WSView
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetView</name>
         <documentation>
				A message to retrieve a viwe
				Throws a SOAP exception if the view dooes not exist
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsView</name>
         <documentation>
				A message to test if a viw exists.
				Returns the view if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteView</name>
         <documentation>
				A message to delete an existing view
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexViews</name>
         <documentation>
				A message to retrieve a list of views using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetViewPKs</name>
         <documentation>
				A essage to retrieve a list of view primary keys using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSItem</name>
         <documentation>
				An item.
				wsDataClusterPK: the primary key of the cluster where the item is stored
				dataModelName: the name of the data model used to validate the item
				dataModelRevision: the revision of the data model used to validate the item
				conceptName: the concept of the item
				ids: a list of values making the primary key of the item
				insertionTime: the time in millis at whch the item was last stored (e.g. created or overwritten)
				content: an xml string of the item content
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPK</name>
         <documentation>
				An item Primary Key
				wsDataClusterPK: the primary key of the data cluster where the item is stored
				conceptName: the name of the concept
				ids: a list of values unique for that concept in that cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKArray</name>
         <documentation>
				An array of items primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConceptPK</name>
         <documentation>
				The unique key of a concept
				Used in conjunction with WSGetBusinessConceptValue
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetItem</name>
         <documentation>
				A message to retrieve an item using its primary key
				Throw an exception if not found.
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsItem</name>
         <documentation>
				A message to tests if an item exists.
				Returns the item if found, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItems</name>
         <documentation>
				A message to retieve a list of items using conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemPKsByCriteria</name>
         <documentation>
				A message to retieve a list of items using keywords, storing dates and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				contentKeywords: a list of words, separated by spaces, that must be found in the content of the items
				keysKeywords: a list of words, separated by spaces, that must be found in the primary key of the items
				fromDate: the lower date in millis at which the items were last stored
				fromDate: the upper date in millis at which the items wer last stored
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKsByCriteriaResponse</name>
         <documentation>
				The return message of WSGetItemPKsByCriteria containing the storing dates and primary keys of the matching items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptValue</name>
         <documentation>
				A message to retrieve the value of a concept base on the data cluster and key
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSBusinessConceptPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetFullPathValues</name>
         <documentation>
				A message to retieve all the values for an item xPath matching certain conditions
				wsDataClusterPK: the data cluster
				fullPath; the xPath to seach starting with the concept name
				whereItem: the conditions
				spellThreshold: the spell check to perform. -1 to deactivate
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewSearch</name>
         <documentation>
				A message to retrieve items through a view using conditions and paging
				wsdataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSXPathsSearch</name>
         <documentation>
				A message to retrieve elements of items using xPaths and optionally conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				pivotPath: the pivot xPath against which all the xPaths in viewablePaths are factored. If nil, the first viewablePath is used. The xPath must be full, strating with the concept name.
				viewablePaths: the list of xPaths for which data is retrieved. These paths are refactored against the pivot xPath. The xPaths must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemsPivotIndex</name>
         <documentation>
				Get items hierarchical tree according to pivots
			</documentation>
         <subtypes>
            <subtype>WSLinkedHashMap</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSCount</name>
         <documentation>
				A message to count the number of values at an xPath on items matching optional conditions.
				wsDataClusterPK: the primary key of the cluster where the items are stored
				countPath: the xPath valus which are counted. The xPath must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSQuickSearch</name>
         <documentation>
				A message to retrieve items through a view using keywords and paging and paging
				wsDataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				searchValue: the keywords searched in the item content sparated by spaces.
				matchAllWords: if set to true, the items must math all words in searchValue
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItem</name>
         <documentation>
				A message to create/overwrite an item
				wsDataClusterPK: the primary key of the cluster where the item is stored
				xmlString: the XML content of the item
				wsDataModelPK: the primary key of the data model used to validate the item.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSUpdateReportItemPOJO</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSUpdateReportItemArray</name>
         <documentation>
				???
			</documentation>
         <subtypes>
            <subtype>WSUpdateReportItemPOJO</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItemWithReport</name>
         <documentation>
				Puts an item in the xml storage with update report
			</documentation>
         <subtypes>
            <subtype>WSPutItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItem</name>
         <documentation>
				A message to delete an item using its primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItems</name>
         <documentation>
				A message to delete a list of items of a specified concept and optionally matching certain conditions
				wsDataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDropItem</name>
         <documentation>
				Drop an item to items trash
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRunQuery</name>
         <documentation>
				A message to directly run an xQuery on the XML DB.
				dataClusterPK: the primary key of the data cluster. The primary key can be nil to run cross-cluster queries
				revisionID: the revision ID of the DataCluster: nil, for the HEAD.
				query: the xQuery
				parameters: a list of parmaters that will replace the {n} in the query, where n is the nth parameter.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBase64KeyValue</name>
         <documentation>
				An object used to pass data to a connector in a connector interaction - see WSConnectorInteraction
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSConnectorInteraction</name>
         <documentation>
				A message to interact with a connector
				JNDIName: the JNDI name of the connector
				function: one of the enumerated interactions - see WSConnectorFunction
				parameters: parameters to pass to the connector - see WSBase64KeyValue
			</documentation>
         <subtypes>
            <subtype>WSConnectorFunction</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConnectorInteractionResponse</name>
         <documentation>
				The response to an interaction with a connector - see WSConnectorInteraction
			</documentation>
         <subtypes>
            <subtype>WSConnectorResponseCode</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRuleExpression</name>
         <documentation>
				A conditional expression in a routing rule
				name: the name of the condition
				xPath: the xPath applied to the item for the left hand value
				operator: one of the possible operators - see WSRoutingRuleOperator
				value: the right hand value
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleOperator</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRule</name>
         <documentation>
				A routing rule
				name: the unique name of the rule
				description: an optional description
				synchronous: whether the rule is executed synchronously or asynchronously by the routing engine
				concept: the item concept to match. A '*' matches any concept
				serviceJNDI: the JNDI entry of the service to call when the routing rule matches
				parameters: the parmaters to be passed to the service
				wsRoutingRuleExpressions: conditional consitions that item must meet for the rule to match
				deactive: true to deactivate the rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleExpression</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePK</name>
         <documentation>
				The primary key of a routing rule (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRoutingRuleArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePKArray</name>
         <documentation>
				A list of routing rules
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutRoutingRule</name>
         <documentation>
				A message to create/overwrite a routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRule</name>
         <documentation>
				A message to retrieve a routing rule.
				Throws an Exception if the rule is not found.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRoutingRule</name>
         <documentation>
				A message to check the existence of a routing rule.
				Returns the rule if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRoutingRule</name>
         <documentation>
				A messaage to delete an existing routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRulePKs</name>
         <documentation>
				A message to list the primary keys of routing rules which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServicesList</name>
         <documentation>
				A list of JNDI names belonging to services
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetServicesList</name>
         <documentation>
				A message to return the list of JNDI names of available Services in a WSServicesList
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceAction</name>
         <documentation>
				A message to perform an action on a service
				jndiName: the JNDI name of the service
				wsAction: the action to take on the service - see WSServiceActionCode
				methodName: the service method name to call (a public EJB method)
				methodParameters: a list of parameters to pass to the method
			</documentation>
         <subtypes>
            <subtype>WSServiceActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSServicePutConfiguration</name>
         <documentation>
				A message to store a configuration of a service on the server
				jndiName: the JNDI name of the service
				configuration: the configuration of the service to store on the server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetConfiguration</name>
         <documentation>
				A message to retrieve the configuration of a service
				jndiName: the JNDI name of the service
				otionalParameter: an optional parameter to pass on the call
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetDocument</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedure</name>
         <documentation>
				A stored procedure
				name: the unique name of the procedure
				description: the optional description of the procedure
				procedure: the xQuery
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePK</name>
         <documentation>
				The primary key of a stored procedure (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRegexStoredProcedure</name>
         <documentation>
				A message to retrieve stored procedures which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePKArray</name>
         <documentation>
				A list of stored procedures primary keys
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedure</name>
         <documentation>
				A message to retrieve a stored procedure.
				An exception will be thrown if the stored procedure does not exist.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsStoredProcedure</name>
         <documentation>
				A message to check that a stored procedure exists.
				Will return the stored procedure if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutStoredProcedure</name>
         <documentation>
				A message to create/overwrite a stored procedure
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedure</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteStoredProcedure</name>
         <documentation>
				A message to delete a stored procedure.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteStoredProcedure</name>
         <documentation>
				A message to execute a stored procedure.
				wsStoredProcedurePK: the primary key of the procedure to execute
				revisionID: the revisionID of the procedure
				wsDataClusterPK: the cluster where the procedure will be executed. If nil, the procedure will use the root of the DB as context.
				parameters: parameters passed to the stored procedure that will replace the {n} where n is the nth parameter
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedurePKs</name>
         <documentation>
				A message to retrieved stored procedure primary keys which names match a particular regex
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenu</name>
         <documentation>
				A menu.
				name: the unique name of the menu
				description: the description of the menu
				menuEntries: a list of entries tha make up the menu - see WSMenuEntry
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuEntry</name>
         <documentation>
				An entry in a menu (a menu item).
				id: the unique id of the entry
				descriptions: a list of localized string made of their label and respective two letter code language
				context:  the context of the webapp that should be launched when clicking on the entry
				application: the name of the application within the context that should be launched when clicking on the entry
				subMenu: a list of nested menu entries that make up the sub menus
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuPK</name>
         <documentation>
				The primary key of a menu (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenuPKArray</name>
         <documentation>
				A list of menu primary keys
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenu</name>
         <documentation>
				A message to retrieve an existing menu.
				Throws a SOAP Exception if the menu is not found
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsMenu</name>
         <documentation>
				A message to check that a menu exists
				Returns the menu if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutMenu</name>
         <documentation>
				A message to create/overwrite a menu
			</documentation>
         <subtypes>
            <subtype>WSMenu</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteMenu</name>
         <documentation>
				A message to delete an existing menu
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenuPKs</name>
         <documentation>
				A message to retrieve a list of menu primary keys which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDroppedItem</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPK</name>
         <documentation/>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSFindAllDroppedItemsPKs</name>
         <documentation>
				Find all dropped items in items trash
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLoadDroppedItem</name>
         <documentation>
				Load a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRecoverDroppedItem</name>
         <documentation>
				Recover a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRemoveDroppedItem</name>
         <documentation>
				Remove a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBackgroundJob</name>
         <documentation>
				Background Jobs are created and updated by asynchronous methods ending up with 'AsJob'. Use getBackgroundJob to read the progress of the job and read the status.
				id: the id of the Job
				description: the description of the Job
				status: the status of the Job
				message: a human readable message on the progress of the Job
				percentage: the progression percentage if available
				timestamp: the walue in milles of the last modification of the Job
				pipeline: an optional resulting pipeline after the excecution of a Transformer
			</documentation>
         <subtypes>
            <subtype>BackgroundJobStatusType</subtype>
            <subtype>WSPipeline</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBackgroundJobPKArray</name>
         <documentation>
				A list od Background Jobs Primary Keys
			</documentation>
         <subtypes>
            <subtype>WSBackgroundJobPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBackgroundJobPK</name>
         <documentation>
				A Background Job Primary Key
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutBackgroundJob</name>
         <documentation>
				A message to create/overwrite a Background Job
			</documentation>
         <subtypes>
            <subtype>WSBackgroundJob</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBackgroundJob</name>
         <documentation>
				A message to retrieve a Background Job
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSFindBackgroundJobPKs</name>
         <documentation>
				A message to retrieve Background Jobs based on their status
			</documentation>
         <subtypes>
            <subtype>BackgroundJobStatusType</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSStringArray</name>
         <documentation>
				An array of string
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSByteArray</name>
         <documentation>
				An array of bytes
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSInt</name>
         <documentation>
				A return message containing a single Integer
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSI18nString</name>
         <documentation>
				An internationalized/localized String
				-language: the ISO lanaguage code
				-label: the localized label value
			</documentation>
         <subtypes>
            <subtype>WSLanguage</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBoolean</name>
         <documentation>
				A return message containing a single boolean (true/false)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSKey</name>
         <documentation>
				The description of an XSD style key
				The full xPath of a key field is found using the path 'selectorpath/fieldpath' within the element
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLinkedHashMap</name>
         <documentation>
				A generic implementation of a linked hash map
			</documentation>
         <subtypes>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContent</name>
         <documentation>
				A return message containing and array of bytes or an URL pointing to data and the content-type of the data
				url: an url pointing to data (e.g. http://www.mysite.com/data/MyData or file://var/data/myData)
				wsBytes: an array of bytes. url should be nil or non present when used.
				contentType: the content type (e.g. 'application/pdf' or 'text/xml; charset=utf-8')
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContentMap</name>
         <documentation>
				An implementation of an HashMap of TypedCOntent - see WSTypedContent
				key: the key of the typed content in the hashmap
				wsBytes: an array of bytes. url should be nil or non present when used.
				typedCOntent: the WSTypedContent
			</documentation>
         <subtypes>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptRevisionMap</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetComponentVersion</name>
         <documentation>
				A message to retrieve the version of a component
				component: the type of component -see WSComponent
				id: the id of the component; its JNDI name for services and connectors
			</documentation>
         <subtypes>
            <subtype>WSComponent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersion</name>
         <documentation>
				A return message containing the version of the component - see WSGetComponentVersion
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPing</name>
         <documentation>
				A message to ping an MDM server and see if it is up and running
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLogout</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSInitData</name>
         <documentation>
				DEPRECATED
				A message to automatically initialize the MDM server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDocumentPK</name>
         <documentation>
				DEPRECATED
				The primary key of a document - kept for calls compatibility; always null in calls
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModel</name>
         <documentation>
				A Data Model core object.
				name: the unique name of the data model
				description: the description of the data model
				xsdSchema: the XSD schema for this data model
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelPK</name>
         <documentation>
				The Primary key of a Data Model: its name
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelArray</name>
         <documentation>
				An array of Data Models - see WSDataModel
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataModelPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConcept</name>
         <documentation>
				The description of a concept within a Data Model
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessTemplate</name>
         <documentation>
				The description of a generic type for a concept of sub-element in a model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</documentation>
         <subtypes>
            <subtype>WSTemplateType</subtype>
            <subtype>WSBusinessSimpleTemplate</subtype>
            <subtype>WSBusinessComplexTemplate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessSimpleTemplate</name>
         <documentation>
				The desription of a simple generic type within a data model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSBusinessComplexTemplate</name>
         <documentation>
				The description of a complex type within a data model
			</documentation>
         <subtypes>
            <subtype>WSBusinessElement</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessElement</name>
         <documentation>
				A "sub-element" in a Complex Template
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDataModel</name>
         <documentation>
				A message to create or overwrite a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataModel</name>
         <documentation>
				A message to retrieve a data model.
				A SOAP Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataModel</name>
         <documentation>
				A message to retrieve a data model.
				No Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteDataModel</name>
         <documentation>
				A message to delete a Data Model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataModelPKs</name>
         <documentation>
				A message to retrieve  a list of data model Primary Keys (their name) using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSCheckSchema</name>
         <documentation>
				A message to check if a an XSD is a valid data model schema
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutBusinessConcept</name>
         <documentation>
				A message to create/overwrite a concept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
            <subtype>WSBusinessConcept</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutBusinessConceptSchema</name>
         <documentation>
				A message to create/overwrite a generic type in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteBusinessConcept</name>
         <documentation>
				A message to delete an existing cncept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConcepts</name>
         <documentation>
				A message to retrieve the list of all concepts in a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptKey</name>
         <documentation>
				A message to retrieve the XSD Key structure (see WSConceptKey) of a concept in data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptKey</name>
         <documentation>
				The XSD key structure of a concept in a data model (see WSGetBusinessConceptKey)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataCluster</name>
         <documentation>
				A data cluster.
				name: the unique name (primary key) of the data cluster
				description: an optional description of the data cluster
				vocabulary: a list of all the words of 3 letters of more composing the vocabulary of items stored in the data cluster; the list is collected during insertions and is used by the spell checker.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterPK</name>
         <documentation>
				The primary key of a data cluster (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterArray</name>
         <documentation>
				An array of data cluster instances
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataClusterPKArray</name>
         <documentation>
				An array of data cluster primary keys
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDBDataCluster</name>
         <documentation>
				?
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutDataCluster</name>
         <documentation>
				A message to create/overwrite a data-cluster
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will return null if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDBDataCluster</name>
         <documentation>
				A message to retrieve a DB (?) data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDeleteDataCluster</name>
         <documentation>
				A message to delete a data cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataClusterPKs</name>
         <documentation>
				A message list Data Custer Priary Keys (their name) using a regular expression on their names.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetConceptsInDataCluster</name>
         <documentation>
				A message to retrieve the list of concepts actually stored in a Data Cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereCondition</name>
         <documentation>
				The object used to write where conditions in queries.
				leftPath: the condition left xPath to test
				operator: the test operator; see WSWhereOperator
				rightValueOrPath: the condition right xPath or value to test against the left path
				stringPredicate: the condition predicate that further specifies the test for the CONTAINS operator
				spellCheck: whether to run a spell check on the right hand value.
			</documentation>
         <subtypes>
            <subtype>WSWhereOperator</subtype>
            <subtype>WSStringPredicate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereAnd</name>
         <documentation>
				Links multiple conditions using an AND
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereOr</name>
         <documentation>
				Links multiple conditions using an OR
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereItem</name>
         <documentation>
				The "SuperClass" of an And or Or or WhereCondition which is passed to queries.
				To use, specify either a whereCondition, or a whereAnd or a whereOr.
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
            <subtype>WSWhereAnd</subtype>
            <subtype>WSWhereOr</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSView</name>
         <documentation>
				A filter on items that specify the xPaths to extract, the conditions that the items must meet and the xPaths that can be searched when the user imposes additional search conditions.
				name: the name of the view
				description: the description of the view
				viewableBusinessElements: the visible xPaths (starting with the concept name) of the items found in the view
				whereConditions: the conditions that all the items must meet
				searchableBusinessElements: the xPaths (starting with the concept name) of the elements that can be seached to further refine the result
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewPK</name>
         <documentation>
				The primary key of a view (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSViewPKArray</name>
         <documentation>
				An array of view primary keys
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewArray</name>
         <documentation>
				An array of views
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutView</name>
         <documentation>
				A message to create/update a view. see WSView
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetView</name>
         <documentation>
				A message to retrieve a viwe
				Throws a SOAP exception if the view dooes not exist
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsView</name>
         <documentation>
				A message to test if a viw exists.
				Returns the view if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteView</name>
         <documentation>
				A message to delete an existing view
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexViews</name>
         <documentation>
				A message to retrieve a list of views using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetViewPKs</name>
         <documentation>
				A essage to retrieve a list of view primary keys using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSItem</name>
         <documentation>
				An item.
				wsDataClusterPK: the primary key of the cluster where the item is stored
				dataModelName: the name of the data model used to validate the item
				dataModelRevision: the revision of the data model used to validate the item
				conceptName: the concept of the item
				ids: a list of values making the primary key of the item
				insertionTime: the time in millis at whch the item was last stored (e.g. created or overwritten)
				content: an xml string of the item content
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPK</name>
         <documentation>
				An item Primary Key
				wsDataClusterPK: the primary key of the data cluster where the item is stored
				conceptName: the name of the concept
				ids: a list of values unique for that concept in that cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKArray</name>
         <documentation>
				An array of items primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConceptPK</name>
         <documentation>
				The unique key of a concept
				Used in conjunction with WSGetBusinessConceptValue
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetItem</name>
         <documentation>
				A message to retrieve an item using its primary key
				Throw an exception if not found.
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsItem</name>
         <documentation>
				A message to tests if an item exists.
				Returns the item if found, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItems</name>
         <documentation>
				A message to retieve a list of items using conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemPKsByCriteria</name>
         <documentation>
				A message to retieve a list of items using keywords, storing dates and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				contentKeywords: a list of words, separated by spaces, that must be found in the content of the items
				keysKeywords: a list of words, separated by spaces, that must be found in the primary key of the items
				fromDate: the lower date in millis at which the items were last stored
				fromDate: the upper date in millis at which the items wer last stored
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKsByCriteriaResponse</name>
         <documentation>
				The return message of WSGetItemPKsByCriteria containing the storing dates and primary keys of the matching items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptValue</name>
         <documentation>
				A message to retrieve the value of a concept base on the data cluster and key
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSBusinessConceptPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetFullPathValues</name>
         <documentation>
				A message to retieve all the values for an item xPath matching certain conditions
				wsDataClusterPK: the data cluster
				fullPath; the xPath to seach starting with the concept name
				whereItem: the conditions
				spellThreshold: the spell check to perform. -1 to deactivate
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewSearch</name>
         <documentation>
				A message to retrieve items through a view using conditions and paging
				wsdataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSXPathsSearch</name>
         <documentation>
				A message to retrieve elements of items using xPaths and optionally conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				pivotPath: the pivot xPath against which all the xPaths in viewablePaths are factored. If nil, the first viewablePath is used. The xPath must be full, strating with the concept name.
				viewablePaths: the list of xPaths for which data is retrieved. These paths are refactored against the pivot xPath. The xPaths must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemsPivotIndex</name>
         <documentation>
				Get items hierarchical tree according to pivots
			</documentation>
         <subtypes>
            <subtype>WSLinkedHashMap</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSCount</name>
         <documentation>
				A message to count the number of values at an xPath on items matching optional conditions.
				wsDataClusterPK: the primary key of the cluster where the items are stored
				countPath: the xPath valus which are counted. The xPath must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSQuickSearch</name>
         <documentation>
				A message to retrieve items through a view using keywords and paging and paging
				wsDataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				searchValue: the keywords searched in the item content sparated by spaces.
				matchAllWords: if set to true, the items must math all words in searchValue
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItem</name>
         <documentation>
				A message to create/overwrite an item
				wsDataClusterPK: the primary key of the cluster where the item is stored
				xmlString: the XML content of the item
				wsDataModelPK: the primary key of the data model used to validate the item.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSUpdateReportItemPOJO</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSUpdateReportItemArray</name>
         <documentation>
				???
			</documentation>
         <subtypes>
            <subtype>WSUpdateReportItemPOJO</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItemWithReport</name>
         <documentation>
				Puts an item in the xml storage with update report
			</documentation>
         <subtypes>
            <subtype>WSPutItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItem</name>
         <documentation>
				A message to delete an item using its primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItems</name>
         <documentation>
				A message to delete a list of items of a specified concept and optionally matching certain conditions
				wsDataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDropItem</name>
         <documentation>
				Drop an item to items trash
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRunQuery</name>
         <documentation>
				A message to directly run an xQuery on the XML DB.
				dataClusterPK: the primary key of the data cluster. The primary key can be nil to run cross-cluster queries
				revisionID: the revision ID of the DataCluster: nil, for the HEAD.
				query: the xQuery
				parameters: a list of parmaters that will replace the {n} in the query, where n is the nth parameter.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBase64KeyValue</name>
         <documentation>
				An object used to pass data to a connector in a connector interaction - see WSConnectorInteraction
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSConnectorInteraction</name>
         <documentation>
				A message to interact with a connector
				JNDIName: the JNDI name of the connector
				function: one of the enumerated interactions - see WSConnectorFunction
				parameters: parameters to pass to the connector - see WSBase64KeyValue
			</documentation>
         <subtypes>
            <subtype>WSConnectorFunction</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConnectorInteractionResponse</name>
         <documentation>
				The response to an interaction with a connector - see WSConnectorInteraction
			</documentation>
         <subtypes>
            <subtype>WSConnectorResponseCode</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRuleExpression</name>
         <documentation>
				A conditional expression in a routing rule
				name: the name of the condition
				xPath: the xPath applied to the item for the left hand value
				operator: one of the possible operators - see WSRoutingRuleOperator
				value: the right hand value
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleOperator</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRule</name>
         <documentation>
				A routing rule
				name: the unique name of the rule
				description: an optional description
				synchronous: whether the rule is executed synchronously or asynchronously by the routing engine
				concept: the item concept to match. A '*' matches any concept
				serviceJNDI: the JNDI entry of the service to call when the routing rule matches
				parameters: the parmaters to be passed to the service
				wsRoutingRuleExpressions: conditional consitions that item must meet for the rule to match
				deactive: true to deactivate the rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleExpression</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePK</name>
         <documentation>
				The primary key of a routing rule (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRoutingRuleArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePKArray</name>
         <documentation>
				A list of routing rules
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutRoutingRule</name>
         <documentation>
				A message to create/overwrite a routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRule</name>
         <documentation>
				A message to retrieve a routing rule.
				Throws an Exception if the rule is not found.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRoutingRule</name>
         <documentation>
				A message to check the existence of a routing rule.
				Returns the rule if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRoutingRule</name>
         <documentation>
				A messaage to delete an existing routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRulePKs</name>
         <documentation>
				A message to list the primary keys of routing rules which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServicesList</name>
         <documentation>
				A list of JNDI names belonging to services
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetServicesList</name>
         <documentation>
				A message to return the list of JNDI names of available Services in a WSServicesList
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceAction</name>
         <documentation>
				A message to perform an action on a service
				jndiName: the JNDI name of the service
				wsAction: the action to take on the service - see WSServiceActionCode
				methodName: the service method name to call (a public EJB method)
				methodParameters: a list of parameters to pass to the method
			</documentation>
         <subtypes>
            <subtype>WSServiceActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSServicePutConfiguration</name>
         <documentation>
				A message to store a configuration of a service on the server
				jndiName: the JNDI name of the service
				configuration: the configuration of the service to store on the server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetConfiguration</name>
         <documentation>
				A message to retrieve the configuration of a service
				jndiName: the JNDI name of the service
				otionalParameter: an optional parameter to pass on the call
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetDocument</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedure</name>
         <documentation>
				A stored procedure
				name: the unique name of the procedure
				description: the optional description of the procedure
				procedure: the xQuery
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePK</name>
         <documentation>
				The primary key of a stored procedure (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRegexStoredProcedure</name>
         <documentation>
				A message to retrieve stored procedures which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePKArray</name>
         <documentation>
				A list of stored procedures primary keys
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedure</name>
         <documentation>
				A message to retrieve a stored procedure.
				An exception will be thrown if the stored procedure does not exist.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsStoredProcedure</name>
         <documentation>
				A message to check that a stored procedure exists.
				Will return the stored procedure if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutStoredProcedure</name>
         <documentation>
				A message to create/overwrite a stored procedure
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedure</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteStoredProcedure</name>
         <documentation>
				A message to delete a stored procedure.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteStoredProcedure</name>
         <documentation>
				A message to execute a stored procedure.
				wsStoredProcedurePK: the primary key of the procedure to execute
				revisionID: the revisionID of the procedure
				wsDataClusterPK: the cluster where the procedure will be executed. If nil, the procedure will use the root of the DB as context.
				parameters: parameters passed to the stored procedure that will replace the {n} where n is the nth parameter
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedurePKs</name>
         <documentation>
				A message to retrieved stored procedure primary keys which names match a particular regex
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenu</name>
         <documentation>
				A menu.
				name: the unique name of the menu
				description: the description of the menu
				menuEntries: a list of entries tha make up the menu - see WSMenuEntry
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuEntry</name>
         <documentation>
				An entry in a menu (a menu item).
				id: the unique id of the entry
				descriptions: a list of localized string made of their label and respective two letter code language
				context:  the context of the webapp that should be launched when clicking on the entry
				application: the name of the application within the context that should be launched when clicking on the entry
				subMenu: a list of nested menu entries that make up the sub menus
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuPK</name>
         <documentation>
				The primary key of a menu (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenuPKArray</name>
         <documentation>
				A list of menu primary keys
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenu</name>
         <documentation>
				A message to retrieve an existing menu.
				Throws a SOAP Exception if the menu is not found
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsMenu</name>
         <documentation>
				A message to check that a menu exists
				Returns the menu if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutMenu</name>
         <documentation>
				A message to create/overwrite a menu
			</documentation>
         <subtypes>
            <subtype>WSMenu</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteMenu</name>
         <documentation>
				A message to delete an existing menu
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenuPKs</name>
         <documentation>
				A message to retrieve a list of menu primary keys which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDroppedItem</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPK</name>
         <documentation/>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSFindAllDroppedItemsPKs</name>
         <documentation>
				Find all dropped items in items trash
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLoadDroppedItem</name>
         <documentation>
				Load a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRecoverDroppedItem</name>
         <documentation>
				Recover a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRemoveDroppedItem</name>
         <documentation>
				Remove a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExtractedContent</name>
         <documentation>
				Content extracted using one of the ExtractUsingTransformer web service
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPipeline</name>
         <documentation>
				The pipeline after running a transformer
			</documentation>
         <subtypes>
            <subtype>WSExtractedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExtractUsingTransformer</name>
         <documentation>
				Extracts data using a Transformer
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
            <subtype>WSTransformerPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExtractUsingTransformerThruView</name>
         <documentation>
				Extract data using a Transformer and thru a View
				Data is returned in the pipeline in com.amalto.core.extract.xxx
				where xxx is sequential number starting from 1
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSTransformerPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTransformerPluginSpec</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSTransformer</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerPluginSpec</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTransformerPK</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSTransformerPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetTransformer</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsTransformer</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutTransformer</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformer</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteTransformer</name>
         <documentation/>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetTransformerPKs</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSProcessBytesUsingTransformer</name>
         <documentation>
				Process Bytes after transformation in a Transformer
				and using a DecisionTable for the ouput variables
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
            <subtype>WSTransformerPK</subtype>
            <subtype>WSOutputDecisionTable</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSProcessFileUsingTransformer</name>
         <documentation>
				Processes the content of a local (to the data manager)  file 
				after transformation in a Transformer
				and using a DecisionTable for the ouput variables
			</documentation>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
            <subtype>WSOutputDecisionTable</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSProcessBytesUsingTransformerAsBackgroundJob</name>
         <documentation>
				Process Bytes after transformation in a Transformer
				and using a DecisionTable for the ouput variables
				Uses a Background Job. Call getBackGroundJob to follow the Job Process
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
            <subtype>WSTransformerPK</subtype>
            <subtype>WSOutputDecisionTable</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSProcessFileUsingTransformerAsBackgroundJob</name>
         <documentation>
				Processes the content of a local (to the data manager)  file 
				after transformation in a Transformer
				and using a DecisionTable for the ouput variables
				Uses a Background Job. Call getBackGroundJob to follow the Job Process
			</documentation>
         <subtypes>
            <subtype>WSTransformerPK</subtype>
            <subtype>WSOutputDecisionTable</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSOutputDecisionTable</name>
         <documentation>
				Used by the WSProcess...UsingTransformer
				The decision Tables specifies what happens to the ouptut variables
				NONE: the variables is present in the pipeline with its content
				DISCARD: the variable and its content is removed from the pipeline before the web service returns
				PROJECT(DataCluster,DataModel[,overwrite]): the content is projected to DataCluster after having been validated by DataModel. 
				"overwrite" specifies whether to overwrite an existing item and is true by default. 
				Possible values are true or false
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStringArray</name>
         <documentation>
				An array of string
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSByteArray</name>
         <documentation>
				An array of bytes
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSInt</name>
         <documentation>
				A return message containing a single Integer
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSI18nString</name>
         <documentation>
				An internationalized/localized String
				-language: the ISO lanaguage code
				-label: the localized label value
			</documentation>
         <subtypes>
            <subtype>WSLanguage</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBoolean</name>
         <documentation>
				A return message containing a single boolean (true/false)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSKey</name>
         <documentation>
				The description of an XSD style key
				The full xPath of a key field is found using the path 'selectorpath/fieldpath' within the element
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLinkedHashMap</name>
         <documentation>
				A generic implementation of a linked hash map
			</documentation>
         <subtypes>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContent</name>
         <documentation>
				A return message containing and array of bytes or an URL pointing to data and the content-type of the data
				url: an url pointing to data (e.g. http://www.mysite.com/data/MyData or file://var/data/myData)
				wsBytes: an array of bytes. url should be nil or non present when used.
				contentType: the content type (e.g. 'application/pdf' or 'text/xml; charset=utf-8')
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContentMap</name>
         <documentation>
				An implementation of an HashMap of TypedCOntent - see WSTypedContent
				key: the key of the typed content in the hashmap
				wsBytes: an array of bytes. url should be nil or non present when used.
				typedCOntent: the WSTypedContent
			</documentation>
         <subtypes>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptRevisionMap</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetComponentVersion</name>
         <documentation>
				A message to retrieve the version of a component
				component: the type of component -see WSComponent
				id: the id of the component; its JNDI name for services and connectors
			</documentation>
         <subtypes>
            <subtype>WSComponent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersion</name>
         <documentation>
				A return message containing the version of the component - see WSGetComponentVersion
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPing</name>
         <documentation>
				A message to ping an MDM server and see if it is up and running
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLogout</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSInitData</name>
         <documentation>
				DEPRECATED
				A message to automatically initialize the MDM server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDocumentPK</name>
         <documentation>
				DEPRECATED
				The primary key of a document - kept for calls compatibility; always null in calls
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModel</name>
         <documentation>
				A Data Model core object.
				name: the unique name of the data model
				description: the description of the data model
				xsdSchema: the XSD schema for this data model
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelPK</name>
         <documentation>
				The Primary key of a Data Model: its name
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelArray</name>
         <documentation>
				An array of Data Models - see WSDataModel
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataModelPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConcept</name>
         <documentation>
				The description of a concept within a Data Model
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessTemplate</name>
         <documentation>
				The description of a generic type for a concept of sub-element in a model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</documentation>
         <subtypes>
            <subtype>WSTemplateType</subtype>
            <subtype>WSBusinessSimpleTemplate</subtype>
            <subtype>WSBusinessComplexTemplate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessSimpleTemplate</name>
         <documentation>
				The desription of a simple generic type within a data model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSBusinessComplexTemplate</name>
         <documentation>
				The description of a complex type within a data model
			</documentation>
         <subtypes>
            <subtype>WSBusinessElement</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessElement</name>
         <documentation>
				A "sub-element" in a Complex Template
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDataModel</name>
         <documentation>
				A message to create or overwrite a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataModel</name>
         <documentation>
				A message to retrieve a data model.
				A SOAP Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataModel</name>
         <documentation>
				A message to retrieve a data model.
				No Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteDataModel</name>
         <documentation>
				A message to delete a Data Model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataModelPKs</name>
         <documentation>
				A message to retrieve  a list of data model Primary Keys (their name) using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSCheckSchema</name>
         <documentation>
				A message to check if a an XSD is a valid data model schema
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutBusinessConcept</name>
         <documentation>
				A message to create/overwrite a concept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
            <subtype>WSBusinessConcept</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutBusinessConceptSchema</name>
         <documentation>
				A message to create/overwrite a generic type in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteBusinessConcept</name>
         <documentation>
				A message to delete an existing cncept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConcepts</name>
         <documentation>
				A message to retrieve the list of all concepts in a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptKey</name>
         <documentation>
				A message to retrieve the XSD Key structure (see WSConceptKey) of a concept in data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptKey</name>
         <documentation>
				The XSD key structure of a concept in a data model (see WSGetBusinessConceptKey)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataCluster</name>
         <documentation>
				A data cluster.
				name: the unique name (primary key) of the data cluster
				description: an optional description of the data cluster
				vocabulary: a list of all the words of 3 letters of more composing the vocabulary of items stored in the data cluster; the list is collected during insertions and is used by the spell checker.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterPK</name>
         <documentation>
				The primary key of a data cluster (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterArray</name>
         <documentation>
				An array of data cluster instances
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataClusterPKArray</name>
         <documentation>
				An array of data cluster primary keys
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDBDataCluster</name>
         <documentation>
				?
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutDataCluster</name>
         <documentation>
				A message to create/overwrite a data-cluster
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will return null if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDBDataCluster</name>
         <documentation>
				A message to retrieve a DB (?) data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDeleteDataCluster</name>
         <documentation>
				A message to delete a data cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataClusterPKs</name>
         <documentation>
				A message list Data Custer Priary Keys (their name) using a regular expression on their names.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetConceptsInDataCluster</name>
         <documentation>
				A message to retrieve the list of concepts actually stored in a Data Cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereCondition</name>
         <documentation>
				The object used to write where conditions in queries.
				leftPath: the condition left xPath to test
				operator: the test operator; see WSWhereOperator
				rightValueOrPath: the condition right xPath or value to test against the left path
				stringPredicate: the condition predicate that further specifies the test for the CONTAINS operator
				spellCheck: whether to run a spell check on the right hand value.
			</documentation>
         <subtypes>
            <subtype>WSWhereOperator</subtype>
            <subtype>WSStringPredicate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereAnd</name>
         <documentation>
				Links multiple conditions using an AND
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereOr</name>
         <documentation>
				Links multiple conditions using an OR
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereItem</name>
         <documentation>
				The "SuperClass" of an And or Or or WhereCondition which is passed to queries.
				To use, specify either a whereCondition, or a whereAnd or a whereOr.
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
            <subtype>WSWhereAnd</subtype>
            <subtype>WSWhereOr</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSView</name>
         <documentation>
				A filter on items that specify the xPaths to extract, the conditions that the items must meet and the xPaths that can be searched when the user imposes additional search conditions.
				name: the name of the view
				description: the description of the view
				viewableBusinessElements: the visible xPaths (starting with the concept name) of the items found in the view
				whereConditions: the conditions that all the items must meet
				searchableBusinessElements: the xPaths (starting with the concept name) of the elements that can be seached to further refine the result
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewPK</name>
         <documentation>
				The primary key of a view (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSViewPKArray</name>
         <documentation>
				An array of view primary keys
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewArray</name>
         <documentation>
				An array of views
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutView</name>
         <documentation>
				A message to create/update a view. see WSView
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetView</name>
         <documentation>
				A message to retrieve a viwe
				Throws a SOAP exception if the view dooes not exist
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsView</name>
         <documentation>
				A message to test if a viw exists.
				Returns the view if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteView</name>
         <documentation>
				A message to delete an existing view
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexViews</name>
         <documentation>
				A message to retrieve a list of views using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetViewPKs</name>
         <documentation>
				A essage to retrieve a list of view primary keys using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSItem</name>
         <documentation>
				An item.
				wsDataClusterPK: the primary key of the cluster where the item is stored
				dataModelName: the name of the data model used to validate the item
				dataModelRevision: the revision of the data model used to validate the item
				conceptName: the concept of the item
				ids: a list of values making the primary key of the item
				insertionTime: the time in millis at whch the item was last stored (e.g. created or overwritten)
				content: an xml string of the item content
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPK</name>
         <documentation>
				An item Primary Key
				wsDataClusterPK: the primary key of the data cluster where the item is stored
				conceptName: the name of the concept
				ids: a list of values unique for that concept in that cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKArray</name>
         <documentation>
				An array of items primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConceptPK</name>
         <documentation>
				The unique key of a concept
				Used in conjunction with WSGetBusinessConceptValue
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetItem</name>
         <documentation>
				A message to retrieve an item using its primary key
				Throw an exception if not found.
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsItem</name>
         <documentation>
				A message to tests if an item exists.
				Returns the item if found, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItems</name>
         <documentation>
				A message to retieve a list of items using conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemPKsByCriteria</name>
         <documentation>
				A message to retieve a list of items using keywords, storing dates and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				contentKeywords: a list of words, separated by spaces, that must be found in the content of the items
				keysKeywords: a list of words, separated by spaces, that must be found in the primary key of the items
				fromDate: the lower date in millis at which the items were last stored
				fromDate: the upper date in millis at which the items wer last stored
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKsByCriteriaResponse</name>
         <documentation>
				The return message of WSGetItemPKsByCriteria containing the storing dates and primary keys of the matching items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptValue</name>
         <documentation>
				A message to retrieve the value of a concept base on the data cluster and key
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSBusinessConceptPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetFullPathValues</name>
         <documentation>
				A message to retieve all the values for an item xPath matching certain conditions
				wsDataClusterPK: the data cluster
				fullPath; the xPath to seach starting with the concept name
				whereItem: the conditions
				spellThreshold: the spell check to perform. -1 to deactivate
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewSearch</name>
         <documentation>
				A message to retrieve items through a view using conditions and paging
				wsdataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSXPathsSearch</name>
         <documentation>
				A message to retrieve elements of items using xPaths and optionally conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				pivotPath: the pivot xPath against which all the xPaths in viewablePaths are factored. If nil, the first viewablePath is used. The xPath must be full, strating with the concept name.
				viewablePaths: the list of xPaths for which data is retrieved. These paths are refactored against the pivot xPath. The xPaths must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemsPivotIndex</name>
         <documentation>
				Get items hierarchical tree according to pivots
			</documentation>
         <subtypes>
            <subtype>WSLinkedHashMap</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSCount</name>
         <documentation>
				A message to count the number of values at an xPath on items matching optional conditions.
				wsDataClusterPK: the primary key of the cluster where the items are stored
				countPath: the xPath valus which are counted. The xPath must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSQuickSearch</name>
         <documentation>
				A message to retrieve items through a view using keywords and paging and paging
				wsDataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				searchValue: the keywords searched in the item content sparated by spaces.
				matchAllWords: if set to true, the items must math all words in searchValue
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItem</name>
         <documentation>
				A message to create/overwrite an item
				wsDataClusterPK: the primary key of the cluster where the item is stored
				xmlString: the XML content of the item
				wsDataModelPK: the primary key of the data model used to validate the item.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSUpdateReportItemPOJO</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSUpdateReportItemArray</name>
         <documentation>
				???
			</documentation>
         <subtypes>
            <subtype>WSUpdateReportItemPOJO</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItemWithReport</name>
         <documentation>
				Puts an item in the xml storage with update report
			</documentation>
         <subtypes>
            <subtype>WSPutItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItem</name>
         <documentation>
				A message to delete an item using its primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItems</name>
         <documentation>
				A message to delete a list of items of a specified concept and optionally matching certain conditions
				wsDataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDropItem</name>
         <documentation>
				Drop an item to items trash
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRunQuery</name>
         <documentation>
				A message to directly run an xQuery on the XML DB.
				dataClusterPK: the primary key of the data cluster. The primary key can be nil to run cross-cluster queries
				revisionID: the revision ID of the DataCluster: nil, for the HEAD.
				query: the xQuery
				parameters: a list of parmaters that will replace the {n} in the query, where n is the nth parameter.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBase64KeyValue</name>
         <documentation>
				An object used to pass data to a connector in a connector interaction - see WSConnectorInteraction
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSConnectorInteraction</name>
         <documentation>
				A message to interact with a connector
				JNDIName: the JNDI name of the connector
				function: one of the enumerated interactions - see WSConnectorFunction
				parameters: parameters to pass to the connector - see WSBase64KeyValue
			</documentation>
         <subtypes>
            <subtype>WSConnectorFunction</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConnectorInteractionResponse</name>
         <documentation>
				The response to an interaction with a connector - see WSConnectorInteraction
			</documentation>
         <subtypes>
            <subtype>WSConnectorResponseCode</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRuleExpression</name>
         <documentation>
				A conditional expression in a routing rule
				name: the name of the condition
				xPath: the xPath applied to the item for the left hand value
				operator: one of the possible operators - see WSRoutingRuleOperator
				value: the right hand value
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleOperator</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRule</name>
         <documentation>
				A routing rule
				name: the unique name of the rule
				description: an optional description
				synchronous: whether the rule is executed synchronously or asynchronously by the routing engine
				concept: the item concept to match. A '*' matches any concept
				serviceJNDI: the JNDI entry of the service to call when the routing rule matches
				parameters: the parmaters to be passed to the service
				wsRoutingRuleExpressions: conditional consitions that item must meet for the rule to match
				deactive: true to deactivate the rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleExpression</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePK</name>
         <documentation>
				The primary key of a routing rule (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRoutingRuleArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePKArray</name>
         <documentation>
				A list of routing rules
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutRoutingRule</name>
         <documentation>
				A message to create/overwrite a routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRule</name>
         <documentation>
				A message to retrieve a routing rule.
				Throws an Exception if the rule is not found.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRoutingRule</name>
         <documentation>
				A message to check the existence of a routing rule.
				Returns the rule if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRoutingRule</name>
         <documentation>
				A messaage to delete an existing routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRulePKs</name>
         <documentation>
				A message to list the primary keys of routing rules which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServicesList</name>
         <documentation>
				A list of JNDI names belonging to services
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetServicesList</name>
         <documentation>
				A message to return the list of JNDI names of available Services in a WSServicesList
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceAction</name>
         <documentation>
				A message to perform an action on a service
				jndiName: the JNDI name of the service
				wsAction: the action to take on the service - see WSServiceActionCode
				methodName: the service method name to call (a public EJB method)
				methodParameters: a list of parameters to pass to the method
			</documentation>
         <subtypes>
            <subtype>WSServiceActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSServicePutConfiguration</name>
         <documentation>
				A message to store a configuration of a service on the server
				jndiName: the JNDI name of the service
				configuration: the configuration of the service to store on the server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetConfiguration</name>
         <documentation>
				A message to retrieve the configuration of a service
				jndiName: the JNDI name of the service
				otionalParameter: an optional parameter to pass on the call
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetDocument</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedure</name>
         <documentation>
				A stored procedure
				name: the unique name of the procedure
				description: the optional description of the procedure
				procedure: the xQuery
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePK</name>
         <documentation>
				The primary key of a stored procedure (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRegexStoredProcedure</name>
         <documentation>
				A message to retrieve stored procedures which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePKArray</name>
         <documentation>
				A list of stored procedures primary keys
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedure</name>
         <documentation>
				A message to retrieve a stored procedure.
				An exception will be thrown if the stored procedure does not exist.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsStoredProcedure</name>
         <documentation>
				A message to check that a stored procedure exists.
				Will return the stored procedure if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutStoredProcedure</name>
         <documentation>
				A message to create/overwrite a stored procedure
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedure</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteStoredProcedure</name>
         <documentation>
				A message to delete a stored procedure.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteStoredProcedure</name>
         <documentation>
				A message to execute a stored procedure.
				wsStoredProcedurePK: the primary key of the procedure to execute
				revisionID: the revisionID of the procedure
				wsDataClusterPK: the cluster where the procedure will be executed. If nil, the procedure will use the root of the DB as context.
				parameters: parameters passed to the stored procedure that will replace the {n} where n is the nth parameter
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedurePKs</name>
         <documentation>
				A message to retrieved stored procedure primary keys which names match a particular regex
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenu</name>
         <documentation>
				A menu.
				name: the unique name of the menu
				description: the description of the menu
				menuEntries: a list of entries tha make up the menu - see WSMenuEntry
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuEntry</name>
         <documentation>
				An entry in a menu (a menu item).
				id: the unique id of the entry
				descriptions: a list of localized string made of their label and respective two letter code language
				context:  the context of the webapp that should be launched when clicking on the entry
				application: the name of the application within the context that should be launched when clicking on the entry
				subMenu: a list of nested menu entries that make up the sub menus
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuPK</name>
         <documentation>
				The primary key of a menu (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenuPKArray</name>
         <documentation>
				A list of menu primary keys
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenu</name>
         <documentation>
				A message to retrieve an existing menu.
				Throws a SOAP Exception if the menu is not found
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsMenu</name>
         <documentation>
				A message to check that a menu exists
				Returns the menu if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutMenu</name>
         <documentation>
				A message to create/overwrite a menu
			</documentation>
         <subtypes>
            <subtype>WSMenu</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteMenu</name>
         <documentation>
				A message to delete an existing menu
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenuPKs</name>
         <documentation>
				A message to retrieve a list of menu primary keys which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDroppedItem</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPK</name>
         <documentation/>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSFindAllDroppedItemsPKs</name>
         <documentation>
				Find all dropped items in items trash
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLoadDroppedItem</name>
         <documentation>
				Load a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRecoverDroppedItem</name>
         <documentation>
				Recover a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRemoveDroppedItem</name>
         <documentation>
				Remove a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersioningSystemConfiguration</name>
         <documentation>
				A versioning system configuration
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSVersioningInfo</name>
         <documentation>
				Information about the Versioning System returned by getVersioningInfo
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSVersioningHistoryEntry</name>
         <documentation>
				An History Entry listing various data for a particular tag
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSVersioningObjectsHistory</name>
         <documentation>
				History of a list of objects
			</documentation>
         <subtypes>
            <subtype>WSVersioningHistoryEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersioningItemsHistory</name>
         <documentation>
				History of a list of items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
            <subtype>WSVersioningHistoryEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetVersioningSystemConfiguration</name>
         <documentation>
				Retrieve a versioning System Configuration
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutVersioningSystemConfiguration</name>
         <documentation>
				Put a versioning System Configuration
			</documentation>
         <subtypes>
            <subtype>WSVersioningSystemConfiguration</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersioningGetInfo</name>
         <documentation>
				Get Information about the Versioning System
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSVersioningGetObjectsHistory</name>
         <documentation>
				Get tagging history for one or more Xtentis Object instances - do not pass any name to get tagging history of the object
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSVersioningGetItemsHistory</name>
         <documentation>
				Get tagging history for one or more Items instances
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersioningTagObjects</name>
         <documentation>
				Version one or more Xtentis Object instances - do not pass any name to version all the instances of that object
				Versioning a data cluster versions all the items in it
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSVersioningTagItems</name>
         <documentation>
				Version one or more specific items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersioningRestoreObjects</name>
         <documentation>
				Restore one or more Xtentis Object instances - do not pass any name to restore all the instances of that object
				Restoring a data cluster restores all the items in it
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSVersioningRestoreItems</name>
         <documentation>
				Restore one or more specific items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSStringArray</name>
         <documentation>
				An array of string
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSByteArray</name>
         <documentation>
				An array of bytes
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSInt</name>
         <documentation>
				A return message containing a single Integer
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSI18nString</name>
         <documentation>
				An internationalized/localized String
				-language: the ISO lanaguage code
				-label: the localized label value
			</documentation>
         <subtypes>
            <subtype>WSLanguage</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBoolean</name>
         <documentation>
				A return message containing a single boolean (true/false)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSKey</name>
         <documentation>
				The description of an XSD style key
				The full xPath of a key field is found using the path 'selectorpath/fieldpath' within the element
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLinkedHashMap</name>
         <documentation>
				A generic implementation of a linked hash map
			</documentation>
         <subtypes>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContent</name>
         <documentation>
				A return message containing and array of bytes or an URL pointing to data and the content-type of the data
				url: an url pointing to data (e.g. http://www.mysite.com/data/MyData or file://var/data/myData)
				wsBytes: an array of bytes. url should be nil or non present when used.
				contentType: the content type (e.g. 'application/pdf' or 'text/xml; charset=utf-8')
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContentMap</name>
         <documentation>
				An implementation of an HashMap of TypedCOntent - see WSTypedContent
				key: the key of the typed content in the hashmap
				wsBytes: an array of bytes. url should be nil or non present when used.
				typedCOntent: the WSTypedContent
			</documentation>
         <subtypes>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptRevisionMap</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetComponentVersion</name>
         <documentation>
				A message to retrieve the version of a component
				component: the type of component -see WSComponent
				id: the id of the component; its JNDI name for services and connectors
			</documentation>
         <subtypes>
            <subtype>WSComponent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersion</name>
         <documentation>
				A return message containing the version of the component - see WSGetComponentVersion
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPing</name>
         <documentation>
				A message to ping an MDM server and see if it is up and running
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLogout</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSInitData</name>
         <documentation>
				DEPRECATED
				A message to automatically initialize the MDM server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDocumentPK</name>
         <documentation>
				DEPRECATED
				The primary key of a document - kept for calls compatibility; always null in calls
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModel</name>
         <documentation>
				A Data Model core object.
				name: the unique name of the data model
				description: the description of the data model
				xsdSchema: the XSD schema for this data model
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelPK</name>
         <documentation>
				The Primary key of a Data Model: its name
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelArray</name>
         <documentation>
				An array of Data Models - see WSDataModel
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataModelPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConcept</name>
         <documentation>
				The description of a concept within a Data Model
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessTemplate</name>
         <documentation>
				The description of a generic type for a concept of sub-element in a model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</documentation>
         <subtypes>
            <subtype>WSTemplateType</subtype>
            <subtype>WSBusinessSimpleTemplate</subtype>
            <subtype>WSBusinessComplexTemplate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessSimpleTemplate</name>
         <documentation>
				The desription of a simple generic type within a data model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSBusinessComplexTemplate</name>
         <documentation>
				The description of a complex type within a data model
			</documentation>
         <subtypes>
            <subtype>WSBusinessElement</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessElement</name>
         <documentation>
				A "sub-element" in a Complex Template
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDataModel</name>
         <documentation>
				A message to create or overwrite a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataModel</name>
         <documentation>
				A message to retrieve a data model.
				A SOAP Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataModel</name>
         <documentation>
				A message to retrieve a data model.
				No Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteDataModel</name>
         <documentation>
				A message to delete a Data Model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataModelPKs</name>
         <documentation>
				A message to retrieve  a list of data model Primary Keys (their name) using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSCheckSchema</name>
         <documentation>
				A message to check if a an XSD is a valid data model schema
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutBusinessConcept</name>
         <documentation>
				A message to create/overwrite a concept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
            <subtype>WSBusinessConcept</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutBusinessConceptSchema</name>
         <documentation>
				A message to create/overwrite a generic type in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteBusinessConcept</name>
         <documentation>
				A message to delete an existing cncept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConcepts</name>
         <documentation>
				A message to retrieve the list of all concepts in a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptKey</name>
         <documentation>
				A message to retrieve the XSD Key structure (see WSConceptKey) of a concept in data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptKey</name>
         <documentation>
				The XSD key structure of a concept in a data model (see WSGetBusinessConceptKey)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataCluster</name>
         <documentation>
				A data cluster.
				name: the unique name (primary key) of the data cluster
				description: an optional description of the data cluster
				vocabulary: a list of all the words of 3 letters of more composing the vocabulary of items stored in the data cluster; the list is collected during insertions and is used by the spell checker.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterPK</name>
         <documentation>
				The primary key of a data cluster (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterArray</name>
         <documentation>
				An array of data cluster instances
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataClusterPKArray</name>
         <documentation>
				An array of data cluster primary keys
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDBDataCluster</name>
         <documentation>
				?
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutDataCluster</name>
         <documentation>
				A message to create/overwrite a data-cluster
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will return null if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDBDataCluster</name>
         <documentation>
				A message to retrieve a DB (?) data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDeleteDataCluster</name>
         <documentation>
				A message to delete a data cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataClusterPKs</name>
         <documentation>
				A message list Data Custer Priary Keys (their name) using a regular expression on their names.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetConceptsInDataCluster</name>
         <documentation>
				A message to retrieve the list of concepts actually stored in a Data Cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereCondition</name>
         <documentation>
				The object used to write where conditions in queries.
				leftPath: the condition left xPath to test
				operator: the test operator; see WSWhereOperator
				rightValueOrPath: the condition right xPath or value to test against the left path
				stringPredicate: the condition predicate that further specifies the test for the CONTAINS operator
				spellCheck: whether to run a spell check on the right hand value.
			</documentation>
         <subtypes>
            <subtype>WSWhereOperator</subtype>
            <subtype>WSStringPredicate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereAnd</name>
         <documentation>
				Links multiple conditions using an AND
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereOr</name>
         <documentation>
				Links multiple conditions using an OR
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereItem</name>
         <documentation>
				The "SuperClass" of an And or Or or WhereCondition which is passed to queries.
				To use, specify either a whereCondition, or a whereAnd or a whereOr.
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
            <subtype>WSWhereAnd</subtype>
            <subtype>WSWhereOr</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSView</name>
         <documentation>
				A filter on items that specify the xPaths to extract, the conditions that the items must meet and the xPaths that can be searched when the user imposes additional search conditions.
				name: the name of the view
				description: the description of the view
				viewableBusinessElements: the visible xPaths (starting with the concept name) of the items found in the view
				whereConditions: the conditions that all the items must meet
				searchableBusinessElements: the xPaths (starting with the concept name) of the elements that can be seached to further refine the result
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewPK</name>
         <documentation>
				The primary key of a view (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSViewPKArray</name>
         <documentation>
				An array of view primary keys
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewArray</name>
         <documentation>
				An array of views
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutView</name>
         <documentation>
				A message to create/update a view. see WSView
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetView</name>
         <documentation>
				A message to retrieve a viwe
				Throws a SOAP exception if the view dooes not exist
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsView</name>
         <documentation>
				A message to test if a viw exists.
				Returns the view if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteView</name>
         <documentation>
				A message to delete an existing view
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexViews</name>
         <documentation>
				A message to retrieve a list of views using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetViewPKs</name>
         <documentation>
				A essage to retrieve a list of view primary keys using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSItem</name>
         <documentation>
				An item.
				wsDataClusterPK: the primary key of the cluster where the item is stored
				dataModelName: the name of the data model used to validate the item
				dataModelRevision: the revision of the data model used to validate the item
				conceptName: the concept of the item
				ids: a list of values making the primary key of the item
				insertionTime: the time in millis at whch the item was last stored (e.g. created or overwritten)
				content: an xml string of the item content
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPK</name>
         <documentation>
				An item Primary Key
				wsDataClusterPK: the primary key of the data cluster where the item is stored
				conceptName: the name of the concept
				ids: a list of values unique for that concept in that cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKArray</name>
         <documentation>
				An array of items primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConceptPK</name>
         <documentation>
				The unique key of a concept
				Used in conjunction with WSGetBusinessConceptValue
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetItem</name>
         <documentation>
				A message to retrieve an item using its primary key
				Throw an exception if not found.
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsItem</name>
         <documentation>
				A message to tests if an item exists.
				Returns the item if found, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItems</name>
         <documentation>
				A message to retieve a list of items using conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemPKsByCriteria</name>
         <documentation>
				A message to retieve a list of items using keywords, storing dates and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				contentKeywords: a list of words, separated by spaces, that must be found in the content of the items
				keysKeywords: a list of words, separated by spaces, that must be found in the primary key of the items
				fromDate: the lower date in millis at which the items were last stored
				fromDate: the upper date in millis at which the items wer last stored
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKsByCriteriaResponse</name>
         <documentation>
				The return message of WSGetItemPKsByCriteria containing the storing dates and primary keys of the matching items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptValue</name>
         <documentation>
				A message to retrieve the value of a concept base on the data cluster and key
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSBusinessConceptPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetFullPathValues</name>
         <documentation>
				A message to retieve all the values for an item xPath matching certain conditions
				wsDataClusterPK: the data cluster
				fullPath; the xPath to seach starting with the concept name
				whereItem: the conditions
				spellThreshold: the spell check to perform. -1 to deactivate
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewSearch</name>
         <documentation>
				A message to retrieve items through a view using conditions and paging
				wsdataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSXPathsSearch</name>
         <documentation>
				A message to retrieve elements of items using xPaths and optionally conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				pivotPath: the pivot xPath against which all the xPaths in viewablePaths are factored. If nil, the first viewablePath is used. The xPath must be full, strating with the concept name.
				viewablePaths: the list of xPaths for which data is retrieved. These paths are refactored against the pivot xPath. The xPaths must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemsPivotIndex</name>
         <documentation>
				Get items hierarchical tree according to pivots
			</documentation>
         <subtypes>
            <subtype>WSLinkedHashMap</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSCount</name>
         <documentation>
				A message to count the number of values at an xPath on items matching optional conditions.
				wsDataClusterPK: the primary key of the cluster where the items are stored
				countPath: the xPath valus which are counted. The xPath must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSQuickSearch</name>
         <documentation>
				A message to retrieve items through a view using keywords and paging and paging
				wsDataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				searchValue: the keywords searched in the item content sparated by spaces.
				matchAllWords: if set to true, the items must math all words in searchValue
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItem</name>
         <documentation>
				A message to create/overwrite an item
				wsDataClusterPK: the primary key of the cluster where the item is stored
				xmlString: the XML content of the item
				wsDataModelPK: the primary key of the data model used to validate the item.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSUpdateReportItemPOJO</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSUpdateReportItemArray</name>
         <documentation>
				???
			</documentation>
         <subtypes>
            <subtype>WSUpdateReportItemPOJO</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItemWithReport</name>
         <documentation>
				Puts an item in the xml storage with update report
			</documentation>
         <subtypes>
            <subtype>WSPutItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItem</name>
         <documentation>
				A message to delete an item using its primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItems</name>
         <documentation>
				A message to delete a list of items of a specified concept and optionally matching certain conditions
				wsDataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDropItem</name>
         <documentation>
				Drop an item to items trash
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRunQuery</name>
         <documentation>
				A message to directly run an xQuery on the XML DB.
				dataClusterPK: the primary key of the data cluster. The primary key can be nil to run cross-cluster queries
				revisionID: the revision ID of the DataCluster: nil, for the HEAD.
				query: the xQuery
				parameters: a list of parmaters that will replace the {n} in the query, where n is the nth parameter.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBase64KeyValue</name>
         <documentation>
				An object used to pass data to a connector in a connector interaction - see WSConnectorInteraction
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSConnectorInteraction</name>
         <documentation>
				A message to interact with a connector
				JNDIName: the JNDI name of the connector
				function: one of the enumerated interactions - see WSConnectorFunction
				parameters: parameters to pass to the connector - see WSBase64KeyValue
			</documentation>
         <subtypes>
            <subtype>WSConnectorFunction</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConnectorInteractionResponse</name>
         <documentation>
				The response to an interaction with a connector - see WSConnectorInteraction
			</documentation>
         <subtypes>
            <subtype>WSConnectorResponseCode</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRuleExpression</name>
         <documentation>
				A conditional expression in a routing rule
				name: the name of the condition
				xPath: the xPath applied to the item for the left hand value
				operator: one of the possible operators - see WSRoutingRuleOperator
				value: the right hand value
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleOperator</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRule</name>
         <documentation>
				A routing rule
				name: the unique name of the rule
				description: an optional description
				synchronous: whether the rule is executed synchronously or asynchronously by the routing engine
				concept: the item concept to match. A '*' matches any concept
				serviceJNDI: the JNDI entry of the service to call when the routing rule matches
				parameters: the parmaters to be passed to the service
				wsRoutingRuleExpressions: conditional consitions that item must meet for the rule to match
				deactive: true to deactivate the rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleExpression</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePK</name>
         <documentation>
				The primary key of a routing rule (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRoutingRuleArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePKArray</name>
         <documentation>
				A list of routing rules
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutRoutingRule</name>
         <documentation>
				A message to create/overwrite a routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRule</name>
         <documentation>
				A message to retrieve a routing rule.
				Throws an Exception if the rule is not found.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRoutingRule</name>
         <documentation>
				A message to check the existence of a routing rule.
				Returns the rule if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRoutingRule</name>
         <documentation>
				A messaage to delete an existing routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRulePKs</name>
         <documentation>
				A message to list the primary keys of routing rules which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServicesList</name>
         <documentation>
				A list of JNDI names belonging to services
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetServicesList</name>
         <documentation>
				A message to return the list of JNDI names of available Services in a WSServicesList
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceAction</name>
         <documentation>
				A message to perform an action on a service
				jndiName: the JNDI name of the service
				wsAction: the action to take on the service - see WSServiceActionCode
				methodName: the service method name to call (a public EJB method)
				methodParameters: a list of parameters to pass to the method
			</documentation>
         <subtypes>
            <subtype>WSServiceActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSServicePutConfiguration</name>
         <documentation>
				A message to store a configuration of a service on the server
				jndiName: the JNDI name of the service
				configuration: the configuration of the service to store on the server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetConfiguration</name>
         <documentation>
				A message to retrieve the configuration of a service
				jndiName: the JNDI name of the service
				otionalParameter: an optional parameter to pass on the call
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetDocument</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedure</name>
         <documentation>
				A stored procedure
				name: the unique name of the procedure
				description: the optional description of the procedure
				procedure: the xQuery
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePK</name>
         <documentation>
				The primary key of a stored procedure (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRegexStoredProcedure</name>
         <documentation>
				A message to retrieve stored procedures which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePKArray</name>
         <documentation>
				A list of stored procedures primary keys
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedure</name>
         <documentation>
				A message to retrieve a stored procedure.
				An exception will be thrown if the stored procedure does not exist.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsStoredProcedure</name>
         <documentation>
				A message to check that a stored procedure exists.
				Will return the stored procedure if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutStoredProcedure</name>
         <documentation>
				A message to create/overwrite a stored procedure
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedure</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteStoredProcedure</name>
         <documentation>
				A message to delete a stored procedure.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteStoredProcedure</name>
         <documentation>
				A message to execute a stored procedure.
				wsStoredProcedurePK: the primary key of the procedure to execute
				revisionID: the revisionID of the procedure
				wsDataClusterPK: the cluster where the procedure will be executed. If nil, the procedure will use the root of the DB as context.
				parameters: parameters passed to the stored procedure that will replace the {n} where n is the nth parameter
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedurePKs</name>
         <documentation>
				A message to retrieved stored procedure primary keys which names match a particular regex
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenu</name>
         <documentation>
				A menu.
				name: the unique name of the menu
				description: the description of the menu
				menuEntries: a list of entries tha make up the menu - see WSMenuEntry
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuEntry</name>
         <documentation>
				An entry in a menu (a menu item).
				id: the unique id of the entry
				descriptions: a list of localized string made of their label and respective two letter code language
				context:  the context of the webapp that should be launched when clicking on the entry
				application: the name of the application within the context that should be launched when clicking on the entry
				subMenu: a list of nested menu entries that make up the sub menus
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuPK</name>
         <documentation>
				The primary key of a menu (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenuPKArray</name>
         <documentation>
				A list of menu primary keys
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenu</name>
         <documentation>
				A message to retrieve an existing menu.
				Throws a SOAP Exception if the menu is not found
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsMenu</name>
         <documentation>
				A message to check that a menu exists
				Returns the menu if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutMenu</name>
         <documentation>
				A message to create/overwrite a menu
			</documentation>
         <subtypes>
            <subtype>WSMenu</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteMenu</name>
         <documentation>
				A message to delete an existing menu
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenuPKs</name>
         <documentation>
				A message to retrieve a list of menu primary keys which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDroppedItem</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPK</name>
         <documentation/>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSFindAllDroppedItemsPKs</name>
         <documentation>
				Find all dropped items in items trash
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLoadDroppedItem</name>
         <documentation>
				Load a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRecoverDroppedItem</name>
         <documentation>
				Recover a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRemoveDroppedItem</name>
         <documentation>
				Remove a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingOrderV2PK</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2Status</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingOrderV2</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2Status</subtype>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingOrderV2PKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2PK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingOrderV2Array</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingOrderV2</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2PK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRoutingOrderV2</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2PK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRoutingOrderV2</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2PK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingOrderV2SearchCriteria</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2Status</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingOrderV2PKsByCriteria</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2SearchCriteria</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingOrderV2sByCriteria</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2SearchCriteria</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteRoutingOrderV2Synchronously</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2PK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteRoutingOrderV2Asynchronously</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingOrderV2PK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRouteItemV2</name>
         <documentation/>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingEngineV2Action</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingEngineV2ActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSStringArray</name>
         <documentation>
				An array of string
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSByteArray</name>
         <documentation>
				An array of bytes
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSInt</name>
         <documentation>
				A return message containing a single Integer
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSI18nString</name>
         <documentation>
				An internationalized/localized String
				-language: the ISO lanaguage code
				-label: the localized label value
			</documentation>
         <subtypes>
            <subtype>WSLanguage</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBoolean</name>
         <documentation>
				A return message containing a single boolean (true/false)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSKey</name>
         <documentation>
				The description of an XSD style key
				The full xPath of a key field is found using the path 'selectorpath/fieldpath' within the element
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLinkedHashMap</name>
         <documentation>
				A generic implementation of a linked hash map
			</documentation>
         <subtypes>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContent</name>
         <documentation>
				A return message containing and array of bytes or an URL pointing to data and the content-type of the data
				url: an url pointing to data (e.g. http://www.mysite.com/data/MyData or file://var/data/myData)
				wsBytes: an array of bytes. url should be nil or non present when used.
				contentType: the content type (e.g. 'application/pdf' or 'text/xml; charset=utf-8')
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContentMap</name>
         <documentation>
				An implementation of an HashMap of TypedCOntent - see WSTypedContent
				key: the key of the typed content in the hashmap
				wsBytes: an array of bytes. url should be nil or non present when used.
				typedCOntent: the WSTypedContent
			</documentation>
         <subtypes>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptRevisionMap</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetComponentVersion</name>
         <documentation>
				A message to retrieve the version of a component
				component: the type of component -see WSComponent
				id: the id of the component; its JNDI name for services and connectors
			</documentation>
         <subtypes>
            <subtype>WSComponent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersion</name>
         <documentation>
				A return message containing the version of the component - see WSGetComponentVersion
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPing</name>
         <documentation>
				A message to ping an MDM server and see if it is up and running
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLogout</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSInitData</name>
         <documentation>
				DEPRECATED
				A message to automatically initialize the MDM server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDocumentPK</name>
         <documentation>
				DEPRECATED
				The primary key of a document - kept for calls compatibility; always null in calls
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModel</name>
         <documentation>
				A Data Model core object.
				name: the unique name of the data model
				description: the description of the data model
				xsdSchema: the XSD schema for this data model
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelPK</name>
         <documentation>
				The Primary key of a Data Model: its name
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelArray</name>
         <documentation>
				An array of Data Models - see WSDataModel
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataModelPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConcept</name>
         <documentation>
				The description of a concept within a Data Model
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessTemplate</name>
         <documentation>
				The description of a generic type for a concept of sub-element in a model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</documentation>
         <subtypes>
            <subtype>WSTemplateType</subtype>
            <subtype>WSBusinessSimpleTemplate</subtype>
            <subtype>WSBusinessComplexTemplate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessSimpleTemplate</name>
         <documentation>
				The desription of a simple generic type within a data model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSBusinessComplexTemplate</name>
         <documentation>
				The description of a complex type within a data model
			</documentation>
         <subtypes>
            <subtype>WSBusinessElement</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessElement</name>
         <documentation>
				A "sub-element" in a Complex Template
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDataModel</name>
         <documentation>
				A message to create or overwrite a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataModel</name>
         <documentation>
				A message to retrieve a data model.
				A SOAP Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataModel</name>
         <documentation>
				A message to retrieve a data model.
				No Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteDataModel</name>
         <documentation>
				A message to delete a Data Model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataModelPKs</name>
         <documentation>
				A message to retrieve  a list of data model Primary Keys (their name) using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSCheckSchema</name>
         <documentation>
				A message to check if a an XSD is a valid data model schema
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutBusinessConcept</name>
         <documentation>
				A message to create/overwrite a concept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
            <subtype>WSBusinessConcept</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutBusinessConceptSchema</name>
         <documentation>
				A message to create/overwrite a generic type in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteBusinessConcept</name>
         <documentation>
				A message to delete an existing cncept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConcepts</name>
         <documentation>
				A message to retrieve the list of all concepts in a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptKey</name>
         <documentation>
				A message to retrieve the XSD Key structure (see WSConceptKey) of a concept in data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptKey</name>
         <documentation>
				The XSD key structure of a concept in a data model (see WSGetBusinessConceptKey)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataCluster</name>
         <documentation>
				A data cluster.
				name: the unique name (primary key) of the data cluster
				description: an optional description of the data cluster
				vocabulary: a list of all the words of 3 letters of more composing the vocabulary of items stored in the data cluster; the list is collected during insertions and is used by the spell checker.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterPK</name>
         <documentation>
				The primary key of a data cluster (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterArray</name>
         <documentation>
				An array of data cluster instances
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataClusterPKArray</name>
         <documentation>
				An array of data cluster primary keys
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDBDataCluster</name>
         <documentation>
				?
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutDataCluster</name>
         <documentation>
				A message to create/overwrite a data-cluster
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will return null if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDBDataCluster</name>
         <documentation>
				A message to retrieve a DB (?) data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDeleteDataCluster</name>
         <documentation>
				A message to delete a data cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataClusterPKs</name>
         <documentation>
				A message list Data Custer Priary Keys (their name) using a regular expression on their names.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetConceptsInDataCluster</name>
         <documentation>
				A message to retrieve the list of concepts actually stored in a Data Cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereCondition</name>
         <documentation>
				The object used to write where conditions in queries.
				leftPath: the condition left xPath to test
				operator: the test operator; see WSWhereOperator
				rightValueOrPath: the condition right xPath or value to test against the left path
				stringPredicate: the condition predicate that further specifies the test for the CONTAINS operator
				spellCheck: whether to run a spell check on the right hand value.
			</documentation>
         <subtypes>
            <subtype>WSWhereOperator</subtype>
            <subtype>WSStringPredicate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereAnd</name>
         <documentation>
				Links multiple conditions using an AND
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereOr</name>
         <documentation>
				Links multiple conditions using an OR
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereItem</name>
         <documentation>
				The "SuperClass" of an And or Or or WhereCondition which is passed to queries.
				To use, specify either a whereCondition, or a whereAnd or a whereOr.
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
            <subtype>WSWhereAnd</subtype>
            <subtype>WSWhereOr</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSView</name>
         <documentation>
				A filter on items that specify the xPaths to extract, the conditions that the items must meet and the xPaths that can be searched when the user imposes additional search conditions.
				name: the name of the view
				description: the description of the view
				viewableBusinessElements: the visible xPaths (starting with the concept name) of the items found in the view
				whereConditions: the conditions that all the items must meet
				searchableBusinessElements: the xPaths (starting with the concept name) of the elements that can be seached to further refine the result
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewPK</name>
         <documentation>
				The primary key of a view (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSViewPKArray</name>
         <documentation>
				An array of view primary keys
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewArray</name>
         <documentation>
				An array of views
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutView</name>
         <documentation>
				A message to create/update a view. see WSView
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetView</name>
         <documentation>
				A message to retrieve a viwe
				Throws a SOAP exception if the view dooes not exist
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsView</name>
         <documentation>
				A message to test if a viw exists.
				Returns the view if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteView</name>
         <documentation>
				A message to delete an existing view
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexViews</name>
         <documentation>
				A message to retrieve a list of views using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetViewPKs</name>
         <documentation>
				A essage to retrieve a list of view primary keys using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSItem</name>
         <documentation>
				An item.
				wsDataClusterPK: the primary key of the cluster where the item is stored
				dataModelName: the name of the data model used to validate the item
				dataModelRevision: the revision of the data model used to validate the item
				conceptName: the concept of the item
				ids: a list of values making the primary key of the item
				insertionTime: the time in millis at whch the item was last stored (e.g. created or overwritten)
				content: an xml string of the item content
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPK</name>
         <documentation>
				An item Primary Key
				wsDataClusterPK: the primary key of the data cluster where the item is stored
				conceptName: the name of the concept
				ids: a list of values unique for that concept in that cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKArray</name>
         <documentation>
				An array of items primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConceptPK</name>
         <documentation>
				The unique key of a concept
				Used in conjunction with WSGetBusinessConceptValue
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetItem</name>
         <documentation>
				A message to retrieve an item using its primary key
				Throw an exception if not found.
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsItem</name>
         <documentation>
				A message to tests if an item exists.
				Returns the item if found, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItems</name>
         <documentation>
				A message to retieve a list of items using conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemPKsByCriteria</name>
         <documentation>
				A message to retieve a list of items using keywords, storing dates and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				contentKeywords: a list of words, separated by spaces, that must be found in the content of the items
				keysKeywords: a list of words, separated by spaces, that must be found in the primary key of the items
				fromDate: the lower date in millis at which the items were last stored
				fromDate: the upper date in millis at which the items wer last stored
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKsByCriteriaResponse</name>
         <documentation>
				The return message of WSGetItemPKsByCriteria containing the storing dates and primary keys of the matching items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptValue</name>
         <documentation>
				A message to retrieve the value of a concept base on the data cluster and key
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSBusinessConceptPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetFullPathValues</name>
         <documentation>
				A message to retieve all the values for an item xPath matching certain conditions
				wsDataClusterPK: the data cluster
				fullPath; the xPath to seach starting with the concept name
				whereItem: the conditions
				spellThreshold: the spell check to perform. -1 to deactivate
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewSearch</name>
         <documentation>
				A message to retrieve items through a view using conditions and paging
				wsdataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSXPathsSearch</name>
         <documentation>
				A message to retrieve elements of items using xPaths and optionally conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				pivotPath: the pivot xPath against which all the xPaths in viewablePaths are factored. If nil, the first viewablePath is used. The xPath must be full, strating with the concept name.
				viewablePaths: the list of xPaths for which data is retrieved. These paths are refactored against the pivot xPath. The xPaths must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemsPivotIndex</name>
         <documentation>
				Get items hierarchical tree according to pivots
			</documentation>
         <subtypes>
            <subtype>WSLinkedHashMap</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSCount</name>
         <documentation>
				A message to count the number of values at an xPath on items matching optional conditions.
				wsDataClusterPK: the primary key of the cluster where the items are stored
				countPath: the xPath valus which are counted. The xPath must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSQuickSearch</name>
         <documentation>
				A message to retrieve items through a view using keywords and paging and paging
				wsDataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				searchValue: the keywords searched in the item content sparated by spaces.
				matchAllWords: if set to true, the items must math all words in searchValue
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItem</name>
         <documentation>
				A message to create/overwrite an item
				wsDataClusterPK: the primary key of the cluster where the item is stored
				xmlString: the XML content of the item
				wsDataModelPK: the primary key of the data model used to validate the item.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSUpdateReportItemPOJO</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSUpdateReportItemArray</name>
         <documentation>
				???
			</documentation>
         <subtypes>
            <subtype>WSUpdateReportItemPOJO</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItemWithReport</name>
         <documentation>
				Puts an item in the xml storage with update report
			</documentation>
         <subtypes>
            <subtype>WSPutItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItem</name>
         <documentation>
				A message to delete an item using its primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItems</name>
         <documentation>
				A message to delete a list of items of a specified concept and optionally matching certain conditions
				wsDataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDropItem</name>
         <documentation>
				Drop an item to items trash
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRunQuery</name>
         <documentation>
				A message to directly run an xQuery on the XML DB.
				dataClusterPK: the primary key of the data cluster. The primary key can be nil to run cross-cluster queries
				revisionID: the revision ID of the DataCluster: nil, for the HEAD.
				query: the xQuery
				parameters: a list of parmaters that will replace the {n} in the query, where n is the nth parameter.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBase64KeyValue</name>
         <documentation>
				An object used to pass data to a connector in a connector interaction - see WSConnectorInteraction
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSConnectorInteraction</name>
         <documentation>
				A message to interact with a connector
				JNDIName: the JNDI name of the connector
				function: one of the enumerated interactions - see WSConnectorFunction
				parameters: parameters to pass to the connector - see WSBase64KeyValue
			</documentation>
         <subtypes>
            <subtype>WSConnectorFunction</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConnectorInteractionResponse</name>
         <documentation>
				The response to an interaction with a connector - see WSConnectorInteraction
			</documentation>
         <subtypes>
            <subtype>WSConnectorResponseCode</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRuleExpression</name>
         <documentation>
				A conditional expression in a routing rule
				name: the name of the condition
				xPath: the xPath applied to the item for the left hand value
				operator: one of the possible operators - see WSRoutingRuleOperator
				value: the right hand value
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleOperator</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRule</name>
         <documentation>
				A routing rule
				name: the unique name of the rule
				description: an optional description
				synchronous: whether the rule is executed synchronously or asynchronously by the routing engine
				concept: the item concept to match. A '*' matches any concept
				serviceJNDI: the JNDI entry of the service to call when the routing rule matches
				parameters: the parmaters to be passed to the service
				wsRoutingRuleExpressions: conditional consitions that item must meet for the rule to match
				deactive: true to deactivate the rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleExpression</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePK</name>
         <documentation>
				The primary key of a routing rule (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRoutingRuleArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePKArray</name>
         <documentation>
				A list of routing rules
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutRoutingRule</name>
         <documentation>
				A message to create/overwrite a routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRule</name>
         <documentation>
				A message to retrieve a routing rule.
				Throws an Exception if the rule is not found.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRoutingRule</name>
         <documentation>
				A message to check the existence of a routing rule.
				Returns the rule if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRoutingRule</name>
         <documentation>
				A messaage to delete an existing routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRulePKs</name>
         <documentation>
				A message to list the primary keys of routing rules which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServicesList</name>
         <documentation>
				A list of JNDI names belonging to services
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetServicesList</name>
         <documentation>
				A message to return the list of JNDI names of available Services in a WSServicesList
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceAction</name>
         <documentation>
				A message to perform an action on a service
				jndiName: the JNDI name of the service
				wsAction: the action to take on the service - see WSServiceActionCode
				methodName: the service method name to call (a public EJB method)
				methodParameters: a list of parameters to pass to the method
			</documentation>
         <subtypes>
            <subtype>WSServiceActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSServicePutConfiguration</name>
         <documentation>
				A message to store a configuration of a service on the server
				jndiName: the JNDI name of the service
				configuration: the configuration of the service to store on the server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetConfiguration</name>
         <documentation>
				A message to retrieve the configuration of a service
				jndiName: the JNDI name of the service
				otionalParameter: an optional parameter to pass on the call
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetDocument</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedure</name>
         <documentation>
				A stored procedure
				name: the unique name of the procedure
				description: the optional description of the procedure
				procedure: the xQuery
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePK</name>
         <documentation>
				The primary key of a stored procedure (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRegexStoredProcedure</name>
         <documentation>
				A message to retrieve stored procedures which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePKArray</name>
         <documentation>
				A list of stored procedures primary keys
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedure</name>
         <documentation>
				A message to retrieve a stored procedure.
				An exception will be thrown if the stored procedure does not exist.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsStoredProcedure</name>
         <documentation>
				A message to check that a stored procedure exists.
				Will return the stored procedure if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutStoredProcedure</name>
         <documentation>
				A message to create/overwrite a stored procedure
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedure</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteStoredProcedure</name>
         <documentation>
				A message to delete a stored procedure.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteStoredProcedure</name>
         <documentation>
				A message to execute a stored procedure.
				wsStoredProcedurePK: the primary key of the procedure to execute
				revisionID: the revisionID of the procedure
				wsDataClusterPK: the cluster where the procedure will be executed. If nil, the procedure will use the root of the DB as context.
				parameters: parameters passed to the stored procedure that will replace the {n} where n is the nth parameter
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedurePKs</name>
         <documentation>
				A message to retrieved stored procedure primary keys which names match a particular regex
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenu</name>
         <documentation>
				A menu.
				name: the unique name of the menu
				description: the description of the menu
				menuEntries: a list of entries tha make up the menu - see WSMenuEntry
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuEntry</name>
         <documentation>
				An entry in a menu (a menu item).
				id: the unique id of the entry
				descriptions: a list of localized string made of their label and respective two letter code language
				context:  the context of the webapp that should be launched when clicking on the entry
				application: the name of the application within the context that should be launched when clicking on the entry
				subMenu: a list of nested menu entries that make up the sub menus
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuPK</name>
         <documentation>
				The primary key of a menu (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenuPKArray</name>
         <documentation>
				A list of menu primary keys
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenu</name>
         <documentation>
				A message to retrieve an existing menu.
				Throws a SOAP Exception if the menu is not found
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsMenu</name>
         <documentation>
				A message to check that a menu exists
				Returns the menu if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutMenu</name>
         <documentation>
				A message to create/overwrite a menu
			</documentation>
         <subtypes>
            <subtype>WSMenu</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteMenu</name>
         <documentation>
				A message to delete an existing menu
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenuPKs</name>
         <documentation>
				A message to retrieve a list of menu primary keys which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDroppedItem</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPK</name>
         <documentation/>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSFindAllDroppedItemsPKs</name>
         <documentation>
				Find all dropped items in items trash
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLoadDroppedItem</name>
         <documentation>
				Load a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRecoverDroppedItem</name>
         <documentation>
				Recover a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRemoveDroppedItem</name>
         <documentation>
				Remove a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRole</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSRolePK</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSRolePKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRolePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRole</name>
         <documentation/>
         <subtypes>
            <subtype>WSRolePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRole</name>
         <documentation/>
         <subtypes>
            <subtype>WSRolePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutRole</name>
         <documentation/>
         <subtypes>
            <subtype>WSRole</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRole</name>
         <documentation/>
         <subtypes>
            <subtype>WSRolePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRolePKs</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetObjectsForRoles</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSStringArray</name>
         <documentation>
				An array of string
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSByteArray</name>
         <documentation>
				An array of bytes
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSInt</name>
         <documentation>
				A return message containing a single Integer
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSI18nString</name>
         <documentation>
				An internationalized/localized String
				-language: the ISO lanaguage code
				-label: the localized label value
			</documentation>
         <subtypes>
            <subtype>WSLanguage</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBoolean</name>
         <documentation>
				A return message containing a single boolean (true/false)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSKey</name>
         <documentation>
				The description of an XSD style key
				The full xPath of a key field is found using the path 'selectorpath/fieldpath' within the element
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLinkedHashMap</name>
         <documentation>
				A generic implementation of a linked hash map
			</documentation>
         <subtypes>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContent</name>
         <documentation>
				A return message containing and array of bytes or an URL pointing to data and the content-type of the data
				url: an url pointing to data (e.g. http://www.mysite.com/data/MyData or file://var/data/myData)
				wsBytes: an array of bytes. url should be nil or non present when used.
				contentType: the content type (e.g. 'application/pdf' or 'text/xml; charset=utf-8')
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContentMap</name>
         <documentation>
				An implementation of an HashMap of TypedCOntent - see WSTypedContent
				key: the key of the typed content in the hashmap
				wsBytes: an array of bytes. url should be nil or non present when used.
				typedCOntent: the WSTypedContent
			</documentation>
         <subtypes>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptRevisionMap</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetComponentVersion</name>
         <documentation>
				A message to retrieve the version of a component
				component: the type of component -see WSComponent
				id: the id of the component; its JNDI name for services and connectors
			</documentation>
         <subtypes>
            <subtype>WSComponent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersion</name>
         <documentation>
				A return message containing the version of the component - see WSGetComponentVersion
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPing</name>
         <documentation>
				A message to ping an MDM server and see if it is up and running
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLogout</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSInitData</name>
         <documentation>
				DEPRECATED
				A message to automatically initialize the MDM server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDocumentPK</name>
         <documentation>
				DEPRECATED
				The primary key of a document - kept for calls compatibility; always null in calls
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModel</name>
         <documentation>
				A Data Model core object.
				name: the unique name of the data model
				description: the description of the data model
				xsdSchema: the XSD schema for this data model
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelPK</name>
         <documentation>
				The Primary key of a Data Model: its name
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelArray</name>
         <documentation>
				An array of Data Models - see WSDataModel
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataModelPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConcept</name>
         <documentation>
				The description of a concept within a Data Model
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessTemplate</name>
         <documentation>
				The description of a generic type for a concept of sub-element in a model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</documentation>
         <subtypes>
            <subtype>WSTemplateType</subtype>
            <subtype>WSBusinessSimpleTemplate</subtype>
            <subtype>WSBusinessComplexTemplate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessSimpleTemplate</name>
         <documentation>
				The desription of a simple generic type within a data model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSBusinessComplexTemplate</name>
         <documentation>
				The description of a complex type within a data model
			</documentation>
         <subtypes>
            <subtype>WSBusinessElement</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessElement</name>
         <documentation>
				A "sub-element" in a Complex Template
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDataModel</name>
         <documentation>
				A message to create or overwrite a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataModel</name>
         <documentation>
				A message to retrieve a data model.
				A SOAP Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataModel</name>
         <documentation>
				A message to retrieve a data model.
				No Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteDataModel</name>
         <documentation>
				A message to delete a Data Model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataModelPKs</name>
         <documentation>
				A message to retrieve  a list of data model Primary Keys (their name) using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSCheckSchema</name>
         <documentation>
				A message to check if a an XSD is a valid data model schema
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutBusinessConcept</name>
         <documentation>
				A message to create/overwrite a concept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
            <subtype>WSBusinessConcept</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutBusinessConceptSchema</name>
         <documentation>
				A message to create/overwrite a generic type in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteBusinessConcept</name>
         <documentation>
				A message to delete an existing cncept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConcepts</name>
         <documentation>
				A message to retrieve the list of all concepts in a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptKey</name>
         <documentation>
				A message to retrieve the XSD Key structure (see WSConceptKey) of a concept in data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptKey</name>
         <documentation>
				The XSD key structure of a concept in a data model (see WSGetBusinessConceptKey)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataCluster</name>
         <documentation>
				A data cluster.
				name: the unique name (primary key) of the data cluster
				description: an optional description of the data cluster
				vocabulary: a list of all the words of 3 letters of more composing the vocabulary of items stored in the data cluster; the list is collected during insertions and is used by the spell checker.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterPK</name>
         <documentation>
				The primary key of a data cluster (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterArray</name>
         <documentation>
				An array of data cluster instances
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataClusterPKArray</name>
         <documentation>
				An array of data cluster primary keys
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDBDataCluster</name>
         <documentation>
				?
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutDataCluster</name>
         <documentation>
				A message to create/overwrite a data-cluster
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will return null if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDBDataCluster</name>
         <documentation>
				A message to retrieve a DB (?) data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDeleteDataCluster</name>
         <documentation>
				A message to delete a data cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataClusterPKs</name>
         <documentation>
				A message list Data Custer Priary Keys (their name) using a regular expression on their names.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetConceptsInDataCluster</name>
         <documentation>
				A message to retrieve the list of concepts actually stored in a Data Cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereCondition</name>
         <documentation>
				The object used to write where conditions in queries.
				leftPath: the condition left xPath to test
				operator: the test operator; see WSWhereOperator
				rightValueOrPath: the condition right xPath or value to test against the left path
				stringPredicate: the condition predicate that further specifies the test for the CONTAINS operator
				spellCheck: whether to run a spell check on the right hand value.
			</documentation>
         <subtypes>
            <subtype>WSWhereOperator</subtype>
            <subtype>WSStringPredicate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereAnd</name>
         <documentation>
				Links multiple conditions using an AND
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereOr</name>
         <documentation>
				Links multiple conditions using an OR
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereItem</name>
         <documentation>
				The "SuperClass" of an And or Or or WhereCondition which is passed to queries.
				To use, specify either a whereCondition, or a whereAnd or a whereOr.
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
            <subtype>WSWhereAnd</subtype>
            <subtype>WSWhereOr</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSView</name>
         <documentation>
				A filter on items that specify the xPaths to extract, the conditions that the items must meet and the xPaths that can be searched when the user imposes additional search conditions.
				name: the name of the view
				description: the description of the view
				viewableBusinessElements: the visible xPaths (starting with the concept name) of the items found in the view
				whereConditions: the conditions that all the items must meet
				searchableBusinessElements: the xPaths (starting with the concept name) of the elements that can be seached to further refine the result
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewPK</name>
         <documentation>
				The primary key of a view (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSViewPKArray</name>
         <documentation>
				An array of view primary keys
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewArray</name>
         <documentation>
				An array of views
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutView</name>
         <documentation>
				A message to create/update a view. see WSView
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetView</name>
         <documentation>
				A message to retrieve a viwe
				Throws a SOAP exception if the view dooes not exist
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsView</name>
         <documentation>
				A message to test if a viw exists.
				Returns the view if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteView</name>
         <documentation>
				A message to delete an existing view
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexViews</name>
         <documentation>
				A message to retrieve a list of views using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetViewPKs</name>
         <documentation>
				A essage to retrieve a list of view primary keys using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSItem</name>
         <documentation>
				An item.
				wsDataClusterPK: the primary key of the cluster where the item is stored
				dataModelName: the name of the data model used to validate the item
				dataModelRevision: the revision of the data model used to validate the item
				conceptName: the concept of the item
				ids: a list of values making the primary key of the item
				insertionTime: the time in millis at whch the item was last stored (e.g. created or overwritten)
				content: an xml string of the item content
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPK</name>
         <documentation>
				An item Primary Key
				wsDataClusterPK: the primary key of the data cluster where the item is stored
				conceptName: the name of the concept
				ids: a list of values unique for that concept in that cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKArray</name>
         <documentation>
				An array of items primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConceptPK</name>
         <documentation>
				The unique key of a concept
				Used in conjunction with WSGetBusinessConceptValue
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetItem</name>
         <documentation>
				A message to retrieve an item using its primary key
				Throw an exception if not found.
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsItem</name>
         <documentation>
				A message to tests if an item exists.
				Returns the item if found, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItems</name>
         <documentation>
				A message to retieve a list of items using conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemPKsByCriteria</name>
         <documentation>
				A message to retieve a list of items using keywords, storing dates and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				contentKeywords: a list of words, separated by spaces, that must be found in the content of the items
				keysKeywords: a list of words, separated by spaces, that must be found in the primary key of the items
				fromDate: the lower date in millis at which the items were last stored
				fromDate: the upper date in millis at which the items wer last stored
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKsByCriteriaResponse</name>
         <documentation>
				The return message of WSGetItemPKsByCriteria containing the storing dates and primary keys of the matching items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptValue</name>
         <documentation>
				A message to retrieve the value of a concept base on the data cluster and key
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSBusinessConceptPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetFullPathValues</name>
         <documentation>
				A message to retieve all the values for an item xPath matching certain conditions
				wsDataClusterPK: the data cluster
				fullPath; the xPath to seach starting with the concept name
				whereItem: the conditions
				spellThreshold: the spell check to perform. -1 to deactivate
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewSearch</name>
         <documentation>
				A message to retrieve items through a view using conditions and paging
				wsdataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSXPathsSearch</name>
         <documentation>
				A message to retrieve elements of items using xPaths and optionally conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				pivotPath: the pivot xPath against which all the xPaths in viewablePaths are factored. If nil, the first viewablePath is used. The xPath must be full, strating with the concept name.
				viewablePaths: the list of xPaths for which data is retrieved. These paths are refactored against the pivot xPath. The xPaths must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemsPivotIndex</name>
         <documentation>
				Get items hierarchical tree according to pivots
			</documentation>
         <subtypes>
            <subtype>WSLinkedHashMap</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSCount</name>
         <documentation>
				A message to count the number of values at an xPath on items matching optional conditions.
				wsDataClusterPK: the primary key of the cluster where the items are stored
				countPath: the xPath valus which are counted. The xPath must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSQuickSearch</name>
         <documentation>
				A message to retrieve items through a view using keywords and paging and paging
				wsDataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				searchValue: the keywords searched in the item content sparated by spaces.
				matchAllWords: if set to true, the items must math all words in searchValue
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItem</name>
         <documentation>
				A message to create/overwrite an item
				wsDataClusterPK: the primary key of the cluster where the item is stored
				xmlString: the XML content of the item
				wsDataModelPK: the primary key of the data model used to validate the item.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSUpdateReportItemPOJO</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSUpdateReportItemArray</name>
         <documentation>
				???
			</documentation>
         <subtypes>
            <subtype>WSUpdateReportItemPOJO</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItemWithReport</name>
         <documentation>
				Puts an item in the xml storage with update report
			</documentation>
         <subtypes>
            <subtype>WSPutItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItem</name>
         <documentation>
				A message to delete an item using its primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItems</name>
         <documentation>
				A message to delete a list of items of a specified concept and optionally matching certain conditions
				wsDataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDropItem</name>
         <documentation>
				Drop an item to items trash
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRunQuery</name>
         <documentation>
				A message to directly run an xQuery on the XML DB.
				dataClusterPK: the primary key of the data cluster. The primary key can be nil to run cross-cluster queries
				revisionID: the revision ID of the DataCluster: nil, for the HEAD.
				query: the xQuery
				parameters: a list of parmaters that will replace the {n} in the query, where n is the nth parameter.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBase64KeyValue</name>
         <documentation>
				An object used to pass data to a connector in a connector interaction - see WSConnectorInteraction
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSConnectorInteraction</name>
         <documentation>
				A message to interact with a connector
				JNDIName: the JNDI name of the connector
				function: one of the enumerated interactions - see WSConnectorFunction
				parameters: parameters to pass to the connector - see WSBase64KeyValue
			</documentation>
         <subtypes>
            <subtype>WSConnectorFunction</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConnectorInteractionResponse</name>
         <documentation>
				The response to an interaction with a connector - see WSConnectorInteraction
			</documentation>
         <subtypes>
            <subtype>WSConnectorResponseCode</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRuleExpression</name>
         <documentation>
				A conditional expression in a routing rule
				name: the name of the condition
				xPath: the xPath applied to the item for the left hand value
				operator: one of the possible operators - see WSRoutingRuleOperator
				value: the right hand value
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleOperator</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRule</name>
         <documentation>
				A routing rule
				name: the unique name of the rule
				description: an optional description
				synchronous: whether the rule is executed synchronously or asynchronously by the routing engine
				concept: the item concept to match. A '*' matches any concept
				serviceJNDI: the JNDI entry of the service to call when the routing rule matches
				parameters: the parmaters to be passed to the service
				wsRoutingRuleExpressions: conditional consitions that item must meet for the rule to match
				deactive: true to deactivate the rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleExpression</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePK</name>
         <documentation>
				The primary key of a routing rule (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRoutingRuleArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePKArray</name>
         <documentation>
				A list of routing rules
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutRoutingRule</name>
         <documentation>
				A message to create/overwrite a routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRule</name>
         <documentation>
				A message to retrieve a routing rule.
				Throws an Exception if the rule is not found.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRoutingRule</name>
         <documentation>
				A message to check the existence of a routing rule.
				Returns the rule if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRoutingRule</name>
         <documentation>
				A messaage to delete an existing routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRulePKs</name>
         <documentation>
				A message to list the primary keys of routing rules which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServicesList</name>
         <documentation>
				A list of JNDI names belonging to services
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetServicesList</name>
         <documentation>
				A message to return the list of JNDI names of available Services in a WSServicesList
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceAction</name>
         <documentation>
				A message to perform an action on a service
				jndiName: the JNDI name of the service
				wsAction: the action to take on the service - see WSServiceActionCode
				methodName: the service method name to call (a public EJB method)
				methodParameters: a list of parameters to pass to the method
			</documentation>
         <subtypes>
            <subtype>WSServiceActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSServicePutConfiguration</name>
         <documentation>
				A message to store a configuration of a service on the server
				jndiName: the JNDI name of the service
				configuration: the configuration of the service to store on the server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetConfiguration</name>
         <documentation>
				A message to retrieve the configuration of a service
				jndiName: the JNDI name of the service
				otionalParameter: an optional parameter to pass on the call
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetDocument</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedure</name>
         <documentation>
				A stored procedure
				name: the unique name of the procedure
				description: the optional description of the procedure
				procedure: the xQuery
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePK</name>
         <documentation>
				The primary key of a stored procedure (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRegexStoredProcedure</name>
         <documentation>
				A message to retrieve stored procedures which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePKArray</name>
         <documentation>
				A list of stored procedures primary keys
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedure</name>
         <documentation>
				A message to retrieve a stored procedure.
				An exception will be thrown if the stored procedure does not exist.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsStoredProcedure</name>
         <documentation>
				A message to check that a stored procedure exists.
				Will return the stored procedure if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutStoredProcedure</name>
         <documentation>
				A message to create/overwrite a stored procedure
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedure</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteStoredProcedure</name>
         <documentation>
				A message to delete a stored procedure.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteStoredProcedure</name>
         <documentation>
				A message to execute a stored procedure.
				wsStoredProcedurePK: the primary key of the procedure to execute
				revisionID: the revisionID of the procedure
				wsDataClusterPK: the cluster where the procedure will be executed. If nil, the procedure will use the root of the DB as context.
				parameters: parameters passed to the stored procedure that will replace the {n} where n is the nth parameter
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedurePKs</name>
         <documentation>
				A message to retrieved stored procedure primary keys which names match a particular regex
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenu</name>
         <documentation>
				A menu.
				name: the unique name of the menu
				description: the description of the menu
				menuEntries: a list of entries tha make up the menu - see WSMenuEntry
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuEntry</name>
         <documentation>
				An entry in a menu (a menu item).
				id: the unique id of the entry
				descriptions: a list of localized string made of their label and respective two letter code language
				context:  the context of the webapp that should be launched when clicking on the entry
				application: the name of the application within the context that should be launched when clicking on the entry
				subMenu: a list of nested menu entries that make up the sub menus
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuPK</name>
         <documentation>
				The primary key of a menu (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenuPKArray</name>
         <documentation>
				A list of menu primary keys
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenu</name>
         <documentation>
				A message to retrieve an existing menu.
				Throws a SOAP Exception if the menu is not found
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsMenu</name>
         <documentation>
				A message to check that a menu exists
				Returns the menu if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutMenu</name>
         <documentation>
				A message to create/overwrite a menu
			</documentation>
         <subtypes>
            <subtype>WSMenu</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteMenu</name>
         <documentation>
				A message to delete an existing menu
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenuPKs</name>
         <documentation>
				A message to retrieve a list of menu primary keys which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDroppedItem</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPK</name>
         <documentation/>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSFindAllDroppedItemsPKs</name>
         <documentation>
				Find all dropped items in items trash
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLoadDroppedItem</name>
         <documentation>
				Load a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRecoverDroppedItem</name>
         <documentation>
				Recover a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRemoveDroppedItem</name>
         <documentation>
				Remove a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSUniverse</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSUniversePK</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSUniversePKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSUniversePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetUniverse</name>
         <documentation/>
         <subtypes>
            <subtype>WSUniversePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsUniverse</name>
         <documentation/>
         <subtypes>
            <subtype>WSUniversePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutUniverse</name>
         <documentation/>
         <subtypes>
            <subtype>WSUniverse</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteUniverse</name>
         <documentation/>
         <subtypes>
            <subtype>WSUniversePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetUniversePKs</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetObjectsForUniverses</name>
         <documentation>
				Return the xtentis object names for which a revision ID can be set
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetCurrentUniverse</name>
         <documentation>
				Return the Universe the calling user is using
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetConceptsInDataClusterWithRevisions</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSUniversePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSStringArray</name>
         <documentation>
				An array of string
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSByteArray</name>
         <documentation>
				An array of bytes
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSInt</name>
         <documentation>
				A return message containing a single Integer
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSI18nString</name>
         <documentation>
				An internationalized/localized String
				-language: the ISO lanaguage code
				-label: the localized label value
			</documentation>
         <subtypes>
            <subtype>WSLanguage</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBoolean</name>
         <documentation>
				A return message containing a single boolean (true/false)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSKey</name>
         <documentation>
				The description of an XSD style key
				The full xPath of a key field is found using the path 'selectorpath/fieldpath' within the element
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLinkedHashMap</name>
         <documentation>
				A generic implementation of a linked hash map
			</documentation>
         <subtypes>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContent</name>
         <documentation>
				A return message containing and array of bytes or an URL pointing to data and the content-type of the data
				url: an url pointing to data (e.g. http://www.mysite.com/data/MyData or file://var/data/myData)
				wsBytes: an array of bytes. url should be nil or non present when used.
				contentType: the content type (e.g. 'application/pdf' or 'text/xml; charset=utf-8')
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContentMap</name>
         <documentation>
				An implementation of an HashMap of TypedCOntent - see WSTypedContent
				key: the key of the typed content in the hashmap
				wsBytes: an array of bytes. url should be nil or non present when used.
				typedCOntent: the WSTypedContent
			</documentation>
         <subtypes>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptRevisionMap</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetComponentVersion</name>
         <documentation>
				A message to retrieve the version of a component
				component: the type of component -see WSComponent
				id: the id of the component; its JNDI name for services and connectors
			</documentation>
         <subtypes>
            <subtype>WSComponent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersion</name>
         <documentation>
				A return message containing the version of the component - see WSGetComponentVersion
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPing</name>
         <documentation>
				A message to ping an MDM server and see if it is up and running
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLogout</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSInitData</name>
         <documentation>
				DEPRECATED
				A message to automatically initialize the MDM server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDocumentPK</name>
         <documentation>
				DEPRECATED
				The primary key of a document - kept for calls compatibility; always null in calls
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModel</name>
         <documentation>
				A Data Model core object.
				name: the unique name of the data model
				description: the description of the data model
				xsdSchema: the XSD schema for this data model
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelPK</name>
         <documentation>
				The Primary key of a Data Model: its name
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelArray</name>
         <documentation>
				An array of Data Models - see WSDataModel
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataModelPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConcept</name>
         <documentation>
				The description of a concept within a Data Model
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessTemplate</name>
         <documentation>
				The description of a generic type for a concept of sub-element in a model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</documentation>
         <subtypes>
            <subtype>WSTemplateType</subtype>
            <subtype>WSBusinessSimpleTemplate</subtype>
            <subtype>WSBusinessComplexTemplate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessSimpleTemplate</name>
         <documentation>
				The desription of a simple generic type within a data model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSBusinessComplexTemplate</name>
         <documentation>
				The description of a complex type within a data model
			</documentation>
         <subtypes>
            <subtype>WSBusinessElement</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessElement</name>
         <documentation>
				A "sub-element" in a Complex Template
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDataModel</name>
         <documentation>
				A message to create or overwrite a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataModel</name>
         <documentation>
				A message to retrieve a data model.
				A SOAP Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataModel</name>
         <documentation>
				A message to retrieve a data model.
				No Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteDataModel</name>
         <documentation>
				A message to delete a Data Model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataModelPKs</name>
         <documentation>
				A message to retrieve  a list of data model Primary Keys (their name) using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSCheckSchema</name>
         <documentation>
				A message to check if a an XSD is a valid data model schema
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutBusinessConcept</name>
         <documentation>
				A message to create/overwrite a concept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
            <subtype>WSBusinessConcept</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutBusinessConceptSchema</name>
         <documentation>
				A message to create/overwrite a generic type in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteBusinessConcept</name>
         <documentation>
				A message to delete an existing cncept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConcepts</name>
         <documentation>
				A message to retrieve the list of all concepts in a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptKey</name>
         <documentation>
				A message to retrieve the XSD Key structure (see WSConceptKey) of a concept in data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptKey</name>
         <documentation>
				The XSD key structure of a concept in a data model (see WSGetBusinessConceptKey)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataCluster</name>
         <documentation>
				A data cluster.
				name: the unique name (primary key) of the data cluster
				description: an optional description of the data cluster
				vocabulary: a list of all the words of 3 letters of more composing the vocabulary of items stored in the data cluster; the list is collected during insertions and is used by the spell checker.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterPK</name>
         <documentation>
				The primary key of a data cluster (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterArray</name>
         <documentation>
				An array of data cluster instances
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataClusterPKArray</name>
         <documentation>
				An array of data cluster primary keys
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDBDataCluster</name>
         <documentation>
				?
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutDataCluster</name>
         <documentation>
				A message to create/overwrite a data-cluster
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will return null if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDBDataCluster</name>
         <documentation>
				A message to retrieve a DB (?) data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDeleteDataCluster</name>
         <documentation>
				A message to delete a data cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataClusterPKs</name>
         <documentation>
				A message list Data Custer Priary Keys (their name) using a regular expression on their names.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetConceptsInDataCluster</name>
         <documentation>
				A message to retrieve the list of concepts actually stored in a Data Cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereCondition</name>
         <documentation>
				The object used to write where conditions in queries.
				leftPath: the condition left xPath to test
				operator: the test operator; see WSWhereOperator
				rightValueOrPath: the condition right xPath or value to test against the left path
				stringPredicate: the condition predicate that further specifies the test for the CONTAINS operator
				spellCheck: whether to run a spell check on the right hand value.
			</documentation>
         <subtypes>
            <subtype>WSWhereOperator</subtype>
            <subtype>WSStringPredicate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereAnd</name>
         <documentation>
				Links multiple conditions using an AND
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereOr</name>
         <documentation>
				Links multiple conditions using an OR
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereItem</name>
         <documentation>
				The "SuperClass" of an And or Or or WhereCondition which is passed to queries.
				To use, specify either a whereCondition, or a whereAnd or a whereOr.
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
            <subtype>WSWhereAnd</subtype>
            <subtype>WSWhereOr</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSView</name>
         <documentation>
				A filter on items that specify the xPaths to extract, the conditions that the items must meet and the xPaths that can be searched when the user imposes additional search conditions.
				name: the name of the view
				description: the description of the view
				viewableBusinessElements: the visible xPaths (starting with the concept name) of the items found in the view
				whereConditions: the conditions that all the items must meet
				searchableBusinessElements: the xPaths (starting with the concept name) of the elements that can be seached to further refine the result
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewPK</name>
         <documentation>
				The primary key of a view (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSViewPKArray</name>
         <documentation>
				An array of view primary keys
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewArray</name>
         <documentation>
				An array of views
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutView</name>
         <documentation>
				A message to create/update a view. see WSView
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetView</name>
         <documentation>
				A message to retrieve a viwe
				Throws a SOAP exception if the view dooes not exist
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsView</name>
         <documentation>
				A message to test if a viw exists.
				Returns the view if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteView</name>
         <documentation>
				A message to delete an existing view
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexViews</name>
         <documentation>
				A message to retrieve a list of views using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetViewPKs</name>
         <documentation>
				A essage to retrieve a list of view primary keys using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSItem</name>
         <documentation>
				An item.
				wsDataClusterPK: the primary key of the cluster where the item is stored
				dataModelName: the name of the data model used to validate the item
				dataModelRevision: the revision of the data model used to validate the item
				conceptName: the concept of the item
				ids: a list of values making the primary key of the item
				insertionTime: the time in millis at whch the item was last stored (e.g. created or overwritten)
				content: an xml string of the item content
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPK</name>
         <documentation>
				An item Primary Key
				wsDataClusterPK: the primary key of the data cluster where the item is stored
				conceptName: the name of the concept
				ids: a list of values unique for that concept in that cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKArray</name>
         <documentation>
				An array of items primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConceptPK</name>
         <documentation>
				The unique key of a concept
				Used in conjunction with WSGetBusinessConceptValue
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetItem</name>
         <documentation>
				A message to retrieve an item using its primary key
				Throw an exception if not found.
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsItem</name>
         <documentation>
				A message to tests if an item exists.
				Returns the item if found, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItems</name>
         <documentation>
				A message to retieve a list of items using conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemPKsByCriteria</name>
         <documentation>
				A message to retieve a list of items using keywords, storing dates and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				contentKeywords: a list of words, separated by spaces, that must be found in the content of the items
				keysKeywords: a list of words, separated by spaces, that must be found in the primary key of the items
				fromDate: the lower date in millis at which the items were last stored
				fromDate: the upper date in millis at which the items wer last stored
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKsByCriteriaResponse</name>
         <documentation>
				The return message of WSGetItemPKsByCriteria containing the storing dates and primary keys of the matching items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptValue</name>
         <documentation>
				A message to retrieve the value of a concept base on the data cluster and key
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSBusinessConceptPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetFullPathValues</name>
         <documentation>
				A message to retieve all the values for an item xPath matching certain conditions
				wsDataClusterPK: the data cluster
				fullPath; the xPath to seach starting with the concept name
				whereItem: the conditions
				spellThreshold: the spell check to perform. -1 to deactivate
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewSearch</name>
         <documentation>
				A message to retrieve items through a view using conditions and paging
				wsdataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSXPathsSearch</name>
         <documentation>
				A message to retrieve elements of items using xPaths and optionally conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				pivotPath: the pivot xPath against which all the xPaths in viewablePaths are factored. If nil, the first viewablePath is used. The xPath must be full, strating with the concept name.
				viewablePaths: the list of xPaths for which data is retrieved. These paths are refactored against the pivot xPath. The xPaths must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemsPivotIndex</name>
         <documentation>
				Get items hierarchical tree according to pivots
			</documentation>
         <subtypes>
            <subtype>WSLinkedHashMap</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSCount</name>
         <documentation>
				A message to count the number of values at an xPath on items matching optional conditions.
				wsDataClusterPK: the primary key of the cluster where the items are stored
				countPath: the xPath valus which are counted. The xPath must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSQuickSearch</name>
         <documentation>
				A message to retrieve items through a view using keywords and paging and paging
				wsDataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				searchValue: the keywords searched in the item content sparated by spaces.
				matchAllWords: if set to true, the items must math all words in searchValue
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItem</name>
         <documentation>
				A message to create/overwrite an item
				wsDataClusterPK: the primary key of the cluster where the item is stored
				xmlString: the XML content of the item
				wsDataModelPK: the primary key of the data model used to validate the item.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSUpdateReportItemPOJO</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSUpdateReportItemArray</name>
         <documentation>
				???
			</documentation>
         <subtypes>
            <subtype>WSUpdateReportItemPOJO</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItemWithReport</name>
         <documentation>
				Puts an item in the xml storage with update report
			</documentation>
         <subtypes>
            <subtype>WSPutItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItem</name>
         <documentation>
				A message to delete an item using its primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItems</name>
         <documentation>
				A message to delete a list of items of a specified concept and optionally matching certain conditions
				wsDataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDropItem</name>
         <documentation>
				Drop an item to items trash
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRunQuery</name>
         <documentation>
				A message to directly run an xQuery on the XML DB.
				dataClusterPK: the primary key of the data cluster. The primary key can be nil to run cross-cluster queries
				revisionID: the revision ID of the DataCluster: nil, for the HEAD.
				query: the xQuery
				parameters: a list of parmaters that will replace the {n} in the query, where n is the nth parameter.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBase64KeyValue</name>
         <documentation>
				An object used to pass data to a connector in a connector interaction - see WSConnectorInteraction
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSConnectorInteraction</name>
         <documentation>
				A message to interact with a connector
				JNDIName: the JNDI name of the connector
				function: one of the enumerated interactions - see WSConnectorFunction
				parameters: parameters to pass to the connector - see WSBase64KeyValue
			</documentation>
         <subtypes>
            <subtype>WSConnectorFunction</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConnectorInteractionResponse</name>
         <documentation>
				The response to an interaction with a connector - see WSConnectorInteraction
			</documentation>
         <subtypes>
            <subtype>WSConnectorResponseCode</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRuleExpression</name>
         <documentation>
				A conditional expression in a routing rule
				name: the name of the condition
				xPath: the xPath applied to the item for the left hand value
				operator: one of the possible operators - see WSRoutingRuleOperator
				value: the right hand value
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleOperator</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRule</name>
         <documentation>
				A routing rule
				name: the unique name of the rule
				description: an optional description
				synchronous: whether the rule is executed synchronously or asynchronously by the routing engine
				concept: the item concept to match. A '*' matches any concept
				serviceJNDI: the JNDI entry of the service to call when the routing rule matches
				parameters: the parmaters to be passed to the service
				wsRoutingRuleExpressions: conditional consitions that item must meet for the rule to match
				deactive: true to deactivate the rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleExpression</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePK</name>
         <documentation>
				The primary key of a routing rule (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRoutingRuleArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePKArray</name>
         <documentation>
				A list of routing rules
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutRoutingRule</name>
         <documentation>
				A message to create/overwrite a routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRule</name>
         <documentation>
				A message to retrieve a routing rule.
				Throws an Exception if the rule is not found.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRoutingRule</name>
         <documentation>
				A message to check the existence of a routing rule.
				Returns the rule if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRoutingRule</name>
         <documentation>
				A messaage to delete an existing routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRulePKs</name>
         <documentation>
				A message to list the primary keys of routing rules which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServicesList</name>
         <documentation>
				A list of JNDI names belonging to services
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetServicesList</name>
         <documentation>
				A message to return the list of JNDI names of available Services in a WSServicesList
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceAction</name>
         <documentation>
				A message to perform an action on a service
				jndiName: the JNDI name of the service
				wsAction: the action to take on the service - see WSServiceActionCode
				methodName: the service method name to call (a public EJB method)
				methodParameters: a list of parameters to pass to the method
			</documentation>
         <subtypes>
            <subtype>WSServiceActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSServicePutConfiguration</name>
         <documentation>
				A message to store a configuration of a service on the server
				jndiName: the JNDI name of the service
				configuration: the configuration of the service to store on the server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetConfiguration</name>
         <documentation>
				A message to retrieve the configuration of a service
				jndiName: the JNDI name of the service
				otionalParameter: an optional parameter to pass on the call
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetDocument</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedure</name>
         <documentation>
				A stored procedure
				name: the unique name of the procedure
				description: the optional description of the procedure
				procedure: the xQuery
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePK</name>
         <documentation>
				The primary key of a stored procedure (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRegexStoredProcedure</name>
         <documentation>
				A message to retrieve stored procedures which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePKArray</name>
         <documentation>
				A list of stored procedures primary keys
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedure</name>
         <documentation>
				A message to retrieve a stored procedure.
				An exception will be thrown if the stored procedure does not exist.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsStoredProcedure</name>
         <documentation>
				A message to check that a stored procedure exists.
				Will return the stored procedure if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutStoredProcedure</name>
         <documentation>
				A message to create/overwrite a stored procedure
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedure</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteStoredProcedure</name>
         <documentation>
				A message to delete a stored procedure.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteStoredProcedure</name>
         <documentation>
				A message to execute a stored procedure.
				wsStoredProcedurePK: the primary key of the procedure to execute
				revisionID: the revisionID of the procedure
				wsDataClusterPK: the cluster where the procedure will be executed. If nil, the procedure will use the root of the DB as context.
				parameters: parameters passed to the stored procedure that will replace the {n} where n is the nth parameter
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedurePKs</name>
         <documentation>
				A message to retrieved stored procedure primary keys which names match a particular regex
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenu</name>
         <documentation>
				A menu.
				name: the unique name of the menu
				description: the description of the menu
				menuEntries: a list of entries tha make up the menu - see WSMenuEntry
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuEntry</name>
         <documentation>
				An entry in a menu (a menu item).
				id: the unique id of the entry
				descriptions: a list of localized string made of their label and respective two letter code language
				context:  the context of the webapp that should be launched when clicking on the entry
				application: the name of the application within the context that should be launched when clicking on the entry
				subMenu: a list of nested menu entries that make up the sub menus
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuPK</name>
         <documentation>
				The primary key of a menu (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenuPKArray</name>
         <documentation>
				A list of menu primary keys
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenu</name>
         <documentation>
				A message to retrieve an existing menu.
				Throws a SOAP Exception if the menu is not found
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsMenu</name>
         <documentation>
				A message to check that a menu exists
				Returns the menu if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutMenu</name>
         <documentation>
				A message to create/overwrite a menu
			</documentation>
         <subtypes>
            <subtype>WSMenu</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteMenu</name>
         <documentation>
				A message to delete an existing menu
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenuPKs</name>
         <documentation>
				A message to retrieve a list of menu primary keys which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDroppedItem</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPK</name>
         <documentation/>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSFindAllDroppedItemsPKs</name>
         <documentation>
				Find all dropped items in items trash
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLoadDroppedItem</name>
         <documentation>
				Load a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRecoverDroppedItem</name>
         <documentation>
				Recover a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRemoveDroppedItem</name>
         <documentation>
				Remove a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSSynchronizationPlan</name>
         <documentation>
				A Synchronization Plan
				-name: the unique name
				-description: the description of the plan
				-remoteSystemName: the descriptive nale of the remote system
				-remoteSystemURL: the full URL to the Webservices port of the remote system
				-remoteSystemUsername: the username to use on the remote system
				-remoteSystemPassword: the password to use on the remote system
				-tisURL: the URL to the web services port of the TIS server (if any)
				-tisUsername: the username to use on the remote TIS server
				-tisPassword: the password to use on the remote TIS server
				-tisParameters: additional parameters to pass to the TIS server on calls
				-xtentisObjectsSynchronizations: list of the MDM Objects synchronized by this plan
					-xtentisObjectName: the unique Name of the Xtentis Object
					-synhcronizations: the synchronization to make on this Object
						-instancePattern: a pattern on the instance names of the Object
						-localRevisionID: the ID of the local revision to synchronize for this pattern
						-remoteRevisionID: the ID of the remote system revision to synchronize for this pattern
						-algorithm: the conflict resolution algorithm to use
				-itemsSynchronizations: the list if synhchronizations to make on the items
					-conceptName: the name of the concept to synchronize
					-idsPattern: a Pattern of the IDs of the object
					-localCluster: the name ofthe local cluster where the items are found
					-localRevisionID: the local revision ID for these items to synchronize
					-remoteCluster: the name of the remote cluster to syncrhonize
					-remoteRevisionID: the remote system revision ID to use for the items to synchronize
					algorithm: the conflict resolution algorithm to use
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSSynchronizationPlanPK</name>
         <documentation>The primary key of a Synchronization Plan</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSSynchronizationPlanPKArray</name>
         <documentation>A list Synchronization Plan primary keys</documentation>
         <subtypes>
            <subtype>WSSynchronizationPlanPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSSynchronizationPlanStatus</name>
         <documentation>
				The status of a Synchronization Plan
					-wsStatusCode: the status code
					-statusMessage: a plain English status message
					-lastRunStarted: the XSD date at which this plan was last started
					-lastRunStopped: the XSD date at which this plan last stopped running
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationPlanStatusCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSSynchronizationItem</name>
         <documentation>
				A Synchronization Conflict
					-wsItemPK: the primary key of the Item
					-localRevisionID: the local system revision ID for the Item
					-lastRunPlan: tha name of the last Synchronization Plan locally run on this item
					-status: the Conflict status
					-resolvedProjection: the raw XML that is/will be the final synchornized value
					-remoteInstances: the raw XML value for this item on the remote systems
						-remoteSystemName: the unique name of the remote system
						-remoteRevisionID: the remote system revision ID for this Item
						-xml: the raw XML on the remote system
						-lastLocalSynchronizationTime: the date in the remote system time zone at which the item was last synchronized
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
            <subtype>WSSynchronizationItemStatus</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSSynchronizationItemPK</name>
         <documentation>
				The primary key of a Synchronization item conflict
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSSynchronizationItemPKArray</name>
         <documentation>
				A list of Synchronization Conflicts primary keys
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetSynchronizationPlan</name>
         <documentation>
				A message to retrieve a Synchronization Plan
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationPlanPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsSynchronizationPlan</name>
         <documentation>
				A message to check if a Synchronization plan exists
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationPlanPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutSynchronizationPlan</name>
         <documentation>
				A message to create/overwrite a Synchronization Plan
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationPlan</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteSynchronizationPlan</name>
         <documentation>
				A message to delete a Synchronization Plan
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationPlanPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetSynchronizationPlanPKs</name>
         <documentation>
				A message to retrieve Synchronization Plan primary keys
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetObjectsForSynchronizationPlans</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetSynchronizationPlanObjectsAlgorithms</name>
         <documentation>
				A message to retrieve the Synchronization Plan Conflict Resolution Algorithms available for MDM Objects
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetSynchronizationPlanItemsAlgorithms</name>
         <documentation>
				A message to retrieve the Synchronization Plan Conflict Resolution Algorithms available for Items
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSSynchronizationPlanAction</name>
         <documentation>
				A message to execute an action on a Synchronization Plan
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationPlanPK</subtype>
            <subtype>WSSynchronizationPlanActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSSynchronizationGetUnsynchronizedObjectsIDs</name>
         <documentation>
				A message to retrieve the Synchronization Plan non synchronized MDM Objects
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSSynchronizationGetObjectXML</name>
         <documentation>
				A message to retrieve the an MDM Objects raw XML
					-revisionID: the revision ID of the Object
					-objectName: the type of the Object (DataCluster, DataModel,....)
					-uniqueID: the unique ID/name of the object
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSSynchronizationPutObjectXML</name>
         <documentation>
				A message to store the raw XML of an MDM Objects
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSSynchronizationGetUnsynchronizedItemPKs</name>
         <documentation>
				A message to retrieve the Synchronization Plan non synchronized Item PKs
					-revisionID: the revision of the ITem
					-wsDataClusterPOJOPK: the data cluster
					-conceptName: the name of the Item Concept
					-instancePattern: a patter to apply to the ids - joined by dots - of the Item
					-synchronizationPlanName: the optional Synchronization Plan to xhich these items are subjected
					-start: the paging start
					-limit: the max number of Items returned
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSSynchronizationGetItemXML</name>
         <documentation>
				A message to retrieve the raw XML of an Item
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSSynchronizationPutItemXML</name>
         <documentation>
				A message to store the raw XML of an Item
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetSynchronizationItem</name>
         <documentation>
				A message to retrieve the a Synchronization Conflict
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsSynchronizationItem</name>
         <documentation>
				A message to check the existence of a Synchronization Conflict
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutSynchronizationItem</name>
         <documentation>
				A message to create/overwrite a Synchronization Conflict
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteSynchronizationItem</name>
         <documentation>
				A message to delete a Synchronization Conflict
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetSynchronizationItemPKs</name>
         <documentation>
				A message to retrieve a list of Synchronization Conflict primary keys
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSResolveSynchronizationItem</name>
         <documentation>
				A message to resolve a Synchronization Conflict by pushing the merged raw XML
			</documentation>
         <subtypes>
            <subtype>WSSynchronizationItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSStringArray</name>
         <documentation>
				An array of string
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSByteArray</name>
         <documentation>
				An array of bytes
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSInt</name>
         <documentation>
				A return message containing a single Integer
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSI18nString</name>
         <documentation>
				An internationalized/localized String
				-language: the ISO lanaguage code
				-label: the localized label value
			</documentation>
         <subtypes>
            <subtype>WSLanguage</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBoolean</name>
         <documentation>
				A return message containing a single boolean (true/false)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSKey</name>
         <documentation>
				The description of an XSD style key
				The full xPath of a key field is found using the path 'selectorpath/fieldpath' within the element
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLinkedHashMap</name>
         <documentation>
				A generic implementation of a linked hash map
			</documentation>
         <subtypes>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContent</name>
         <documentation>
				A return message containing and array of bytes or an URL pointing to data and the content-type of the data
				url: an url pointing to data (e.g. http://www.mysite.com/data/MyData or file://var/data/myData)
				wsBytes: an array of bytes. url should be nil or non present when used.
				contentType: the content type (e.g. 'application/pdf' or 'text/xml; charset=utf-8')
			</documentation>
         <subtypes>
            <subtype>WSByteArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSTypedContentMap</name>
         <documentation>
				An implementation of an HashMap of TypedCOntent - see WSTypedContent
				key: the key of the typed content in the hashmap
				wsBytes: an array of bytes. url should be nil or non present when used.
				typedCOntent: the WSTypedContent
			</documentation>
         <subtypes>
            <subtype>WSTypedContent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptRevisionMap</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSGetComponentVersion</name>
         <documentation>
				A message to retrieve the version of a component
				component: the type of component -see WSComponent
				id: the id of the component; its JNDI name for services and connectors
			</documentation>
         <subtypes>
            <subtype>WSComponent</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSVersion</name>
         <documentation>
				A return message containing the version of the component - see WSGetComponentVersion
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPing</name>
         <documentation>
				A message to ping an MDM server and see if it is up and running
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLogout</name>
         <documentation/>
         <subtypes/>
      </type>
      <type>
         <name>WSInitData</name>
         <documentation>
				DEPRECATED
				A message to automatically initialize the MDM server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDocumentPK</name>
         <documentation>
				DEPRECATED
				The primary key of a document - kept for calls compatibility; always null in calls
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModel</name>
         <documentation>
				A Data Model core object.
				name: the unique name of the data model
				description: the description of the data model
				xsdSchema: the XSD schema for this data model
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelPK</name>
         <documentation>
				The Primary key of a Data Model: its name
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataModelArray</name>
         <documentation>
				An array of Data Models - see WSDataModel
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataModelPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConcept</name>
         <documentation>
				The description of a concept within a Data Model
				Can be used as a simple alternative to avoid loading a schema xsd:element
				@see putBusinessConceptSchema
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessTemplate</name>
         <documentation>
				The description of a generic type for a concept of sub-element in a model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType or xsd:complexType Element
				@see putBusinessTemplateSchema
				one of simpletemplate or complextemplate must be filled in accordance with type
			</documentation>
         <subtypes>
            <subtype>WSTemplateType</subtype>
            <subtype>WSBusinessSimpleTemplate</subtype>
            <subtype>WSBusinessComplexTemplate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessSimpleTemplate</name>
         <documentation>
				The desription of a simple generic type within a data model
				Can be used as a simple alternative to avoid loading a schema xsd:simpleType Element
				@see putBusinessTemplateSchema
				xsd types MUST be used as xsdbasetype
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSBusinessComplexTemplate</name>
         <documentation>
				The description of a complex type within a data model
			</documentation>
         <subtypes>
            <subtype>WSBusinessElement</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessElement</name>
         <documentation>
				A "sub-element" in a Complex Template
				xsd types can be used as business template
			</documentation>
         <subtypes>
            <subtype>WSKey</subtype>
            <subtype>WSI18nString</subtype>
            <subtype>WSI18nString</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDataModel</name>
         <documentation>
				A message to create or overwrite a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModel</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataModel</name>
         <documentation>
				A message to retrieve a data model.
				A SOAP Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataModel</name>
         <documentation>
				A message to retrieve a data model.
				No Exception is thrown if the data model is not found
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteDataModel</name>
         <documentation>
				A message to delete a Data Model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataModelPKs</name>
         <documentation>
				A message to retrieve  a list of data model Primary Keys (their name) using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSCheckSchema</name>
         <documentation>
				A message to check if a an XSD is a valid data model schema
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutBusinessConcept</name>
         <documentation>
				A message to create/overwrite a concept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
            <subtype>WSBusinessConcept</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutBusinessConceptSchema</name>
         <documentation>
				A message to create/overwrite a generic type in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteBusinessConcept</name>
         <documentation>
				A message to delete an existing cncept in an existing data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConcepts</name>
         <documentation>
				A message to retrieve the list of all concepts in a data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptKey</name>
         <documentation>
				A message to retrieve the XSD Key structure (see WSConceptKey) of a concept in data model
			</documentation>
         <subtypes>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConceptKey</name>
         <documentation>
				The XSD key structure of a concept in a data model (see WSGetBusinessConceptKey)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataCluster</name>
         <documentation>
				A data cluster.
				name: the unique name (primary key) of the data cluster
				description: an optional description of the data cluster
				vocabulary: a list of all the words of 3 letters of more composing the vocabulary of items stored in the data cluster; the list is collected during insertions and is used by the spell checker.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterPK</name>
         <documentation>
				The primary key of a data cluster (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDataClusterArray</name>
         <documentation>
				An array of data cluster instances
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDataClusterPKArray</name>
         <documentation>
				An array of data cluster primary keys
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutDBDataCluster</name>
         <documentation>
				?
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSPutDataCluster</name>
         <documentation>
				A message to create/overwrite a data-cluster
			</documentation>
         <subtypes>
            <subtype>WSDataCluster</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDataCluster</name>
         <documentation>
				A message to retrieve a data cluster
				Will return null if the data cluster is not found
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsDBDataCluster</name>
         <documentation>
				A message to retrieve a DB (?) data cluster
				Will throw a SOAP exception if the data cluster is not found
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDeleteDataCluster</name>
         <documentation>
				A message to delete a data cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexDataClusterPKs</name>
         <documentation>
				A message list Data Custer Priary Keys (their name) using a regular expression on their names.
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetConceptsInDataCluster</name>
         <documentation>
				A message to retrieve the list of concepts actually stored in a Data Cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereCondition</name>
         <documentation>
				The object used to write where conditions in queries.
				leftPath: the condition left xPath to test
				operator: the test operator; see WSWhereOperator
				rightValueOrPath: the condition right xPath or value to test against the left path
				stringPredicate: the condition predicate that further specifies the test for the CONTAINS operator
				spellCheck: whether to run a spell check on the right hand value.
			</documentation>
         <subtypes>
            <subtype>WSWhereOperator</subtype>
            <subtype>WSStringPredicate</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereAnd</name>
         <documentation>
				Links multiple conditions using an AND
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereOr</name>
         <documentation>
				Links multiple conditions using an OR
			</documentation>
         <subtypes>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSWhereItem</name>
         <documentation>
				The "SuperClass" of an And or Or or WhereCondition which is passed to queries.
				To use, specify either a whereCondition, or a whereAnd or a whereOr.
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
            <subtype>WSWhereAnd</subtype>
            <subtype>WSWhereOr</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSView</name>
         <documentation>
				A filter on items that specify the xPaths to extract, the conditions that the items must meet and the xPaths that can be searched when the user imposes additional search conditions.
				name: the name of the view
				description: the description of the view
				viewableBusinessElements: the visible xPaths (starting with the concept name) of the items found in the view
				whereConditions: the conditions that all the items must meet
				searchableBusinessElements: the xPaths (starting with the concept name) of the elements that can be seached to further refine the result
			</documentation>
         <subtypes>
            <subtype>WSWhereCondition</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewPK</name>
         <documentation>
				The primary key of a view (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSViewPKArray</name>
         <documentation>
				An array of view primary keys
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewArray</name>
         <documentation>
				An array of views
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutView</name>
         <documentation>
				A message to create/update a view. see WSView
			</documentation>
         <subtypes>
            <subtype>WSView</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetView</name>
         <documentation>
				A message to retrieve a viwe
				Throws a SOAP exception if the view dooes not exist
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsView</name>
         <documentation>
				A message to test if a viw exists.
				Returns the view if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteView</name>
         <documentation>
				A message to delete an existing view
			</documentation>
         <subtypes>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRegexViews</name>
         <documentation>
				A message to retrieve a list of views using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetViewPKs</name>
         <documentation>
				A essage to retrieve a list of view primary keys using a regular expression on their names
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSItem</name>
         <documentation>
				An item.
				wsDataClusterPK: the primary key of the cluster where the item is stored
				dataModelName: the name of the data model used to validate the item
				dataModelRevision: the revision of the data model used to validate the item
				conceptName: the concept of the item
				ids: a list of values making the primary key of the item
				insertionTime: the time in millis at whch the item was last stored (e.g. created or overwritten)
				content: an xml string of the item content
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPK</name>
         <documentation>
				An item Primary Key
				wsDataClusterPK: the primary key of the data cluster where the item is stored
				conceptName: the name of the concept
				ids: a list of values unique for that concept in that cluster
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKArray</name>
         <documentation>
				An array of items primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBusinessConceptPK</name>
         <documentation>
				The unique key of a concept
				Used in conjunction with WSGetBusinessConceptValue
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetItem</name>
         <documentation>
				A message to retrieve an item using its primary key
				Throw an exception if not found.
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsItem</name>
         <documentation>
				A message to tests if an item exists.
				Returns the item if found, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItems</name>
         <documentation>
				A message to retieve a list of items using conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemPKsByCriteria</name>
         <documentation>
				A message to retieve a list of items using keywords, storing dates and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				contentKeywords: a list of words, separated by spaces, that must be found in the content of the items
				keysKeywords: a list of words, separated by spaces, that must be found in the primary key of the items
				fromDate: the lower date in millis at which the items were last stored
				fromDate: the upper date in millis at which the items wer last stored
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSItemPKsByCriteriaResponse</name>
         <documentation>
				The return message of WSGetItemPKsByCriteria containing the storing dates and primary keys of the matching items
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetBusinessConceptValue</name>
         <documentation>
				A message to retrieve the value of a concept base on the data cluster and key
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSBusinessConceptPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetFullPathValues</name>
         <documentation>
				A message to retieve all the values for an item xPath matching certain conditions
				wsDataClusterPK: the data cluster
				fullPath; the xPath to seach starting with the concept name
				whereItem: the conditions
				spellThreshold: the spell check to perform. -1 to deactivate
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSViewSearch</name>
         <documentation>
				A message to retrieve items through a view using conditions and paging
				wsdataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSXPathsSearch</name>
         <documentation>
				A message to retrieve elements of items using xPaths and optionally conditions and paging.
				wsdataClusterPK: the primary key of the cluster where the items are stored
				pivotPath: the pivot xPath against which all the xPaths in viewablePaths are factored. If nil, the first viewablePath is used. The xPath must be full, strating with the concept name.
				viewablePaths: the list of xPaths for which data is retrieved. These paths are refactored against the pivot xPath. The xPaths must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetItemsPivotIndex</name>
         <documentation>
				Get items hierarchical tree according to pivots
			</documentation>
         <subtypes>
            <subtype>WSLinkedHashMap</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSWhereItem</subtype>
            <subtype>WSStringArray</subtype>
            <subtype>WSStringArray</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSCount</name>
         <documentation>
				A message to count the number of values at an xPath on items matching optional conditions.
				wsDataClusterPK: the primary key of the cluster where the items are stored
				countPath: the xPath valus which are counted. The xPath must be full, strating with the concept name.
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSQuickSearch</name>
         <documentation>
				A message to retrieve items through a view using keywords and paging and paging
				wsDataClusterPK: the primary key of the cluster where the items are stored
				wsViewPK: the primary key of the view
				searchValue: the keywords searched in the item content sparated by spaces.
				matchAllWords: if set to true, the items must math all words in searchValue
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
				skip: the number of matching items to skip at the beginning
				maxItems: the maximum number of items to return. Set to -1 to return all
				orderBy: the xPath of the element to order the results by
				direction: either 'ascending' or "descending'
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSViewPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItem</name>
         <documentation>
				A message to create/overwrite an item
				wsDataClusterPK: the primary key of the cluster where the item is stored
				xmlString: the XML content of the item
				wsDataModelPK: the primary key of the data model used to validate the item.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSDataModelPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSUpdateReportItemPOJO</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSUpdateReportItemArray</name>
         <documentation>
				???
			</documentation>
         <subtypes>
            <subtype>WSUpdateReportItemPOJO</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutItemWithReport</name>
         <documentation>
				Puts an item in the xml storage with update report
			</documentation>
         <subtypes>
            <subtype>WSPutItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItem</name>
         <documentation>
				A message to delete an item using its primary key
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteItems</name>
         <documentation>
				A message to delete a list of items of a specified concept and optionally matching certain conditions
				wsDataClusterPK: the primary key of the cluster where the items are stored
				conceptName: the name of the concept
				whereItem: the conditions that the item must meet
				spellThreshold: the level of spell checking to apply on the values in the conditions. Set to -1 to deactivate
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
            <subtype>WSWhereItem</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDropItem</name>
         <documentation>
				Drop an item to items trash
			</documentation>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRunQuery</name>
         <documentation>
				A message to directly run an xQuery on the XML DB.
				dataClusterPK: the primary key of the data cluster. The primary key can be nil to run cross-cluster queries
				revisionID: the revision ID of the DataCluster: nil, for the HEAD.
				query: the xQuery
				parameters: a list of parmaters that will replace the {n} in the query, where n is the nth parameter.
			</documentation>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSBase64KeyValue</name>
         <documentation>
				An object used to pass data to a connector in a connector interaction - see WSConnectorInteraction
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSConnectorInteraction</name>
         <documentation>
				A message to interact with a connector
				JNDIName: the JNDI name of the connector
				function: one of the enumerated interactions - see WSConnectorFunction
				parameters: parameters to pass to the connector - see WSBase64KeyValue
			</documentation>
         <subtypes>
            <subtype>WSConnectorFunction</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSConnectorInteractionResponse</name>
         <documentation>
				The response to an interaction with a connector - see WSConnectorInteraction
			</documentation>
         <subtypes>
            <subtype>WSConnectorResponseCode</subtype>
            <subtype>WSBase64KeyValue</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRuleExpression</name>
         <documentation>
				A conditional expression in a routing rule
				name: the name of the condition
				xPath: the xPath applied to the item for the left hand value
				operator: one of the possible operators - see WSRoutingRuleOperator
				value: the right hand value
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleOperator</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRule</name>
         <documentation>
				A routing rule
				name: the unique name of the rule
				description: an optional description
				synchronous: whether the rule is executed synchronously or asynchronously by the routing engine
				concept: the item concept to match. A '*' matches any concept
				serviceJNDI: the JNDI entry of the service to call when the routing rule matches
				parameters: the parmaters to be passed to the service
				wsRoutingRuleExpressions: conditional consitions that item must meet for the rule to match
				deactive: true to deactivate the rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRuleExpression</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePK</name>
         <documentation>
				The primary key of a routing rule (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRoutingRuleArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRoutingRulePKArray</name>
         <documentation>
				A list of routing rules
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutRoutingRule</name>
         <documentation>
				A message to create/overwrite a routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRule</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRule</name>
         <documentation>
				A message to retrieve a routing rule.
				Throws an Exception if the rule is not found.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsRoutingRule</name>
         <documentation>
				A message to check the existence of a routing rule.
				Returns the rule if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteRoutingRule</name>
         <documentation>
				A messaage to delete an existing routing rule
			</documentation>
         <subtypes>
            <subtype>WSRoutingRulePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetRoutingRulePKs</name>
         <documentation>
				A message to list the primary keys of routing rules which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServicesList</name>
         <documentation>
				A list of JNDI names belonging to services
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSGetServicesList</name>
         <documentation>
				A message to return the list of JNDI names of available Services in a WSServicesList
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceAction</name>
         <documentation>
				A message to perform an action on a service
				jndiName: the JNDI name of the service
				wsAction: the action to take on the service - see WSServiceActionCode
				methodName: the service method name to call (a public EJB method)
				methodParameters: a list of parameters to pass to the method
			</documentation>
         <subtypes>
            <subtype>WSServiceActionCode</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSServicePutConfiguration</name>
         <documentation>
				A message to store a configuration of a service on the server
				jndiName: the JNDI name of the service
				configuration: the configuration of the service to store on the server
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetConfiguration</name>
         <documentation>
				A message to retrieve the configuration of a service
				jndiName: the JNDI name of the service
				otionalParameter: an optional parameter to pass on the call
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSServiceGetDocument</name>
         <documentation>
				???
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedure</name>
         <documentation>
				A stored procedure
				name: the unique name of the procedure
				description: the optional description of the procedure
				procedure: the xQuery
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePK</name>
         <documentation>
				The primary key of a stored procedure (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSRegexStoredProcedure</name>
         <documentation>
				A message to retrieve stored procedures which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSStoredProcedurePKArray</name>
         <documentation>
				A list of stored procedures primary keys
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedure</name>
         <documentation>
				A message to retrieve a stored procedure.
				An exception will be thrown if the stored procedure does not exist.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsStoredProcedure</name>
         <documentation>
				A message to check that a stored procedure exists.
				Will return the stored procedure if found, nil otherwise.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutStoredProcedure</name>
         <documentation>
				A message to create/overwrite a stored procedure
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedure</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteStoredProcedure</name>
         <documentation>
				A message to delete a stored procedure.
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExecuteStoredProcedure</name>
         <documentation>
				A message to execute a stored procedure.
				wsStoredProcedurePK: the primary key of the procedure to execute
				revisionID: the revisionID of the procedure
				wsDataClusterPK: the cluster where the procedure will be executed. If nil, the procedure will use the root of the DB as context.
				parameters: parameters passed to the stored procedure that will replace the {n} where n is the nth parameter
			</documentation>
         <subtypes>
            <subtype>WSStoredProcedurePK</subtype>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetStoredProcedurePKs</name>
         <documentation>
				A message to retrieved stored procedure primary keys which names match a particular regex
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenu</name>
         <documentation>
				A menu.
				name: the unique name of the menu
				description: the description of the menu
				menuEntries: a list of entries tha make up the menu - see WSMenuEntry
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuEntry</name>
         <documentation>
				An entry in a menu (a menu item).
				id: the unique id of the entry
				descriptions: a list of localized string made of their label and respective two letter code language
				context:  the context of the webapp that should be launched when clicking on the entry
				application: the name of the application within the context that should be launched when clicking on the entry
				subMenu: a list of nested menu entries that make up the sub menus
			</documentation>
         <subtypes>
            <subtype>WSMenuEntry</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSMenuPK</name>
         <documentation>
				The primary key of a menu (its name)
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSMenuPKArray</name>
         <documentation>
				A list of menu primary keys
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenu</name>
         <documentation>
				A message to retrieve an existing menu.
				Throws a SOAP Exception if the menu is not found
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSExistsMenu</name>
         <documentation>
				A message to check that a menu exists
				Returns the menu if it exists, nil otherwise
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSPutMenu</name>
         <documentation>
				A message to create/overwrite a menu
			</documentation>
         <subtypes>
            <subtype>WSMenu</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDeleteMenu</name>
         <documentation>
				A message to delete an existing menu
			</documentation>
         <subtypes>
            <subtype>WSMenuPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSGetMenuPKs</name>
         <documentation>
				A message to retrieve a list of menu primary keys which names match a regular expression
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSDroppedItem</name>
         <documentation/>
         <subtypes>
            <subtype>WSDataClusterPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPK</name>
         <documentation/>
         <subtypes>
            <subtype>WSItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSDroppedItemPKArray</name>
         <documentation/>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSFindAllDroppedItemsPKs</name>
         <documentation>
				Find all dropped items in items trash
			</documentation>
         <subtypes/>
      </type>
      <type>
         <name>WSLoadDroppedItem</name>
         <documentation>
				Load a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRecoverDroppedItem</name>
         <documentation>
				Recover a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
      <type>
         <name>WSRemoveDroppedItem</name>
         <documentation>
				Remove a dropped item from items trash
			</documentation>
         <subtypes>
            <subtype>WSDroppedItemPK</subtype>
         </subtypes>
      </type>
   </types>
</documentation>