// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, construire R40)
// Generated source version: 1.1.2

package com.amalto.workbench.webservices;


import java.util.HashMap;
import java.util.Map;

public class WSSynchronizationActionCode {
    private java.lang.String value;
    private static Map valueMap = new HashMap();
    public static final String _STARTString = "START";
    public static final String _STOPString = "STOP";
    public static final String _STATUSString = "STATUS";
    
    public static final java.lang.String _START = new java.lang.String(_STARTString);
    public static final java.lang.String _STOP = new java.lang.String(_STOPString);
    public static final java.lang.String _STATUS = new java.lang.String(_STATUSString);
    
    public static final WSSynchronizationActionCode START = new WSSynchronizationActionCode(_START);
    public static final WSSynchronizationActionCode STOP = new WSSynchronizationActionCode(_STOP);
    public static final WSSynchronizationActionCode STATUS = new WSSynchronizationActionCode(_STATUS);
    
    protected WSSynchronizationActionCode(java.lang.String value) {
        this.value = value;
        valueMap.put(this.toString(), this);
    }
    
    public java.lang.String getValue() {
        return value;
    }
    
    public static WSSynchronizationActionCode fromValue(java.lang.String value)
        throws java.lang.IllegalStateException {
        if (START.value.equals(value)) {
            return START;
        } else if (STOP.value.equals(value)) {
            return STOP;
        } else if (STATUS.value.equals(value)) {
            return STATUS;
        }
        throw new IllegalArgumentException();
    }
    
    public static WSSynchronizationActionCode fromString(String value)
        throws java.lang.IllegalStateException {
        WSSynchronizationActionCode ret = (WSSynchronizationActionCode)valueMap.get(value);
        if (ret != null) {
            return ret;
        }
        if (value.equals(_STARTString)) {
            return START;
        } else if (value.equals(_STOPString)) {
            return STOP;
        } else if (value.equals(_STATUSString)) {
            return STATUS;
        }
        throw new IllegalArgumentException();
    }
    
    public String toString() {
        return value.toString();
    }
    
    private Object readResolve()
        throws java.io.ObjectStreamException {
        return fromValue(getValue());
    }
    
    public boolean equals(Object obj) {
        if (!(obj instanceof WSSynchronizationActionCode)) {
            return false;
        }
        return ((WSSynchronizationActionCode)obj).value.equals(value);
    }
    
    public int hashCode() {
        return value.hashCode();
    }
}
