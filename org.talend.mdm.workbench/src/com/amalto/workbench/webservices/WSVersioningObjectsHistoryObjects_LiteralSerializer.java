// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation £®1.1.2_01£¨±‡“Î∞Ê R40£©
// Generated source version: 1.1.2

package com.amalto.workbench.webservices;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.xsd.XSDConstants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;

public class WSVersioningObjectsHistoryObjects_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable  {
    private static final QName ns1_type_QNAME = new QName("", "type");
    private static final QName ns3_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns3_myns3_string__java_lang_String_String_Serializer;
    private static final QName ns1_name_QNAME = new QName("", "name");
    private static final QName ns1_wsHistoryEntries_QNAME = new QName("", "wsHistoryEntries");
    private static final QName ns2_WSVersioningHistoryEntry_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningHistoryEntry");
    private CombinedSerializer ns2_myWSVersioningHistoryEntry_LiteralSerializer;
    
    public WSVersioningObjectsHistoryObjects_LiteralSerializer(QName type, String encodingStyle) {
        this(type, encodingStyle, false);
    }
    
    public WSVersioningObjectsHistoryObjects_LiteralSerializer(QName type, String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns3_myns3_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns3_string_TYPE_QNAME);
        ns2_myWSVersioningHistoryEntry_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningHistoryEntry.class, ns2_WSVersioningHistoryEntry_TYPE_QNAME);
    }
    
    public Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        com.amalto.workbench.webservices.WSVersioningObjectsHistoryObjects instance = new com.amalto.workbench.webservices.WSVersioningObjectsHistoryObjects();
        Object member=null;
        QName elementName;
        List values;
        Object value;
        
        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_type_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_type_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setType((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_type_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_name_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_name_QNAME, reader, context);
                instance.setName((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_name_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_wsHistoryEntries_QNAME))) {
            values = new ArrayList();
            for(;;) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_wsHistoryEntries_QNAME))) {
                    value = ns2_myWSVersioningHistoryEntry_LiteralSerializer.deserialize(ns1_wsHistoryEntries_QNAME, reader, context);
                    if (value == null) {
                        throw new DeserializationException("literal.unexpectedNull");
                    }
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new com.amalto.workbench.webservices.WSVersioningHistoryEntry[values.size()];
            member = values.toArray((Object[]) member);
            instance.setWsHistoryEntries((com.amalto.workbench.webservices.WSVersioningHistoryEntry[])member);
        }
        else {
            instance.setWsHistoryEntries(new com.amalto.workbench.webservices.WSVersioningHistoryEntry[0]);
        }
        
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (Object)instance;
    }
    
    public void doSerializeAttributes(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.amalto.workbench.webservices.WSVersioningObjectsHistoryObjects instance = (com.amalto.workbench.webservices.WSVersioningObjectsHistoryObjects)obj;
        
    }
    public void doSerialize(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.amalto.workbench.webservices.WSVersioningObjectsHistoryObjects instance = (com.amalto.workbench.webservices.WSVersioningObjectsHistoryObjects)obj;
        
        if (instance.getType() == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getType(), ns1_type_QNAME, null, writer, context);
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getName(), ns1_name_QNAME, null, writer, context);
        if (instance.getWsHistoryEntries() != null) {
            for (int i = 0; i < instance.getWsHistoryEntries().length; ++i) {
                ns2_myWSVersioningHistoryEntry_LiteralSerializer.serialize(instance.getWsHistoryEntries()[i], ns1_wsHistoryEntries_QNAME, null, writer, context);
            }
        }
    }
}
