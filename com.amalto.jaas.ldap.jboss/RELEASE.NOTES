RELEASE NOTES
This login module performs JAAS authentication using an LDAP and authorization using a User concept holding roles in a cluster

The LDAP can be queried using a direct or indirect query; see below

In server/default/cong/login-config.xml the xtentisSecurity entry must be replaced with

    <application-policy name="xtentisSecurity">
      <authentication>
        <login-module code="com.amalto.jaas.ldap.jboss.XtentisLoginModule" flag="required">

			<!--
				Generic JAAS options
			-->
			<!-- cache passwords -->
			<module-option name="password-stacking">useFirstPass</module-option>
			<!-- unauthenticated user for background processes - do not change -->
		  	<module-option name="unauthenticatedIdentity">anonymous</module-option>
		  	<!-- MD5 hash of the password for the special "admin" user -->
		  	<module-option name="adminPassword">1a254116eb5e70714b0680dfd4d8f7d4</module-option>

		  	<!--
		  		ROLES
		  		Location and Paths on the User Concept holding roles information
		  	-->
		  	<!-- name of the cluster -->
		  	<module-option name="provisioningCluster">PROVISIONING</module-option>
		  	<-- name of the concept -->
		  	<module-option name="userConcept">User</module-option>
		  	<!-- xpath to the elements holding the role names -->
		  	<module-option name="rolesPath">./roles/role</module-option>
		  	<!-- xpath to the element holding the enabled state of the user - true or false -->
		  	<module-option name="enabledPath">./enabled</module-option>
		  	<!-- xpath to the element holding the name of the universe -->
		  	<module-option name="defaultUniversePath">./universe</module-option>

			<!--
				Authentication using LDAP
			-->
			<!-- The LDAP library/factory to use -->
		  	<module-option name="java.naming.factory.initial">com.sun.jndi.ldap.LdapCtxFactory</module-option>
			<!-- The LDAP authentication scheme - one of none, simple or strong -->
		  	<module-option name="java.naming.security.authentication">simple</module-option>
			<!-- The URL - use port 636 for ssl, 10389 otherwise -->
		  	<module-option name="java.naming.provider.url">ldap://localhost:636</module-option>

			<!-- The method used to perform authentication on the ldap
			 		direct: a direct attempt is made using the username to build the DN of the user
			 		indirect: an admin is used to browse the LDAP and find the DN for the given username
			 -->
		  	<module-option name="LdapDirect">true</module-option>

			<!--
				LDAP Direct
			-->
			<!-- The optional prefix to add to the username to build the subject DN in the direct method -->
		  	<module-option name="principalDNPrefix">cn=</module-option>
		  	<!-- The optional suffix to add to the username to build the subject DN in the direct method-->
		  	<module-option name="principalDNSuffix">,ou=people,o=sevenSeas</module-option>

			<!--
				LDAP Indirect
			-->
		  	<!-- The DN of the admin used to browse the LDAP in the indirect method -->
		  	<module-option name="LdapAdminDN"></module-option>
		  	<!-- The password of the admin used to browse the LDAP in the indirect method -->
		  	<module-option name="LdapAdminPassword"></module-option>
		  	<!-- The base context to search n the LDAP -->
		  	<module-option name="searchBase">o=sevenSeas</module-option>
		  	<!-- A filter expression to perform the search - {0} is replaced with the username -->
		  	<module-option name="searchFilter">(&(objectClass=inetOrgPerson)(uid={0}))</module-option>

        </login-module>

       <!-- This is required to include the ClientLoginModule propagation -->
        <login-module code="org.jboss.security.ClientLoginModule" flag="required" />

      </authentication>
    </application-policy>
 
The Jar should go in sever/default/lib

2.0.0 NOT RELEASED
Completely refactored for core-2.20

1.x
For core < 2.20
