<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:xades="http://uri.etsi.org/01903/v1.1.1#" attributeFormDefault="unqualified" blockDefault="" elementFormDefault="qualified" finalDefault=""
>

    <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.w3.org/2001/xml.xsd"/>
  <xs:import namespace="http://uri.etsi.org/01903/v1.1.1#" schemaLocation="http://uri.etsi.org/01903/v1.1.1#/xades.xsd"/>
 <!--
  <xs:import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="zerzerhttp://www.w3.org/2000/09/xmldsig#/ds.xsd"/>
  -->

  <xs:simpleType name="date">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="datetime.tz">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- Time zone is required -->
  <xs:simpleType name="r8">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="number">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!--
    No limit on number of digits, unlike
    %r8;
  -->
  <xs:simpleType name="string">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="time.tz">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- Time zone is required -->
  <!-- ISO8601 duration http://www.w3.org/TR/xmlschema-2/#duration -->
  <xs:simpleType name="ui8">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="uint">
    <xs:restriction base="ui8"/>
  </xs:simpleType>
  <!-- Unique to this specification -->
  <xs:simpleType name="uri">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- Higher-level Types -->
  <!--
    NOTE: The following is a temporary *hack* to allow empty values for
    some attributes with these types.  The nmtoken entity should resolve to
    NMTOKEN.
  -->
  <xs:simpleType name="nmtoken">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- Any combination of XML name chars. -->
  <!-- ISO 639 Language Code -->
  <xs:simpleType name="isoCountryCode">
    <xs:restriction base="nmtoken"/>
  </xs:simpleType>
  <!-- ISO 3166 Country Code -->
  <xs:simpleType name="isoCurrencyCode">
    <xs:restriction base="nmtoken"/>
  </xs:simpleType>
  <!-- ISO 4217 Currency Code -->
  <xs:simpleType name="xmlLangCode">
    <xs:restriction base="nmtoken"/>
  </xs:simpleType>
  <!--
    Language code as defined by XML
    recommendation: Language and
    country.
  -->
  <xs:simpleType name="URL">
    <xs:restriction base="uri"/>
  </xs:simpleType>
  <xs:element abstract="false" name="Name" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="Name.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="Name.attlist">
    <xs:attribute ref="xml:lang" use="required"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="Extrinsic" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="any">
          <xs:attributeGroup ref="Extrinsic.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Extrinsic.attlist">
    <xs:attribute name="name" type="string" use="required"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="Description" nillable="false">
    <xs:complexType mixed="true">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="ShortName"/>
      </xs:sequence>
      <xs:attributeGroup ref="Description.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Description.attlist">
    <xs:attribute ref="xml:lang" use="required"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="ShortName" nillable="false" type="xs:string"/>
  <xs:element abstract="false" name="CountryCode" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="CountryCode.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- uint -->
  <xs:attributeGroup name="CountryCode.attlist">
    <xs:attribute name="isoCountryCode" type="isoCountryCode" use="required"/>
  </xs:attributeGroup>
  <!-- The areacode or city code within a CountryCode. -->
  <xs:element abstract="false" name="AreaOrCityCode" nillable="false" type="xs:string"/>
  <!-- uint -->
  <!-- The local number part of a telephone number. -->
  <xs:element abstract="false" name="Number" nillable="false" type="xs:string"/>
  <!-- string -->
  <!--
    An extension within relative to the Number element. This element has no
    meaning without an associated Number element.
  -->
  <xs:element abstract="false" name="Extension" nillable="false" type="xs:string"/>
  <!-- uint -->
  <!-- TelephoneNumber represents international telephone numbers. -->
  <xs:element abstract="false" name="TelephoneNumber" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="CountryCode"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="AreaOrCityCode"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Number"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Extension"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element abstract="false" name="Phone" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="TelephoneNumber"/>
      </xs:sequence>
      <xs:attributeGroup ref="Phone.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Phone.attlist">
    <xs:attribute name="name" type="string" use="optional"/>
  </xs:attributeGroup>
  <!-- Fax number. -->
  <xs:element abstract="false" name="Fax" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="TelephoneNumber"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="URL"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Email"/>
      </xs:choice>
      <xs:attributeGroup ref="Fax.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Fax.attlist">
    <xs:attribute name="name" type="string" use="optional"/>
  </xs:attributeGroup>
  <!-- Addressing Elements -->
  <!-- URL. A string which represents a URL -->
  <xs:element abstract="false" name="URL" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="URL.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- URL -->
  <xs:attributeGroup name="URL.attlist">
    <xs:attribute name="name" type="string" use="optional"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="Email" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="Email.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="Email.attlist">
    <xs:attribute name="name" type="string" use="optional"/>
    <xs:attribute name="preferredLang" type="xmlLangCode" use="optional"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="Contact" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Name"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="PostalAddress"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Email"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Phone"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Fax"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="URL"/>
      </xs:sequence>
      <xs:attributeGroup ref="Contact.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Contact.attlist">
    <xs:attribute name="role" type="xs:NMTOKEN" use="optional"/>
    <xs:attribute name="addressID" type="string" use="optional"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="DeliverTo" nillable="false" type="xs:string"/>
  <!-- string -->
  <!-- Street is a single line of an Address' location. -->
  <xs:element abstract="false" name="Street" nillable="false" type="xs:string"/>
  <!-- string -->
  <!-- City is the name of the city in an Address' location. -->
  <xs:element abstract="false" name="City" nillable="false" type="xs:string"/>
  <!-- string -->
  <!-- State is an optional state identifier in an Address' location. -->
  <xs:element abstract="false" name="State" nillable="false" type="xs:string"/>
  <!-- string -->
  <!-- PostalCode (I have no idea how to describe it) -->
  <xs:element abstract="false" name="PostalCode" nillable="false" type="xs:string"/>
  <xs:element abstract="false" name="Country" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="Country.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="Country.attlist">
    <xs:attribute name="isoCountryCode" type="isoCountryCode" use="required"/>
  </xs:attributeGroup>
  <!-- PostalAddress is a real-world location for a business or person. -->
  <xs:element abstract="false" name="PostalAddress" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="DeliverTo"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Street"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="City"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="State"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="PostalCode"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Country"/>
      </xs:sequence>
      <xs:attributeGroup ref="PostalAddress.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="PostalAddress.attlist">
    <xs:attribute name="name" type="string" use="optional"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="Address" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Name"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="PostalAddress"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Email"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Phone"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Fax"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="URL"/>
      </xs:sequence>
      <xs:attributeGroup ref="Address.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Address.attlist">
    <xs:attribute name="isoCountryCode" type="isoCountryCode" use="optional"/>
    <xs:attribute name="addressID" type="string" use="optional"/>
  </xs:attributeGroup>
  <xs:complexType abstract="false" mixed="false" name="Money.element">
    <xs:sequence maxOccurs="1" minOccurs="1">
      <xs:element maxOccurs="1" minOccurs="1"   ref="Money"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element abstract="false" name="Money" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="Money.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- number -->
  <xs:attributeGroup name="Money.attlist">
    <xs:attribute name="currency" type="isoCurrencyCode" use="required"/>
    <xs:attribute name="alternateAmount" type="number" use="optional"/>
    <xs:attribute name="alternateCurrency" type="isoCurrencyCode" use="optional"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="Comments" nillable="false">
    <xs:complexType mixed="true">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Attachment"/>
      </xs:sequence>
      <xs:attributeGroup ref="Comments.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Comments.attlist">
    <xs:attribute ref="xml:lang" use="optional"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="Attachment" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="URL"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element abstract="false" name="AttachmentReference" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Name"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Description"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="InternalID"/>
      </xs:sequence>
      <xs:attributeGroup ref="AttachmentReference.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="AttachmentReference.attlist">
    <xs:attribute name="length" type="uint" use="optional"/>
  </xs:attributeGroup>
  <!-- Price per unit of item. -->
  <xs:element abstract="false" name="UnitPrice" nillable="false" type="Money.element"/>
  <xs:element abstract="false" name="DocumentReference" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="DocumentReference.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="DocumentReference.attlist">
    <xs:attribute name="payloadID" type="string" use="required"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="InternalID" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="InternalID.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="InternalID.attlist">
    <xs:attribute name="domain" type="string" use="optional"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="OriginatorCookie" nillable="false" type="xs:string"/>
  <xs:element abstract="false" name="BrowserFormPost" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="URL"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    SelectedService - Identification of a service offered by this provider
    and requested in this transaction.  Used only in the originating
    Request.
  -->
  <xs:element abstract="false" name="SelectedService" nillable="false" type="xs:string"/>
  <xs:complexType abstract="false" mixed="false" name="StartPage.element">
    <xs:sequence maxOccurs="1" minOccurs="1">
      <xs:element maxOccurs="1" minOccurs="1"   ref="StartPage"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element abstract="false" name="StartPage" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="URL"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element abstract="false" name="ReturnData" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="ReturnValue"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Name"/>
      </xs:sequence>
      <xs:attributeGroup ref="ReturnData.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ReturnData.attlist">
    <xs:attribute name="name" type="string" use="optional"/>
  </xs:attributeGroup>
  <xs:element abstract="false" name="ReturnValue" nillable="false" type="xs:string"/>
  <!--
    Defines a time range. The start and end can be unbounded
    startDate
        The starting date of the time range
    endDate
        The ending date of the range
  -->
  <xs:element abstract="false" name="TimeRange" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="TimeRange.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="TimeRange.attlist">
    <xs:attribute name="startDate" type="datetime.tz" use="optional"/>
    <xs:attribute name="endDate" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!--
    Defines a period in time.
    
    startDate
        The starting date of the period
    
    endDate
        The ending date of the period
  -->
  <xs:element abstract="false" name="Period" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="Period.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Period.attlist">
    <xs:attribute name="startDate" type="datetime.tz" use="required"/>
    <xs:attribute name="endDate" type="datetime.tz" use="required"/>
  </xs:attributeGroup>
  <!-- Must be a UN/CEFACT (Recommendation 20) unit of measure code. -->
  <xs:element abstract="false" name="UnitOfMeasure" nillable="false" type="xs:string"/>
  <!-- nmtoken -->
  <!--
    Defines a reference to a term which is defined
    in another document.
    
    termName
        The name of the ID attribute containing the term.
    
    term
        The value of that attribute (i.e., the term itself).
    
  -->
  <xs:element abstract="false" name="TermReference" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="TermReference.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="TermReference.attlist">
    <xs:attribute name="termName" type="string" use="required"/>
    <xs:attribute name="term" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    Defines an optionally named monetary rate at which goods or services are
    charged or paid. 
    
    Money
        The amount of Money per UnitOfMeasure to be charged or paid. 
    
    UnitOfMeasure
        Unit of measure.
    
    TermReference 
        Identifies the definition of this UnitRate 
        (found, for example,  in contracts, master agreements, and other documents
        which may or may not be cXML documents).
  -->
  <xs:element abstract="false" name="UnitRate" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="Money.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="1"   ref="UnitOfMeasure"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="TermReference"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/modules/Version.mod#4 $
  -->
  <!--
    Another top-level entity used in Transport.mod.  Defined here to allow
    easy updates to the release version of cXML without opening
    Transport.mod.  This should also provide an easy file to search for
    the current release version string.
  -->
  <!--
    cxml.version
    Current default string for the cXML@version attribute.  Corresponds to
    the final directory of the SYSTEM identifier used in all up-to-date
    cXML documents.
    For easy parsing of this file, do not remove whitespace surrounding the
    actual version string.
  -->
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/Supplier.mod#1 $
  -->
  <!--
    Supplier of goods and services. Includes a list of SupplierIDs which
    identify the Supplier.
    
    corporateURL
        URL to web site about the supplier
    
    storeFrontURL
        URL to web site where a user can shop or browse
  -->
  <xs:element abstract="false" name="Supplier" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Name"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Comments"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="SupplierID"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="SupplierLocation"/>
      </xs:sequence>
      <xs:attributeGroup ref="Supplier.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Supplier.attlist">
    <xs:attribute name="corporateURL" type="URL" use="optional"/>
    <xs:attribute name="storeFrontURL" type="URL" use="optional"/>
  </xs:attributeGroup>
  <!--
    One of the locations for a supplier. Supplier location is
    generally a physical location.
  -->
  <xs:element abstract="false" name="SupplierLocation" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Address"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="OrderMethods"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    OrderMethods is the list of methods by which one can order
    from a supplier. The contact element is the technical contact
    who should be able to assist with order processing issues.
    The list is to be ordered by supplier preference, the first
    element having the highest degree of preference.
  -->
  <xs:element abstract="false" name="OrderMethods" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="OrderMethod"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Contact"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    OrderMethod is a method for ordering. It is comprised of a
    target address for the order and the protocol expected by
    the address.
  -->
  <xs:element abstract="false" name="OrderMethod" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="OrderTarget"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="OrderProtocol"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    OrderTarget represents an address to which orders can be
    sent.
  -->
  <xs:element abstract="false" name="OrderTarget" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Phone"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Email"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Fax"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="URL"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="OtherOrderTarget"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    OrderProtocol is the communication method to be used when
    communicating an order to a supplier. An example would be "cXML".
  -->
  <xs:element abstract="false" name="OrderProtocol" nillable="false" type="xs:string"/>
  <!-- string -->
  <!--
    OtherOrderTarget represents an address which is not enumerated by
    default in the OrderTarget Element. This may contain address targets
    beyond the ability of this document to describe.
    
    name
        Optional name for target.
  -->
  <xs:element abstract="false" name="OtherOrderTarget" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="any">
          <xs:attributeGroup ref="OtherOrderTarget.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="OtherOrderTarget.attlist">
    <xs:attribute name="name" type="string" use="optional"/>
  </xs:attributeGroup>
  <!--
    Definition of a supplier id.  A supplier id is a (domain, value)
    pair so that suppliers have the flexibility to define their id's
    according to an arbitrary convention (e.g., (DUNS, 12345),
    (TaxID, 88888888)).
    
    domain
        the domain of the id
  -->
  <xs:element abstract="false" name="SupplierID" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="SupplierID.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="SupplierID.attlist">
    <xs:attribute name="domain" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    Defines a List of Suppliers that might be associated with a quote Item. Used in
    ItemOut. 
  -->
  <xs:element abstract="false" name="SupplierList" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Supplier"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/modules/Item.mod#6 $
  -->
  <!-- ID with which the item's manufacturer identifies the item. -->
  <xs:element abstract="false" name="ManufacturerPartID" nillable="false" type="xs:string"/>
  <!-- string -->
  <!--
    Name of the item's manufacturer.
    
    xml:lang
        The language in which the ManufacturerName is written.  This
    attribute will be required in a future version of cXML.  (Leaving it
    out is deprecated.)
  -->
  <xs:element abstract="false" name="ManufacturerName" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="ManufacturerName.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="ManufacturerName.attlist">
    <xs:attribute ref="xml:lang" use="optional"/>
  </xs:attributeGroup>
  <!--
    Classification is used to group items into similar categories.
    
    domain
        "name" of classification, ie., SPSC
  -->
  <xs:element abstract="false" name="Classification" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="Classification.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="Classification.attlist">
    <xs:attribute name="domain" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    LeadTime specifies, in days, the amount of time required to
    receive the item.
  -->
  <xs:element abstract="false" name="LeadTime" nillable="false" type="xs:string"/>
  <xs:element abstract="false" name="SupplierPartID" nillable="false" type="xs:string"/>
  <!-- string -->
  <xs:element abstract="false" name="SupplierPartAuxiliaryID" nillable="false" type="any"/>
  <!--
    A unique identification of an item. SupplierID is not required since
    ItemIDs never travel alone.
  -->
  <xs:complexType abstract="false" mixed="false" name="ItemID.element">
    <xs:sequence maxOccurs="1" minOccurs="1">
      <xs:element maxOccurs="1" minOccurs="1"   ref="ItemID"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element abstract="false" name="ItemID" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="SupplierPartID"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="SupplierPartAuxiliaryID"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    ItemDetail contains detailed information about an item. All the data that
    a user would want to see about an item instead of the bare essentials
    that are represented in the ItemID.
    
    LeadTime
        time in days to receive the item
  -->
  <xs:element abstract="false" name="ItemDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="UnitPrice"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Description"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="UnitOfMeasure"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Classification"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="ManufacturerPartID"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="ManufacturerName"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="URL"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="LeadTime"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Extrinsic"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id$
  -->
  <!--
    This element captures travel information.  It could be one of four
    types: air, car rental, hotel or rail.
    
    AirDetail
        Air travel detail.
    
    CarRentalDetail
        Car rental detail.
    
    HotelDetail
        Hotel detail.
    
    RailDetail
        Rail detail.
    
    PolicyViolation
        List of policy violations (if any) associated with this
        travel line item.
    
    Comments
        Top level comments for this travel line item (if any).  This
        is not the policy violation comment but a top level comment
        given by the user for this travel line item while in Travel
        Booking Provider's web site.
    
    TermsAndConditions
        List of Terms and conditions (if any) associated with this
        travel line item.
    
    confirmationNumber
        A unique confirmation number that is useful to both the
        traveler and the vendor who is providing the service for this
        travel line item.  For example, hotel reservation number or
        e-ticket number from the airline.
    
    pnrLocator
        Passenger Name Record (PNR) Locator that is useful to the
        Travel Booking Provider.
    
    quoteExpirationTime
        Date and time that this quote will expire.  This value is
        normally supplied in the PunchoutOrderMessage.  If no value is
        supplied, it is assumed that there is no expiration time or
        date for this quote.
  -->
  <xs:element abstract="false" name="TravelDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:choice maxOccurs="1" minOccurs="1">
          <xs:element maxOccurs="1" minOccurs="1"   ref="AirDetail"/>
          <xs:element maxOccurs="1" minOccurs="1"   ref="CarRentalDetail"/>
          <xs:element maxOccurs="1" minOccurs="1"   ref="HotelDetail"/>
          <xs:element maxOccurs="1" minOccurs="1"   ref="RailDetail"/>
        </xs:choice>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="PolicyViolation"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Comments"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="TermsAndConditions"/>
      </xs:sequence>
      <xs:attributeGroup ref="TravelDetail.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="TravelDetail.attlist">
    <xs:attribute name="confirmationNumber" type="string" use="required"/>
    <xs:attribute name="pnrLocator" type="string" use="optional"/>
    <xs:attribute name="quoteExpirationTime" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!-- Air -->
  <!--
    Air detail information for the air trip.
    
    TripType
        Round Trip, One Way, or Multi Leg
    
    AirLeg
        Different air leg that makes up this air detail.
        For example a round trip from SFO -> TPE with no stops
        will have two air legs.  One air leg from SFO -> TPE
        and another from TPE -> SFO.
    
    AvailablePrice
        Other available airfare prices that the user did not pick.
    
    Penalty
        Penalty amount (if any).  This is normally due to changes or
        cancelation of the ticket.
  -->
  <xs:element abstract="false" name="AirDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="TripType"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="AirLeg"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="AvailablePrice"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Penalty"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Define a single leg in the air travel.
    
    Vendor
        Airline vendor name and information.
    
    AirLegOrigin
        Originating airport for this air leg.
    
    AirLegDestination
        Destination airport for this air leg.
    
    BookingClassCode
        Airline booking class code.  This is the de-facto
        airline standard.  For example,
    
        F, FN, P, R, A      - first class
        C, CN, D, J, I, Z   - business class.
        Y, YN, B, BN, M, H, V, VN, O, Q, QN, S, 
    	K, KN, L, U, T, W - coach class.
    
    Rate
        Rate for this particular air leg.  If specify, the total
        of all the rate for the different air legs must add up
        to the total the line item level.
    
    Meal
        Meal information for this air leg (if any)
    
    travelSegment
        Textual information to identify this travel segment.
        This information is specific to the Travel Booking Provider.
    
    departureTime
        Departure date and time for this air leg
    
    arrivalTime
        Arrival date and time for this air leg
    
    flightNumber
        Flight number for this air leg
    
    seatNumber
        Seat number for this air leg
    
    seatType
    	Seat type
    	    aisle       - Aisle
    	    window      - Window
    	    middle      - Middle
    
    upgrade
        Is this ticket an upgrade?
    
    stops
        The number of stop for this air leg.
        0 if it is a direct flight.  If no information is supplied
        it is defaulted to 0.
    
    equipment
        The plane equipment information for this air leg
  -->
  <xs:element abstract="false" name="AirLeg" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Vendor"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="AirLegOrigin"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="AirLegDestination"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="BookingClassCode"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Rate"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Meal"/>
      </xs:sequence>
      <xs:attributeGroup ref="AirLeg.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="AirLeg.attlist">
    <xs:attribute name="travelSegment" type="string" use="required"/>
    <xs:attribute name="departureTime" type="datetime.tz" use="required"/>
    <xs:attribute name="arrivalTime" type="datetime.tz" use="required"/>
    <xs:attribute name="flightNumber" type="string" use="required"/>
    <xs:attribute name="seatNumber" type="string" use="optional"/>
    <xs:attribute name="seatType" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="window"/>
          <xs:enumeration value="aisle"/>
          <xs:enumeration value="middle"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="upgrade" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="stops" type="r8" use="optional"/>
    <xs:attribute name="equipment" type="string" use="optional"/>
  </xs:attributeGroup>
  <!--
    Originating airport for this Air Leg.
    
    Airport
        Originating airport
  -->
  <xs:element abstract="false" name="AirLegOrigin" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Airport"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Destination airport for this Air Leg.
    
    Airport
        Destination airport
  -->
  <xs:element abstract="false" name="AirLegDestination" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Airport"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Airport information that includes the iso airport code
    
    Address
        Physical adress of the airport.
    
    airportCode
        The 3 letter IATA airport code.
  -->
  <xs:element abstract="false" name="Airport" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="Address"/>
      </xs:sequence>
      <xs:attributeGroup ref="Airport.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Airport.attlist">
    <xs:attribute name="airportCode" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    -
    Meal information used by air, hotel and rail.
    
    BookingClassCode
        Code for the meal.  For example, airlines use
    	    B     - Breakfast
    	C     - Complimentary liquor
    	D     - Dinner
    	F     - Food for purchase
    	G     - Food and beverage for purchase
    	H     - Hot meal
    	K     - Continental breakfast
    	L     - Lunch
    	M     - Meal
    	N     - No meal service 
    	O     - Cold meal
    	P     - Liquor for purchase
    	R     - Refreshments
    	S     - Snack or brunch
    	V     - Refreshments for purchase
    
    Description
        Textual description of the meal, including any special needs
        such as vegetarian or dairy-free.
  -->
  <xs:element abstract="false" name="Meal" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="BookingClassCode"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Description"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- Car Rental -->
  <!--
    Car rental information.
    
    Vendor
        Car rental vendor information.
    
    CarRentalPickup
        Pickup location for the rental car.
    
    CarRentalDropoff
        Drop off location for the rental car.
    
    BookingClassCode
        4 letter code for car.
    
        1st Letter - M (Mini), E (Economy), C (Compact), S (Standard),
                     I (Intermediate), F (Full size), P (Premium), L (Luxury)
                     V (MiniVan), X (Special)
        2nd Letter - B (2 door), C (2/4 door), D (4 door), T (Convertible),
                     F (Four wheel drive), V (Van), W (Wagon), S (Sport)
                     X (Special)
        3rd Letter - A (Automatic), M (Manual)
        4th Letter - R (A/c), N (No A/C)
    
    CarRentalFee
        Mutliple car rental fee can be specified to capture the
        break down of different fees.  The total of these fees must
        add up to the total at the line item level.
    
    LimitedMileage
        Mileage limit information
    
    AvailablePrice
        Other available prices for car rental that the user did not pick.
    
    travelSegment
        Textual information to identify this travel segment.
        This information is specific to the Travel Booking Provider.
    
    pickupTime
        The intended pickup date and time
    
    dropoffTime
        The intended dropoff date and time
  -->
  <xs:element abstract="false" name="CarRentalDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Vendor"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="CarRentalPickup"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="CarRentalDropoff"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="BookingClassCode"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="CarRentalFee"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="LimitedMileage"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="AvailablePrice"/>
      </xs:sequence>
      <xs:attributeGroup ref="CarRentalDetail.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="CarRentalDetail.attlist">
    <xs:attribute name="travelSegment" type="string" use="required"/>
    <xs:attribute name="pickupTime" type="datetime.tz" use="required"/>
    <xs:attribute name="dropoffTime" type="datetime.tz" use="required"/>
  </xs:attributeGroup>
  <!--
    Physical location where the rental car should be picked up.  This
    is either an Airport or off airport car rental location.
    
    Airport
        An airport location.
    
    Address
        Physical address of the car rental location
  -->
  <xs:element abstract="false" name="CarRentalPickup" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Airport"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Address"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    Physical location where the rental car should be dropped off.
    This is either an Airport or off-airport car rental location.
    
    Airport
        An airport location.
    
    Address
        Physical address of the car rental location
  -->
  <xs:element abstract="false" name="CarRentalDropoff" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Airport"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Address"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    This specifies the quantity and the unit of measure of the mileage
    limit.
    
    UnitOfMeasure
        Unit of measure either miles or kilometers.
    
    quantity
        The mileage limit amount.
  -->
  <xs:element abstract="false" name="LimitedMileage" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="UnitOfMeasure"/>
      </xs:sequence>
      <xs:attributeGroup ref="LimitedMileage.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="LimitedMileage.attlist">
    <xs:attribute name="quantity" type="r8" use="required"/>
  </xs:attributeGroup>
  <!--
    Car rental fee information.  CarRentalFee captures the actual
    charges and fee that applies to this rental.  Conditional charges
    such as extra mileages that are over the mileage limit should not
    be specified here but rather in the TermsAndConditions text.
    
    Total
        Total amount for this car rental fee.  All the total for the rates
        must add up to this amount.
    
    Rate
        The individual broken-down fee information.
    
    type
        Type of rate
            baseRate            - Base rental rate
            additionalDriver    - Additional driver fee
            airportAccessFee    - Airport Access fee
            dropOffCharge       - Drop off charge
            vehicleLicensingFee - Vehicle lincensing fee
            touristTax          - Tourist tax
            prepaidGasoline     - Prepaid gasoline charge
            navigationSystem    - Navigation system
            childSeat           - Child seat charge
            luggageRack         - Luggage rack charge
            collisionDamageInsurance    - Collision damage insurance
            liabilityInsurance          - Liability insurance
            mobilePhone         - Mobile phone base charge
            other               - Other charges.
  -->
  <xs:element abstract="false" name="CarRentalFee" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Total"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Rate"/>
      </xs:sequence>
      <xs:attributeGroup ref="CarRentalFee.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="CarRentalFee.attlist">
    <xs:attribute default="baseRate" name="type" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="baseRate"/>
          <xs:enumeration value="additionalDriver"/>
          <xs:enumeration value="airportAccessFee"/>
          <xs:enumeration value="dropOffCharge"/>
          <xs:enumeration value="vehicleLicensingFee"/>
          <xs:enumeration value="touristTax"/>
          <xs:enumeration value="prepaidGasoline"/>
          <xs:enumeration value="navigationSystem"/>
          <xs:enumeration value="childSeat"/>
          <xs:enumeration value="luggageRack"/>
          <xs:enumeration value="collisionDamageInsurance"/>
          <xs:enumeration value="liabilityInsurance"/>
          <xs:enumeration value="mobilePhone"/>
          <xs:enumeration value="other"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!-- Hotel -->
  <!--
    Hotel detail information.
    
    Vendor
        Hotel vendor information.
    
    Address
        Physical address of the hotel.  This is might be different
        from the address specified in the Vendor field as the vendor
        address might be the head quarter address.
    
    RoomType
        The type of room reserved.
    
    BookingClassCode
        Hotel booking class code.
    
    Meal
        Any complementary meals that are included with the room.  For
        example, complementary continental breakfast.
    
    Rate
        Hotel rate information.  Multiple rates can be specified.  For
        example, the night rate, valet parking rate, and other rates.
    
    AvailablePrice
        Other available prices that user did not pick.  Available
        prices can be from the same vendor or different vendor.
    
    travelSegment
        Textual information to identify this travel segment.  This
        information is specific to the Travel Booking Provider.
    
    arrivalTime
        Date and time of arrival at the hotel.  This is used as an
        advisory to the hotel vendor for the arrival time.
    
    departureTime
        Date and time of departure from the hotel.  This is used as an
        advisory to the hotel vendor for the departure time.
    
    checkinTime
        The official checkin time.  For example, most hotel checkin
        time is 3:00 PM.
    
    checkoutTime
        The official checkout time.  For example, most hotel checkout
        time is 12:00 PM (noon).
    
    earlyCheckinAllowed
        Does the hotel allow early checkin?
    
    lateCheckoutAllowed
        Does the hotel allow late checkout?
  -->
  <xs:element abstract="false" name="HotelDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Vendor"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Address"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="RoomType"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="BookingClassCode"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Meal"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Rate"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="AvailablePrice"/>
      </xs:sequence>
      <xs:attributeGroup ref="HotelDetail.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="HotelDetail.attlist">
    <xs:attribute name="travelSegment" type="string" use="required"/>
    <xs:attribute name="arrivalTime" type="datetime.tz" use="required"/>
    <xs:attribute name="departureTime" type="datetime.tz" use="required"/>
    <xs:attribute name="checkinTime" type="time.tz" use="required"/>
    <xs:attribute name="checkoutTime" type="time.tz" use="required"/>
    <xs:attribute name="earlyCheckinAllowed" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="lateCheckoutAllowed" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Information about a hotel room.
    
    Description
        Textual description of the hotel room.
    
    Amenities
        List of amenities for this hotel room.
    
    smoking
        Is the room a smoking or non-smoking room
    
    numberOfBed
        The number of beds in this room
    
    bedType
        The bed type in this room.
  -->
  <xs:element abstract="false" name="RoomType" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="Description"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Amenities"/>
      </xs:sequence>
      <xs:attributeGroup ref="RoomType.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="RoomType.attlist">
    <xs:attribute name="smoking" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
          <xs:enumeration value="no"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="numberOfBed" type="r8" use="optional"/>
    <xs:attribute name="bedType" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="king"/>
          <xs:enumeration value="queen"/>
          <xs:enumeration value="full"/>
          <xs:enumeration value="double"/>
          <xs:enumeration value="single"/>
          <xs:enumeration value="other"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Textual description of the amenities for the hotel room.
    
    Description
        Text description of this amenities.  For example,
        DSL connection, two telephone lines, and other information
        about a hotel room.
  -->
  <xs:element abstract="false" name="Amenities" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Description"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- Rail -->
  <!--
    Rail detail information.  A rail detail can have multiple legs.
    
    TripType
        Trip type for this rail.
    
    Rail leg
        The different rail legs that make up this rail detail.
    
    AvailablePrice
        Other available prices that the user did not pick for for this
        rail trip.
    
    Penalty
        Penalty (if any) associated with this rail trip.
  -->
  <xs:element abstract="false" name="RailDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="TripType"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="RailLeg"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="AvailablePrice"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Penalty"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Rail leg is used to express information regarding a single leg for
    a rail travel.
    
    Vendor
        Rail vendor information.
    
    RailLegOrigin
        Rail originating location.
    
    RailLegDestination
        Rail Destination location.
    
    BookingClassCode
        Rail booking class code.
    
    Rate
        Rate information (if any) for this rail leg.  If specified,
        all the rates in all rail legs must add up to the total at the
        travel line item level.
    
    Meal
        Meal served for this leg (if any).
    
    travelSegment
        Textual information to identify this travel segment.  This
        information is specific to the Travel Booking Provider.
    
    departureTime
        Date and time of departure at the originating location.
    
    arrivalTime
         Date and time of arrival at the destination location.
    
    trainNumber
        Train number for this rail leg.
    
    seatNumber
        Seat number.
    
    carType
        Type of the rail car.
  -->
  <xs:element abstract="false" name="RailLeg" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Vendor"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="RailLegOrigin"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="RailLegDestination"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="BookingClassCode"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Rate"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Meal"/>
      </xs:sequence>
      <xs:attributeGroup ref="RailLeg.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="RailLeg.attlist">
    <xs:attribute name="travelSegment" type="string" use="required"/>
    <xs:attribute name="departureTime" type="datetime.tz" use="required"/>
    <xs:attribute name="arrivalTime" type="datetime.tz" use="required"/>
    <xs:attribute name="trainNumber" type="string" use="required"/>
    <xs:attribute name="seatNumber" type="string" use="optional"/>
    <xs:attribute name="carType" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="sleeper"/>
          <xs:enumeration value="seat"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    The origin of a particular rail leg.  This can be an airport or a
    physical address of a rail station.
    
    Airport
        An airport location
    
    Address
        A physical address of a rail station
  -->
  <xs:element abstract="false" name="RailLegOrigin" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Airport"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Address"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    The destination of a particular rail leg.  This can be an airport
    or a physical address of a rail station.
    
    Airport
        An airport location
    
    Address
        A physical address of a rail station
  -->
  <xs:element abstract="false" name="RailLegDestination" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Airport"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Address"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!-- Travel/Expense common definitions -->
  <!--
    The type of the trip. This is used by Air and Rail to indicate
    round trip, one way or multi-leg trip.
    
    type
        Type of the trip
    	round       - a round trip
    	oneWay      - a one way trip
    	multiLeg    - a multi leg or open jaw trip
  -->
  <xs:element abstract="false" name="TripType" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="TripType.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="TripType.attlist">
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="round"/>
          <xs:enumeration value="oneWay"/>
          <xs:enumeration value="multiLeg"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Information about a vendor that is providing this service.
    
    Address
        The physical address of the vendor.  This address normally is
        the business or head quarter address of the vendor.
    
    SupplierID
        Supplier id for this vendor.  This is just a (domain, value)
        pair so that Travel Booking Providers have the flexibility to
        define their id's according to an arbitrary convention (e.g.,
        (DUNS, 12345), (TaxID, 88888888)).
    
        Note that multiple supplier id can be specified.  This is so
        that Travel Booking Provider can have a single implementation
        that works with different Buyer implementations that use
        different supplier id domain.
    
    preferred
        Is this vendor a preferred vendor?
  -->
  <xs:element abstract="false" name="Vendor" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Address"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="SupplierID"/>
      </xs:sequence>
      <xs:attributeGroup ref="Vendor.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Vendor.attlist">
    <xs:attribute name="preferred" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
          <xs:enumeration value="no"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Textual terms and conditions associated with an air fare, car
    rental, hotel, or rail.  For example, a car rental terms and
    conditions normally include boundary limit, additional mileage
    charges, gasoline charge and other restriction information.
    
    Multiple terms and conditions can be attached to a single travel
    line item.
    
    Description
        Textual terms and conditions.
  -->
  <xs:element abstract="false" name="TermsAndConditions" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Description"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Policy violation (if any) that results from the user picking this
    particular travel.  Policy violations are associated with an
    individual line item of travel and not associated at the header
    level.  This allows for clear identification of the violation with
    the individual line item.
    
    Description
        Textual description of this violation.
    
    PolicyViolationJustification
        Justification for this violation given by user normally picked
        from a standard list of justifications at the Travel Booking
        Provider web site.
    
    Comments
        Additional comments to further clarify the justification given
        by user.
    
    level
        Violation level.
    	warning     - a non serious violation.
    	violation   - a serious violation of company policy.
  -->
  <xs:element abstract="false" name="PolicyViolation" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Description"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="PolicyViolationJustification"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Comments"/>
      </xs:sequence>
      <xs:attributeGroup ref="PolicyViolation.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="PolicyViolation.attlist">
    <xs:attribute name="level" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="warning"/>
          <xs:enumeration value="violation"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Justification given by the user why they violate the company
    travel policy.  This justification value is normally picked from a
    pick list at the Travel Booking Provider web site.
    
    Description
        The justification of the violation picked from a standard list
        at the Travel Booking Provider web site.
  -->
  <xs:element abstract="false" name="PolicyViolationJustification" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Description"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Penalty (if any) for this travel segment
    
    Money
        The penalty amount
    
    Description
        Textual description of the cause of the penalty.  For example,
        change fee associated with air ticket.
  -->
  <xs:element abstract="false" name="Penalty" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="Money.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="1"   ref="Description"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!--
    Other avaible price.  AvailablePrice is used to express what other
    prices are available that the traveler did not pick.
    AvailablePrice is can be used to capture the lowest price, the
    highest price, the lowest compliant price, and the hight compliant
    price.
    
    Money
        The amount of the other available price.
    
    Description
        Textual description of the available price.  It explain
        how this price was derived at.  For example, a non direct flight
        exists with the flight number can be put here.
    
    Type
        Type of available price.  Currently we capture four
        different type.
            lowest              - The lowest price possible regardless of the
                                  traveling policies
            lowestCompliant     - The lowest price that still complies with
                                  the travel policies
            highestCompliant    - The highest price that still complies with
                                  the travel policies
            highest             - The highest price possible regardless of the travel
                                  policies
            other               - Other, specify in the description
  -->
  <xs:element abstract="false" name="AvailablePrice" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="Money.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="0"   ref="Description"/>
          </xs:sequence>
          <xs:attributeGroup ref="AvailablePrice.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="AvailablePrice.attlist">
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="lowest"/>
          <xs:enumeration value="lowestCompliant"/>
          <xs:enumeration value="highestCompliant"/>
          <xs:enumeration value="highest"/>
          <xs:enumeration value="other"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    The rate information used to define the rate for an air leg, a car
    rental fee, a hotel, or a rail leg.
    
    Total
        The total amount for the rate.  The total amount
        must equal to quantity x UnitRate.
    
    UnitRate
        The single unit rate.
    
    Description
        Textual description for the rate.  For example, hotel
        nightly rate.
    
    Quantity
        The quantity.  For example, a 4 nights stay at a hotel will
        have quantity set to 4 with UnitofMesure in UnitRate set to
        Day.
  -->
  <xs:element abstract="false" name="Rate" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Total"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="UnitRate"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Description"/>
      </xs:sequence>
      <xs:attributeGroup ref="Rate.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Rate.attlist">
    <xs:attribute name="quantity" type="r8" use="required"/>
  </xs:attributeGroup>
  <!--
    Booking class code used by airfare, car rental, hotel, and rail to
    indicate the class.
    
    Description
        Textual description of the code
    
    code
        code
  -->
  <xs:element abstract="false" name="BookingClassCode" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="Description"/>
      </xs:sequence>
      <xs:attributeGroup ref="BookingClassCode.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="BookingClassCode.attlist">
    <xs:attribute name="domain" type="string" use="required"/>
    <xs:attribute name="code" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/Transaction.mod#17 $
  -->
  <!--
    For better definitions of these Elements/Entities, refer to the cXML
    Transaction Specification documents.
  -->
  <!-- Basic transactional elements used throughout -->
  <!-- The total for something. -->
  <xs:element abstract="false" name="Total" nillable="false" type="Money.element"/>
  <!-- The bill to for an item. -->
  <xs:element abstract="false" name="BillTo" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Address"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- The ship to for a item. -->
  <xs:element abstract="false" name="ShipTo" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Address"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Definition of a cXML Shipping item. Represents a shipping cost in the
    shopping basket (PunchOutOrderMessage) or an order to the supplier
    (OrderRequest). There could be one of these for the entire order, or one
    per lineitem.
    
    trackingDomain
        represents the logistics supplier, I.E., "FedEx", "UPS", etc.
    
    trackingId
        an optional element value that represents the logistics supplier
        tracking number
    
    tracking
        Deprecated - Do Not Use
  -->
  <xs:element abstract="false" name="Shipping" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="Money.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="1"   ref="Description"/>
          </xs:sequence>
          <xs:attributeGroup ref="Shipping.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Shipping.attlist">
    <xs:attribute name="trackingDomain" type="string" use="optional"/>
    <xs:attribute name="trackingId" type="string" use="optional"/>
    <xs:attribute name="tracking" type="string" use="optional"/>
  </xs:attributeGroup>
  <!--
    Defines discount applied.
    
    DiscountAmount
    	    The discount expressed as a flat amount with currency.
    
    DiscountPercent
    	    The discount rate expressed as a percentage.
  -->
  <xs:element abstract="false" name="Discount" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="DiscountPercent"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="DiscountAmount"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    Defines the discount rate
    
    percent
        The discount rate expressed as a percentage.  A negative discount percent
        represents a penalty.
  -->
  <xs:element abstract="false" name="DiscountPercent" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="DiscountPercent.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="DiscountPercent.attlist">
    <xs:attribute name="percent" type="r8" use="required"/>
  </xs:attributeGroup>
  <!--
    Defines a payment term in an invoice or order.  This deprecates the
    	    InvoiceDetailPaymentTerm previously defined.  Payment term can be the 
    	    net term (without discount) or discount term (with discount).
    
    payInNumberOfDays
        The number of days after invoice effective date for the invoice to be paid.
    
    Discount
    	    The percentage or amount of the discount term.  This element should be omitted
    	    if the payment term is a net term.
  -->
  <xs:element abstract="false" name="PaymentTerm" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="Discount"/>
      </xs:sequence>
      <xs:attributeGroup ref="PaymentTerm.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="PaymentTerm.attlist">
    <xs:attribute name="payInNumberOfDays" type="uint" use="required"/>
  </xs:attributeGroup>
  <!-- The list of valid payment types. -->
  <xs:element abstract="true" name="cxml.payment" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="PostalAddress"/>
      </xs:sequence>
      <xs:attributeGroup ref="PCard.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:complexType abstract="false" mixed="false" name="cxml.payment">
    <xs:sequence maxOccurs="1" minOccurs="1">
      <xs:element maxOccurs="1" minOccurs="1"   ref="cxml.payment"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element abstract="false" name="Payment" nillable="false" type="cxml.payment"/>
  <!--
    Defines an accounting segment.  Segment is an older, deprecated way to
    transport this information.
    
    type
        The accounting type of this segment.
    
    id
        The unique key of this Segment against the type.
    
    description
        Textual description of the Segment. For human readability.
  -->
  <xs:element abstract="false" name="Segment" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="Segment.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Segment.attlist">
    <xs:attribute name="type" type="string" use="required"/>
    <xs:attribute name="id" type="string" use="required"/>
    <xs:attribute name="description" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    Defines an accounting segment.  AccountingSegment is the newer, better
    way to transport this information.  Name corresponds to the type
    attribute of Segment; Description corresponds to description.  Both add
    required locale attributes to the strings.
    
    id
        The unique key of this Segment against the type.
  -->
  <xs:element abstract="false" name="AccountingSegment" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Name"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Description"/>
      </xs:sequence>
      <xs:attributeGroup ref="AccountingSegment.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="AccountingSegment.attlist">
    <xs:attribute name="id" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    An accounting object.  Use of the Segment element here is deprecated.
    
    name
        The name of the object containing the specified accounting segments.
  -->
  <xs:complexType abstract="false" mixed="false" name="cxml.accounting">
    <xs:choice maxOccurs="1" minOccurs="1">
      <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Segment"/>
      <xs:element maxOccurs="unbounded" minOccurs="1"   ref="AccountingSegment"/>
    </xs:choice>
  </xs:complexType>
  <xs:element abstract="false" name="Accounting" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="cxml.accounting">
          <xs:attributeGroup ref="Accounting.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Accounting.attlist">
    <xs:attribute name="name" type="string" use="required"/>
  </xs:attributeGroup>
  <!-- A charge against an Accounting element. -->
  <xs:element abstract="false" name="Charge" nillable="false" type="Money.element"/>
  <!--
    The combination of a Charge against an Accounting Element. A distribution
    represents the breakdown of one overall amount into sub-amounts.
  -->
  <xs:element abstract="false" name="Distribution" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Accounting"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Charge"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element abstract="false" name="TaxAmount" nillable="false" type="Money.element"/>
  <xs:element abstract="false" name="TaxableAmount" nillable="false" type="Money.element"/>
  <!--
    One language-specific string for the location of tax,
    e.g. London, Canada, California, etc.
    
    xml:lang
        The language or locale in which the location of tax is written.
  -->
  <xs:element abstract="false" name="TaxLocation" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="TaxLocation.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="TaxLocation.attlist">
    <xs:attribute ref="xml:lang" use="required"/>
  </xs:attributeGroup>
  <!--
    
    TriangularTransactionLawReference indicates the relevant law as
    titled for the local jurisdiction in the scenario of a triangular
    transaction.  ex: Triangulation, article 28c,E paragraph 3 of the
    6th EU VAT Directive
    
    xml:lang
        the language in which the law reference is written.
  -->
  <xs:element abstract="false" name="TriangularTransactionLawReference" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="TriangularTransactionLawReference.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="TriangularTransactionLawReference.attlist">
    <xs:attribute ref="xml:lang" use="required"/>
  </xs:attributeGroup>
  <!--
    Defines details of one type of tax.
    
    TaxableAmount
       The taxable amount.
    
    TaxAmount
       The tax amount.
    
    TaxLocation
       The tax location.
    
    Description
       The textual description of the current type of tax.
    
    TriangularTransactionLawReference
       The law reference for transactions where isTriangularTransaction is True
    
    purpose
       The purpose of the tax, e.g., tax (tax), custom duty, shippingTax, 
       specialHandlingTax, etc.
    
    category
       The tax category, Sales tax (sales), Use tax (usage), VAT (vat),
       GST (gst) are defined categories. Other values are permitted.
    
    percentageRate
       The tax rate in number of percentage.
    
    isVatRecoverable
       True if the VAT is recoverable.  Default is false.
    
    taxPointDate
       refers to the date on which VAT becomes due.
    
    paymentDate
       indicate the date when payment must be made.
    
    isTriangularTransaction
       True if the transaction is triangular.  Default is false.
  -->
  <xs:element abstract="false" name="TaxDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="TaxableAmount"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="TaxAmount"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="TaxLocation"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Description"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="TriangularTransactionLawReference"/>
      </xs:sequence>
      <xs:attributeGroup ref="TaxDetail.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="TaxDetail.attlist">
    <xs:attribute name="purpose" type="string" use="optional"/>
    <xs:attribute name="category" type="string" use="required"/>
    <xs:attribute name="percentageRate" type="r8" use="optional"/>
    <xs:attribute name="isVatRecoverable" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="taxPointDate" type="datetime.tz" use="optional"/>
    <xs:attribute name="paymentDate" type="datetime.tz" use="optional"/>
    <xs:attribute name="isTriangularTransaction" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Definition of a cXML Tax item. This represents what a Tax element should
    be in the classic notion of a line on a PO or Invoice. It can also
    represent a per-lineitem tax element depending on where it appears
    (inside of a item ELEMENT or inside of a something like a supplierOrder
    ELEMENT).
    
    Represents a tax item in the shopping basket. There could be one of these
    for the entire order, or one per lineitem.
    
    The total amount of taxes for the line item or order should be reflected
    in the Money element. The breakdown of taxes, for example, tax on shipping
    or tax on goods should be represented in separate TaxDetail elements.
  -->
  <xs:element abstract="false" name="Tax" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="Money.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="1"   ref="Description"/>
            <xs:element maxOccurs="unbounded" minOccurs="0"   ref="TaxDetail"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- Item Elements -->
  <!--
    The representation of a line item as it needs to be for sending to a
    supplier.
    
    quantity
        How many items are desired.
    lineNumber
        Position (counting from 1) of this item in an order.  Used to
        maintain a reference between items in create and update OrderRequest
        documents.
    requisitionID
        The buyers system requisition id for this line item. It might be the
        same as orderID, and it might not be included at all.  Must not be
        included if requisitionID is specified in the OrderRequestHeader.
    requestedDeliveryDate
        The date this item was requested for delivery.
    agreementItemNumber 
        The corresponding Item Number of the Item in the Master Agreement if this is 
        a 'release' order item.
  -->
  <xs:element abstract="false" name="ItemOut" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="ItemID.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="0"   ref="Path"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="ItemDetail"/>
            <xs:choice maxOccurs="1" minOccurs="0">
              <xs:element maxOccurs="1" minOccurs="1"   ref="SupplierID"/>
              <xs:element maxOccurs="1" minOccurs="1"   ref="SupplierList"/>
            </xs:choice>
            <xs:element maxOccurs="1" minOccurs="0"   ref="ShipTo"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="Shipping"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="Tax"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="SpendDetail"/>
            <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Distribution"/>
            <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Contact"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="Comments"/>
          </xs:sequence>
          <xs:attributeGroup ref="ItemOut.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ItemOut.attlist">
    <xs:attribute name="quantity" type="r8" use="required"/>
    <xs:attribute name="lineNumber" type="uint" use="optional"/>
    <xs:attribute name="requisitionID" type="string" use="optional"/>
    <xs:attribute name="agreementItemNumber" type="string" use="optional"/>
    <xs:attribute name="requestedDeliveryDate" type="date" use="optional"/>
    <xs:attribute name="isAdHoc" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    The representation of a line item as it needs to be for sending to a
    buyer.
    
    quantity
        How many items are desired.
    lineNumber
        Position (counting from 1) of this item in an order.  Used to
        maintain a reference between items in create and update OrderRequest
        documents.
  -->
  <xs:element abstract="false" name="ItemIn" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="ItemID.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="0"   ref="Path"/>
            <xs:element maxOccurs="1" minOccurs="1"   ref="ItemDetail"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="SupplierID"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="ShipTo"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="Shipping"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="Tax"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="SpendDetail"/>
          </xs:sequence>
          <xs:attributeGroup ref="ItemIn.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ItemIn.attlist">
    <xs:attribute name="quantity" type="r8" use="required"/>
    <xs:attribute name="lineNumber" type="uint" use="optional"/>
  </xs:attributeGroup>
  <!--
    StatusUpdate for Confirmation (type=RequestToPay) request.
    
    transactionTimestamp
        time when the XMLPay transaction was submitted
    
    transactionID
        an identifier assisgned to the transaction by the payment processing gateway
    
    authorizationID
        the authorization code for the transaction provided by the bank
    
    isFailed
        should have a status code greater than zero.  Zero implies a successful transaction.
  -->
  <xs:element abstract="false" name="PaymentStatus" nillable="false" substitutionGroup="cxml.statuses">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="PCard.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="1"   ref="Total"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="Shipping"/>
            <xs:element maxOccurs="1" minOccurs="0"   ref="Tax"/>
            <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Extrinsic"/>
          </xs:sequence>
          <xs:attributeGroup ref="PaymentStatus.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="PaymentStatus.attlist">
    <xs:attribute name="orderID" type="string" use="required"/>
    <xs:attribute name="transactionTimestamp" type="datetime.tz" use="required"/>
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="Authorization"/>
          <xs:enumeration value="Settlement"/>
          <xs:enumeration value="Sale"/>
          <xs:enumeration value="Credit"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="isFailed" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="transactionID" type="string" use="optional"/>
    <xs:attribute name="authorizationID" type="string" use="optional"/>
  </xs:attributeGroup>
  <!--
    Partial amount paid against an InvoiceDetail request. Used in InvoiceStatus.
    If this element exists in an InvoiceStatus element, it should mean that the buyer
    does not pay the full amount as the InvoiceDetail request specified. 
  -->
  <xs:element abstract="false" name="PartialAmount" nillable="false" type="Money.element"/>
  <!--
    StatusUpdate for InvoiceDetail request.
    
    InvoiceIDInfo
    	ID of an invoice known to the supplier system. This attribute is used to reference an invoice in StatusUpdateRequest when DocumentReference is omitted.
    
    PartialAmount
    	The partial amount paid against the InvoiceDetail document.  This attribute is
    	only relevant when the status type is "paid".
    
    Comments
    	Comments associated with the status update.
    
    type
    	Type of the invoice status. 
    	    processing - The invoice is received and being processed.
    	    canceled - The invoice has been canceled.
    	    reconciled - The invoice is reconciled. 
    	    rejected - The invoice is rejected.
    	    paying - The invoice is being paid. 
    	    paid - The InvoiceDetail request is paid.  
  -->
  <xs:element abstract="false" name="InvoiceStatus" nillable="false" substitutionGroup="cxml.statuses">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="InvoiceIDInfo"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="PartialAmount"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Comments"/>
      </xs:sequence>
      <xs:attributeGroup ref="InvoiceStatus.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="InvoiceStatus.attlist">
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="processing"/>
          <xs:enumeration value="canceled"/>
          <xs:enumeration value="reconciled"/>
          <xs:enumeration value="rejected"/>
          <xs:enumeration value="paying"/>
          <xs:enumeration value="paid"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!-- OrderRequest* Elements -->
  <!--
    Definition of an order.  This is the data that is sent to the supplier
    to have them place an order in their order management system. The new
    world order equivalent of a PO.
  -->
  <xs:element abstract="false" name="OrderRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="OrderRequestHeader"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="ItemOut"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Header of an order.  This is the data that is sent to the supplier
    to have them place an order in their order management system. Money
    represents the total amount of this order.
    
    orderID
        The buyer system orderID for this request.  This is an internal
        Buyer unique number.
    
    orderVersion
        The buyer system order version number for this request. Relevant when
        the OrderRequest represents a change order request. The version number
        for the original document should be 1 and should be incremented by 1 for
        each subsequent version (2,3,4...).
    
    isInternalVersion
        A value of yes indicates that this OrderRequest is a version whose changes from
        the previous version are deemed internal to the buyer system. Relevant when the
        version being sent to the supplier is not the first version.
    
    orderDate
        The date and time the order request was created.
    
    type
        The type of the order request. Defaults to "new".
    
    requisitionID
        The buyers system requisition id for this entire order. It might be
        the same as orderID, and it might not be included at all.  Must not
        be included if requisitionID is specified in any ItemOut elements.
    
    shipComplete
        Optional preference for "hold until complete" processing.  Defaults
        to shipping when available if not specified.  Future versions of the
        protocol may extend the datatype of this attribute to include
        additional possible values (such as "unlessGreatlyBackOrdered"?).
    orderType
        "release", indicates that this is a Release Order from an existing
        Master Agreement/ Contract. Default is regular.
    agreementID
        Identifies associated agreement corresponding to the Release Order.
        At an implementation level it has to be validated that if the orderType
        is 'release' then the appropriate agreementID is also provided.
    agreementPayloadID
        Optional PayloadID for the corresponding Master Agreement.
    
    
    The contained DocumentReference element would appear in a document only
    when the type is "update" or "delete".  In that case, the
    DocumentReference would reference the most recent OrderRequest document
    for the order.  For example when an order is created, updated and then
    deleted, the final document should contain a DocumentReference
    referring to the OrderRequest with type="update".  That document would,
    in turn, refer to the original (type="new") OrderRequest document.
  -->
  <xs:element abstract="false" name="OrderRequestHeader" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Total"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="ShipTo"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="BillTo"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Shipping"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Tax"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Payment"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="PaymentTerm"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Contact"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Comments"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Followup"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="DocumentReference"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="SupplierOrderInfo"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Extrinsic"/>
      </xs:sequence>
      <xs:attributeGroup ref="OrderRequestHeader.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="OrderRequestHeader.attlist">
    <xs:attribute name="orderID" type="string" use="required"/>
    <xs:attribute name="orderDate" type="datetime.tz" use="required"/>
    <xs:attribute default="regular" name="orderType" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="release"/>
          <xs:enumeration value="regular"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute default="new" name="type" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="new"/>
          <xs:enumeration value="update"/>
          <xs:enumeration value="delete"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="orderVersion" type="number" use="optional"/>
    <xs:attribute name="isInternalVersion" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="agreementID" type="string" use="optional"/>
    <xs:attribute name="agreementPayloadID" type="string" use="optional"/>
    <xs:attribute name="requisitionID" type="string" use="optional"/>
    <xs:attribute name="shipComplete" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Definition of a Master Agreement.  This is the electronic document representing the 
    Master Agreement that was created and agreed upon in the Buying organizations.
  -->
  <xs:element abstract="false" name="MasterAgreementRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="MasterAgreementRequestHeader"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="AgreementItemOut"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Header of an Agreement.  This is the header level information in the Agreement.
    agreementID
          The buyer system agreementID for this request.  the Master Agreement Number in Buyer.
    agreementDate
          The date and time the agreement request was created. 
          This is different from the effective and expiry date of the agreement.
    agreementType
          Identifies if this is a Value based agreement or quantity based Agreement.
    requestType
          The type of the agreement request. Defaults to "new".
    effectiveDate
          Date the Master Agreement is available for ordering/releases.
    expirationDate
          Date the Master Agreement is no longer available.
    parentAgreementPayloadID
          PayloadID for the corresponding parent document that this agreement is derived from.
    operation: 
         "delete" operation will be used to cancel an existing Master Agreement, the
          assumption here is that the delete request will be an exact replica of the 
          original request.
          "new" operation identifies a new MasterAgreement transaction.
          "update" operation identified an update to an existing transaction. 
          the DocumentReference attribute should be used to indicate the Orignal
          Document information.
    Note: 
          Use "Contact" element to supply any additional Address or Location information.
  -->
  <xs:element abstract="false" name="MasterAgreementRequestHeader" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="MaxAmount"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="MinAmount"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="MaxReleaseAmount"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="MinReleaseAmount"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Contact"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Comments"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="DocumentReference"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Extrinsic"/>
      </xs:sequence>
      <xs:attributeGroup ref="MasterAgreementRequestHeader.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="MasterAgreementRequestHeader.attlist">
    <xs:attribute name="agreementID" type="string" use="required"/>
    <xs:attribute name="agreementDate" type="datetime.tz" use="required"/>
    <xs:attribute default="value" name="type" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="value"/>
          <xs:enumeration value="quantity"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="effectiveDate" type="datetime.tz" use="required"/>
    <xs:attribute name="expirationDate" type="datetime.tz" use="required"/>
    <xs:attribute name="parentAgreementPayloadID" type="string" use="optional"/>
    <xs:attribute default="new" name="operation" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="new"/>
          <xs:enumeration value="update"/>
          <xs:enumeration value="delete"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    The representation of a  agreement line item as it needs to be for sending to a
    supplier.
    maxQuantity 
          maximum quantity for this particular lineItem
    minQuantity 
          minimum quantity for this particular lineItem
    maxReleaseQuantity 
          maximum quantity per release for this particular lineItem
    minReleaseQuantity 
          minimum quantity per release for this particular lineItem
    
    Note :
          The #lineNumber attribute in the <ItemOut> will be used to specify the corresponding 
          lineNumber on the Master Agreement in the Procurement Application.
          At an implementation, level checks should be made to validate this.
    Note :
          The quantity attribute in the ItemOut tag should be set to one and ignored at 
          the Mater Agreement implementation processing stage. 
    Note :
          The MaxReleaseAmount/Quantity and MinReleaseAmount/Quantity at an item level i
          indicate the ItemLevel amounts and quantities per release.
  -->
  <xs:element abstract="false" name="AgreementItemOut" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="MaxAmount"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="MinAmount"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="MaxReleaseAmount"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="MinReleaseAmount"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="ItemOut"/>
      </xs:sequence>
      <xs:attributeGroup ref="AgreementItemOut.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="AgreementItemOut.attlist">
    <xs:attribute name="maxQuantity" type="r8" use="optional"/>
    <xs:attribute name="minQuantity" type="r8" use="optional"/>
    <xs:attribute name="maxReleaseQuantity" type="r8" use="optional"/>
    <xs:attribute name="minReleaseQuantity" type="r8" use="optional"/>
  </xs:attributeGroup>
  <!-- The maximum amount  for something. -->
  <xs:element abstract="false" name="MaxAmount" nillable="false" type="Money.element"/>
  <!-- The minimum amount  for something. -->
  <xs:element abstract="false" name="MinAmount" nillable="false" type="Money.element"/>
  <!-- The contractual maximum amount per Release of this Master Agreement. -->
  <xs:element abstract="false" name="MaxReleaseAmount" nillable="false" type="Money.element"/>
  <!-- The contractual minimum amount per Release of this Master Agreement -->
  <xs:element abstract="false" name="MinReleaseAmount" nillable="false" type="Money.element"/>
  <!--
    Followup
    
    Location to which future StatusUpdateRequest documents should be
    posted.  In general, this is the input location for any later
    documents which reference the current OrderRequest document.
  -->
  <xs:element abstract="false" name="Followup" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="URL"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- PunchOut* Elements -->
  <!--
    Definition of a PunchOut Setup Request.  This is the data that is sent
    to the external system that the procurement application is going to
    extract catalog data from.
    
    The BrowserFormPost element contains the URL we would like the browser
    re-directed to when the PunchOut shopping experience is finished (where
    the PunchOutOrder message should be returned).
  -->
  <xs:element abstract="false" name="PunchOutSetupRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="BuyerCookie"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Extrinsic"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="BrowserFormPost"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Contact"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="SupplierSetup"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="ShipTo"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="SelectedItem"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="ItemOut"/>
      </xs:sequence>
      <xs:attributeGroup ref="PunchOutSetupRequest.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="PunchOutSetupRequest.attlist">
    <xs:attribute name="operation" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="create"/>
          <xs:enumeration value="inspect"/>
          <xs:enumeration value="edit"/>
          <xs:enumeration value="source"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element abstract="false" name="BuyerCookie" nillable="false" type="any"/>
  <!-- any valid XML data -->
  <xs:element abstract="false" name="SelectedItem" nillable="false" type="ItemID.element"/>
  <xs:element abstract="false" name="SupplierSetup" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="URL"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element abstract="false" name="PunchOutSetupResponse" nillable="false" type="StartPage.element"/>
  <!--
    Definition of a PunchOut Order Message.  This is the data that is sent
    back to the procurement application from the external system that the
    PunchOut Request was targeted at.
  -->
  <xs:element abstract="false" name="PunchOutOrderMessage" nillable="false" substitutionGroup="cxml.messages">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="BuyerCookie"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="PunchOutOrderMessageHeader"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="ItemIn"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Header of a PunchOut Order Request.  This is the data that is sent from
    the supplier to transfer the supplier acquired shopping basket back to
    the buyer system.
    
    operationAllowed
         Highest operation allowed on the PunchOut shopping basket.
         "create" allows only later OrderRequest operations on these items.
         "inspect" adds a PunchOutSetupRequest with operation="inspect".
         And, "edit" allows operation="edit" in that later Setup request.
    
    quoteStatus 
         "pending"  - Identifies that the transaction is still pending
         "final" - Identifies that the transaction is complete
  -->
  <xs:element abstract="false" name="PunchOutOrderMessageHeader" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="SourcingStatus"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Total"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="ShipTo"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Shipping"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Tax"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="SupplierOrderInfo"/>
      </xs:sequence>
      <xs:attributeGroup ref="PunchOutOrderMessageHeader.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="PunchOutOrderMessageHeader.attlist">
    <xs:attribute name="operationAllowed" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="create"/>
          <xs:enumeration value="inspect"/>
          <xs:enumeration value="edit"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute default="final" name="quoteStatus" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="pending"/>
          <xs:enumeration value="final"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    ====
        Other small Request elements.
    ====
  -->
  <!--
    Request to update the status of an earlier transaction.
    
    DocumentReference 
        A reference by payloadID to a cXML document to be updated.  This 
        element can be omitted only when InvoiceStatus is specified and
        the InvoiceStatus contains InvoiceIDInfo.
    
  -->
  <xs:element abstract="true" name="cxml.statuses" nillable="false"/>
  <xs:element abstract="false" name="StatusUpdateRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="DocumentReference"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Status"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="cxml.statuses"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    A reference to an attachment containing cXML document. 
    
    Attachment
        A reference to the attachment containing a cXML document.  The 
        attachment must be either a single, complete cXML document or another 
        MIME envelope containing a single, complete cXML document with 
        attachments.
  -->
  <xs:element abstract="false" name="cXMLAttachment" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Attachment"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Request to forward a cXML document to another party.  This Request
    occurs in multiple DTD files and is used depending on where (in which
    DTD) the forwarded message resides.
    
    cXMLAttachment
        A reference to the attachment containing the cXML document being 
        forwarded.  Refer to cXMLAttachment for more details.
    
    cXML
        Deprecated - Do Not Use.
  -->
  <xs:element abstract="false" name="CopyRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="cXMLAttachment"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="cXML"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    Status for a pre-existing sourcing transaction. The textual content indicates
    the display information. "action" attribute defines the context of this message
    based on the value.
    
    approve : Approve the pending transaction
    deny : deny pending transaction
    cancel : cancel any preexisting transaction.
    
  -->
  <xs:element abstract="false" name="SourcingStatus" nillable="false" substitutionGroup="cxml.statuses">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="SourcingStatus.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="SourcingStatus.attlist">
    <xs:attribute name="action" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="approve"/>
          <xs:enumeration value="cancel"/>
          <xs:enumeration value="deny"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute ref="xml:lang" use="required"/>
  </xs:attributeGroup>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/Transaction.mod#5 $
  -->
  <!--
    For better definitions of these Elements/Entities, refer to the cXML
    Transaction Specification documents.
  -->
  <!-- Basic financial elements used throughout -->
  <!--
    The following defines a list of money amounts.
    
    DepositAmount
        The amount of deposit or prepayment.
    
    SubtotalAmount
        The subtotal amount.
    
    DiscountAmount
        Defines the discount amount
    
    SpecialHandlingAmount
        The special handling amount.
    
    ShippingAmount
        The shipping amount.
    
    GrossAmount
        The gross amount.
    
    NetAmount
        The net amount.
    
    DueAmount
        The due amount.
    
  -->
  <xs:element abstract="false" name="DepositAmount" nillable="false" type="Money.element"/>
  <xs:element abstract="false" name="SubtotalAmount" nillable="false" type="Money.element"/>
  <xs:element abstract="false" name="SpecialHandlingAmount" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="Money.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="0"   ref="Description"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element abstract="false" name="ShippingAmount" nillable="false" type="Money.element"/>
  <xs:element abstract="false" name="GrossAmount" nillable="false" type="Money.element"/>
  <xs:element abstract="false" name="NetAmount" nillable="false" type="Money.element"/>
  <xs:element abstract="false" name="DueAmount" nillable="false" type="Money.element"/>
  <xs:element abstract="false" name="DiscountAmount" nillable="false" type="Money.element"/>
  <!-- Defines a Purchasing Card element used for payment -->
  <xs:complexType abstract="false" mixed="false" name="PCard.element">
    <xs:sequence maxOccurs="1" minOccurs="1">
      <xs:element maxOccurs="1" minOccurs="1"   ref="PCard"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element abstract="false" name="PCard" nillable="false" substitutionGroup="cxml.payment"/>
  <xs:attributeGroup name="PCard.attlist">
    <xs:attribute name="number" type="number" use="required"/>
    <xs:attribute name="expiration" type="date" use="required"/>
    <xs:attribute name="name" type="string" use="optional"/>
  </xs:attributeGroup>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id$
  -->
  <!--
    This element captures spend detail information.  SpendDetail can
    be used in the ItemIn and ItemOut and for the following types of
    messages:
    
        PunchOutSetupRequest
        PunchOutOrderMessage
        OrderRequest
        ConfirmationRequest
    
    But not for:
    
        MasterAgreementRequest
    
    TravelDetail
        Travel details for the current travel line item.
    
    LaborDetail
        Labor details for the current temporary labor line item.
    
    FeeDetail
        Fee details for the current fee line item.
    
    Extrinsic
        Detail information for the any undefined spend category.  The name
        attribute of the Extrinsic element should specify the type of the
        spend category (e.g., (PrintDetail, ProjectLaborDetail))
    
  -->
  <xs:element abstract="false" name="SpendDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="TravelDetail"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="FeeDetail"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="LaborDetail"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Extrinsic"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    FeeDetail contains additional information about a line item for a fee, 
    which may or may not be recurring.
    
    UnitRate
        The amount(s) to be paid per unit (of time or other measure).
        In the case of multiple UnitRates (i.e., a "rate schedule"), it is
        customary and expected that each UnitRate will include a
        TermReference to distinguish them.
    
    Period
        The Period of time over which the fee is charged, if applicable.
    
    isRecurring 
        Indicates that the fee is recurring (charged more than once).
  -->
  <xs:element abstract="false" name="FeeDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="UnitRate"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Period"/>
      </xs:sequence>
      <xs:attributeGroup ref="FeeDetail.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="FeeDetail.attlist">
    <xs:attribute name="isRecurring" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: $
  -->
  <!--
    LaborDetail contains information about an item for a temporary
    labor engagement. 
    
    UnitRate
        The amount(s) to be paid per unit (of time or other measure).
        In the case of multiple UnitRates (i.e., a "rate schedule"), it is
        customary and expected that each UnitRate will include a
        TermReference to distinguish them.
    
    Period
        The Period of time over which the service occurs.
    
    Contractor
        Identifies the contractor being engaged
    
    JobDescription
        Description of the job or work to be performed.
    
    Supervisor
        The person who is expected to supervise the contractor.
    
    WorkLocation
         Place where the work is expected to be performed.
    
    supplierReferenceCode
        The supplier's quote or proposal id, for cross-reference.
  -->
  <xs:element abstract="false" name="LaborDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="UnitRate"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Period"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Contractor"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="JobDescription"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Supervisor"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="WorkLocation"/>
      </xs:sequence>
      <xs:attributeGroup ref="LaborDetail.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="LaborDetail.attlist">
    <xs:attribute name="supplierReferenceCode" type="string" use="optional"/>
  </xs:attributeGroup>
  <!--     Text description of a job (service) -->
  <xs:element abstract="false" name="JobDescription" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Description"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--     Contact information for the person supervising a job (service) -->
  <xs:element abstract="false" name="Supervisor" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Contact"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--     Address of the location where a service is to be performed -->
  <xs:element abstract="false" name="WorkLocation" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Address"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Definition of a Contractor used in the context of temp labor. 
    The contractor is uniquely identified by a contractor identifier. 
    The piece of identification for a contractor is exchanged between 
    the buyer and the supplier prior to sending out order/timecards.
  -->
  <!--
    Definition of a Contractor used in the context of temp labor. 
    The contractor is uniquely identified by a contractor identifier. 
    The piece of identification for a contractor is exchanged between 
    the buyer and the supplier prior to sending out order/timecards.
  -->
  <xs:element abstract="false" name="Contractor" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="ContractorIdentifier"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Contact"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Definition of a ContractorIdentifier. uniquely identifies a contractor.
    
    domain
    	in what domain the identity is represented. This is for the
    	end systems to know who assigned the id. buyerReferenceID 
    	implies that it is something generated by the buyer system 
    	and supplierReferenceID implies that it is something generated 
    	by the supplier system/entered by the supplier.
  -->
  <xs:element abstract="false" name="ContractorIdentifier" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="ContractorIdentifier.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ContractorIdentifier.attlist">
    <xs:attribute name="domain" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="supplierReferenceID"/>
          <xs:enumeration value="buyerReferenceID"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/Reference.mod#6 $
  -->
  <!--
    For better definitions of these Elements/Entities, refer to the cXML
    User's Guide and related documents.
  -->
  <!--
    The OrderReference element provides a clear reference to a prior
    OrderRequest document.  While the contained DocumentReference provides
    an unambiguous reference, the additional attributes of the
    OrderReference may allow the ConfirmationRequest and ShipNoticeRequest
    to be viewed independently.
    
    orderID
        The buyer system orderID for this request. Basically, what the PO
        number is today.  If present, must be copied directly from the
        referenced OrderRequest document's OrderRequestHeader.
    orderDate
        The date and time the order request was created.  If present, must
        be copied directly from the referenced OrderRequest document's
        OrderRequestHeader.
  -->
  <xs:element abstract="false" name="OrderReference" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="DocumentReference"/>
      </xs:sequence>
      <xs:attributeGroup ref="OrderReference.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="OrderReference.attlist">
    <xs:attribute name="orderID" type="string" use="optional"/>
    <xs:attribute name="orderDate" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!--
    Defines the ID of an order known to the buyer system.
    
    orderID
        The id of an order known to the buyer system.  Basically,
        what the PO number is today.
    
    orderDate
        The date and time the order was created.
  -->
  <xs:element abstract="false" name="OrderIDInfo" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="OrderIDInfo.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="OrderIDInfo.attlist">
    <xs:attribute name="orderID" type="string" use="required"/>
    <xs:attribute name="orderDate" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!--
    Defines information related to an order.
    
        OrderReference
        The reference to the order being paid.
    
        OrderIDInfo
        The buyer system order id of the order.
  -->
  <xs:element abstract="false" name="OrderInfo" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="OrderReference"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="OrderIDInfo"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    The InvoiceReference element provides a clear reference to a prior
    InvoiceDetailRequest document.
    
    invoiceID
        The suplier system invoiceID for this request. Basically, what
        the Invoice number is today.  If present, must be copied
        directly from the referenced InvoiceDetailRequest document's
        InvoiceDetailRequestHeader.
    
    invoiceDate
        The invoice date.
  -->
  <xs:element abstract="false" name="InvoiceReference" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="DocumentReference"/>
      </xs:sequence>
      <xs:attributeGroup ref="InvoiceReference.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="InvoiceReference.attlist">
    <xs:attribute name="invoiceID" type="string" use="optional"/>
    <xs:attribute name="invoiceDate" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!--
    Defines the ID of an invoice known to the supplier system.
    
    invoiceID
        The id of an invoice known to the supplier system.
    
    invoiceDate
        The invoice date.
  -->
  <xs:element abstract="false" name="InvoiceIDInfo" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="InvoiceIDInfo.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="InvoiceIDInfo.attlist">
    <xs:attribute name="invoiceID" type="string" use="required"/>
    <xs:attribute name="invoiceDate" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!--
    Defines the ID of a master agreement known to the buyer system.
    In InvoiceDetailRequest, this element identifies the master agreement
    of the release order to be invoiced.
    
    agreementID
        The id of a master agreement known to the buyer system.  Basically,
        what the master agreement number is today.
    
    agreementDate
        The date and time the master agreement request was created.
  -->
  <xs:element abstract="false" name="MasterAgreementIDInfo" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="MasterAgreementIDInfo.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="MasterAgreementIDInfo.attlist">
    <xs:attribute name="agreementID" type="string" use="required"/>
    <xs:attribute name="agreementDate" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!--
    Defines a reference to an earlier MasterAgreementRequest document.
    In InvoiceDetailRequest, this element identifies the master agreement
    of the release order to be invoiced.
    
    DocumentReference
        The reference to an earlier MasterAgreementRequest document.
    
    agreementID
        The id of a master agreement known to the buyer system.  Basically,
        what the master agreement number is today.
    
    agreementDate
        The date and time the master agreement request was created.
  -->
  <xs:element abstract="false" name="MasterAgreementReference" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="DocumentReference"/>
      </xs:sequence>
      <xs:attributeGroup ref="MasterAgreementReference.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="MasterAgreementReference.attlist">
    <xs:attribute name="agreementID" type="string" use="optional"/>
    <xs:attribute name="agreementDate" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!--
    Identifies the carrier who will transport a shipment.
    
    domain
        Domain in which this value has meaning.  Recognized domains
        include:
        companyName - The legal name for this company.  In some cases, this
            could also be provided in a Contact element with role
            "carrierCorporate".  That option should be reserved for cases
            in which additional detail about the carrier appears in this
            element.
        SCAC - Standard Carrier Alpha Code (see
            http://users.erols.com/nmfta/Codes.htm)
        IATA - International Air Transport Association (see
            http://www.iata.org)
        AAR  - Association of American Railroads (see http://www.aar.org/)
        UIC  - International Union of Railways (see
            http://www.uic.asso.fr/)
        EAN  - European Article Numbering (see http://www.ean-ucc.org/)
        DUNS - D&B's Data Universal Numbering System (see
            http://www.dnb.com/dnbhome.htm)
  -->
  <xs:element abstract="false" name="CarrierIdentifier" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="CarrierIdentifier.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="CarrierIdentifier.attlist">
    <xs:attribute name="domain" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    Identifier that appears on a shipment and through which additional
    detail about the shipment may be retrieved.  Defined by the carrier.
    Has meaning in the domain described by the CarrierIdentifier values.
    Therefore, CarrierIdentifier and ShipmentIdentifier should normally
    be used together.
    
    Conceptually, this is a tracking number.  Different carriers have
    different names for shipment identifiers.  Some call it a way bill
    number, others call it a pro number, and still others call it a bill of
    lading.  They all represent tracking numbers.
  -->
  <xs:element abstract="false" name="ShipmentIdentifier" nillable="false" type="xs:string"/>
  <!-- string -->
  <!--
    One language-specific string for the creator of an IdReference,
    e.g. IRS, BofA, UPS, Cisco, etc.
    
    xml:lang
        The language or locale in which the name of the creator is written.
  -->
  <xs:element abstract="false" name="Creator" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="Creator.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="Creator.attlist">
    <xs:attribute ref="xml:lang" use="required"/>
  </xs:attributeGroup>
  <!--
    Defines an ID reference.  Within the application context (for example,
    a certain pair of buyer and supplier), the (identifier, domain) pair
    should be unique.
    
    Creator
        The creator of this IdReference, e.g. BofA, UPS, Cisco, etc.
    
    Description
        Textual description of the IdReference. For human readability.
    
    identifier
        The unique identifier of the IdReference within the domain.
    
    domain
        The domain of the IdReference.  It should be one of the
        following:
        accountID, bankRoutingID, accountPayableID,
        accountReceivableID, bankAccountID, ibanID, abaRoutingNumber,
        bankNationalID, isoBicID, swiftID, bankBranchID, federalTaxID,
        stateTaxID, provincialTaxID, vatID, gstID, and taxExemptionID.
        supplierTaxID is deprecated and will be treated as federalTaxID.
        Other possible values could be 1099ID, courtRegisterID, etc.
  -->
  <xs:element abstract="false" name="IdReference" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="Creator"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Description"/>
      </xs:sequence>
      <xs:attributeGroup ref="IdReference.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="IdReference.attlist">
    <xs:attribute name="identifier" type="string" use="required"/>
    <xs:attribute name="domain" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    Defines supplier sales order information related to an order.
    
    This is also used in PunchOutOrderMessage to indicate that the 
    supplier has created an order associated with the punchout order message.  
    The buyer can later cancel the sales order by sending an OrderRequest 
    of type "delete" that refers to the sales order by including the 
    SupplierOrderInfo element in the OrderRequestHeader
    
    orderID
        Supplier sales order id of this order.
  -->
  <xs:element abstract="false" name="SupplierOrderInfo" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="SupplierOrderInfo.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="SupplierOrderInfo.attlist">
    <xs:attribute name="orderID" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    The ShipNoticeReference element provides a clear reference to a prior
    ShipNoticeRequest document.  While the contained DocumentReference provides
    an unambiguous reference, the additional attributes of the
    ShipNoticeReference may allow the ReceiptRequest to be viewed independently.
    
    DocumentReference
        The reference to an earlier ShipNoticeRequest.
    
    shipNoticeID
        Unique identifier of the referenced ShipNoticeRequest.
    
    shipNoticeDate
        Date and time of the referenced ShipNoticeRequest.
  -->
  <xs:element abstract="false" name="ShipNoticeReference" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="DocumentReference"/>
      </xs:sequence>
      <xs:attributeGroup ref="ShipNoticeReference.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ShipNoticeReference.attlist">
    <xs:attribute name="shipNoticeID" type="string" use="optional"/>
    <xs:attribute name="shipNoticeDate" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!--
    Defines ID of a Ship Notice known to the Buyer system.
    
    shipNoticeID
        Unique identifier of the referenced ShipNoticeRequest.
    
    shipNoticeDate
        Date and time of the referenced ShipNoticeRequest.
  -->
  <xs:element abstract="false" name="ShipNoticeIDInfo" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="ShipNoticeIDInfo.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ShipNoticeIDInfo.attlist">
    <xs:attribute name="shipNoticeID" type="string" use="required"/>
    <xs:attribute name="shipNoticeDate" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/Entities.mod#3 $
  -->
  <!--
    Top-level entities used in Transport.mod.  Defined here to allow easy
    extention of the cXML specification (using additional DTDs) without
    redefining these entities.
  -->
  <!--
    cxml.messages
    Possible elements (for particular situations) within Message.  These
    are all of the messages defined in the base cXML protocol.
  -->
  <xs:element abstract="true" name="cxml.messages" nillable="false"/>
  <!--
    cxml.requests
    Possible elements (for particular situations) within Request.  These
    are all of the requests defined in the base cXML protocol.
  -->
  <xs:element abstract="true" name="cxml.requests" nillable="false"/>
  <xs:complexType abstract="false" mixed="false" name="cxml.requests">
    <xs:sequence maxOccurs="1" minOccurs="1">
      <xs:element maxOccurs="1" minOccurs="1"   ref="cxml.requests"/>
    </xs:sequence>
  </xs:complexType>
  <!--
    cxml.responses
    Possible elements (for particular situations) within Response.  These
    are all of the responses (corresponding to a subset of the possible
    requests) defined in the base cXML protocol.
  -->
  <xs:group name="cxml.responses">
    <xs:sequence>
      <xs:choice maxOccurs="1" minOccurs="0">
        <xs:element maxOccurs="1" minOccurs="1"   ref="ProfileResponse"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="PunchOutSetupResponse"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="ProviderSetupResponse"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="GetPendingResponse"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="SubscriptionListResponse"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="SubscriptionContentResponse"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="SupplierListResponse"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="SupplierDataResponse"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="AuthResponse"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="DataResponse"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/Profile.mod#1 $
  -->
  <!--
    Request for the latest profile from the server.  May also be used as
    a 'ping' transaction (to check if the server is available).
  -->
  <xs:element abstract="false" name="ProfileRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false"/>
  </xs:element>
  <!--
    Static profile response describing the transactions supported by this
    server.  The content should not change frequently.
    
    effectiveDate
        When these services were first available.  Should not be in the
    future since new clients may need to interact with a server.
    
    lastRefresh
        When service information was last received from the end server.
    
    a-dtype
        Datatype enumeration for the attributes of this element.  May be
    ignored by most XML parsers (used for documentation purposes).
  -->
  <xs:element abstract="false" name="ProfileResponse" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Option"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Transaction"/>
      </xs:sequence>
      <xs:attributeGroup ref="ProfileResponse.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ProfileResponse.attlist">
    <xs:attribute name="effectiveDate" type="datetime.tz" use="required"/>
    <xs:attribute name="lastRefresh" type="datetime.tz" use="optional"/>
    <xs:attribute default="effectiveDate dateTime.tz                              lastRefresh dateTime.tz" name="a-dtype" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKENS">
          <xs:enumeration value="effectiveDate dateTime.tz                              lastRefresh dateTime.tz"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Value for a defined option (either for the overall service or a
    specific transaction.  At this time, no options are defined at either
    level.
    
    name
        The name of this option.  Future versions of cXML will define
    values for this attribute.  This is not intended to be viewed
    directly (the profile is intended mostly for machine consumption).
    
    a-dtype
        Datatype enumeration for the attributes of this element.  May be
    ignored by most XML parsers (used for documentation purposes).
  -->
  <xs:element abstract="false" name="Option" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="Option.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="Option.attlist">
    <xs:attribute name="name" type="string" use="required"/>
    <xs:attribute default="name string" name="a-dtype" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKENS">
          <xs:enumeration value="name string"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    A transaction supported by this server.
    
    requestName
        A specific request this server accepts at the given URL.  The
    %cxml.requests entity (defined in transport.mod) contains the
    possible values for this attribute.
    
    a-dtype
        Datatype enumeration for the attributes of this element.  May be
    ignored by most XML parsers (used for documentation purposes).
  -->
  <xs:element abstract="false" name="Transaction" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="URL"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Option"/>
      </xs:sequence>
      <xs:attributeGroup ref="Transaction.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Transaction.attlist">
    <xs:attribute name="requestName" type="nmtoken" use="required"/>
    <xs:attribute default="requestName NMTOKEN" name="a-dtype" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKENS">
          <xs:enumeration value="requestName NMTOKEN"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/Transport.mod#4 $
  -->
  <!--
    For better definitions of these Elements/Entities, refer to the cXML
    Protocol Specification documents.
  -->
  <!-- Defines the set of known valid cXML digital signature versions -->
  <xs:simpleType name="cxml.signatureVersions">
    <xs:restriction base="xs:token">
      <xs:enumeration value="1.0"/>
    </xs:restriction>
  </xs:simpleType>
  <!--
    cXML envelope
    
    version
        Version of this cXML transmission.  Should be less than or equal
    to the version portion of the SYSTEM identifier for this document.
    
    payloadID
        A unique identifier for this document.
    
    timestamp
        The date and time at which this document was originally created.
    
    signatureVersion
        If present, specifies the cXML digital signature version to
        which this document conforms.  This implies that the
        ds:Signature element must be present.  It is an error if this
        attribute is present and the document does not conform to the
        specified signature version.  If absent, the document is not
        signed.
    
    xml:lang
        The default locale for all strings (not formatted items such as
    dates, times and numbers) in this document.  This attribute will be
    required in a future version of cXML.  (Leaving it out is
    deprecated.)
  -->
  <xs:element abstract="false" name="cXML" nillable="false"> 
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:choice maxOccurs="1" minOccurs="1">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="1"   ref="Header"/>
            <xs:choice maxOccurs="1" minOccurs="1">
              <xs:element maxOccurs="1" minOccurs="1"   ref="Message"/>
              <xs:element maxOccurs="1" minOccurs="1"   ref="Request"/>
            </xs:choice>
          </xs:sequence>
          <xs:element maxOccurs="1" minOccurs="1"   ref="Response"/>
        </xs:choice>
        <xs:element maxOccurs="1" minOccurs="0"   ref="ds:Signature"/>
      </xs:sequence>
      <xs:attributeGroup ref="cXML.attlist"/>
    </xs:complexType>
        <xs:unique name="cXML">
<xs:selector xpath="."/>
            <xs:field xpath="@payloadID"/>
        </xs:unique>
    </xs:element>
  <xs:attributeGroup name="cXML.attlist">
    <xs:attribute default="1.2.016" name="version" type="string" use="optional"/>
    <xs:attribute name="payloadID" type="string" use="required"/>
    <xs:attribute name="timestamp" type="datetime.tz" use="required"/>
    <xs:attribute name="signatureVersion" type="cxml.signatureVersions" use="optional"/>
    <xs:attribute ref="xml:lang" use="optional"/>
  </xs:attributeGroup>
  <!-- header -->
  <xs:element abstract="false" name="Header" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="From"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="To"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Sender"/>
        <xs:sequence maxOccurs="1" minOccurs="0">
          <xs:element maxOccurs="1" minOccurs="1"   ref="Path"/>
          <xs:element maxOccurs="1" minOccurs="1"   ref="OriginalDocument"/>
        </xs:sequence>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element abstract="false" name="From" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Credential"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Correspondent"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element abstract="false" name="To" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Credential"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Correspondent"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element abstract="false" name="Sender" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Credential"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="UserAgent"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Path. A list of nodes that records the path taken by a user through 
    a punchout chaining scenario.
  -->
  <xs:element abstract="false" name="Path" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Node"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    A Node is any entity connected to a Network.
    
    type
        A node can define itself as a router node or a copy node.  Routers
    assume responsibility for the transaction.  Copy Nodes request to only
    be aware of the transaction.
    
    itemDetailsRequired
        Intermediary Nodes may want to support special operations without
    having to store specific information required to fulfill that operation.
    This attribute tells the previous node to send ItemDetail information
    when performing a PunchOutSetupRequest edit/inspect operation.
  -->
  <xs:element abstract="false" name="Node" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Credential"/>
      </xs:sequence>
      <xs:attributeGroup ref="Node.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Node.attlist">
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="copy"/>
          <xs:enumeration value="route"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="itemDetailsRequired" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="yes"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Identifies the previous document in the situation that a router node
    forwards a message or request on to a more distant node.
    
    payloadID
        The payloadId of the original document.
  -->
  <xs:element abstract="false" name="OriginalDocument" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="OriginalDocument.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="OriginalDocument.attlist">
    <xs:attribute name="payloadID" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    A textual string representing who the UserAgent is conducting the cXML
    conversation. Analogous to UserAgent for HTTP conversations.
  -->
  <xs:element abstract="false" name="UserAgent" nillable="false" type="xs:string"/>
  <!--
    DEPRECATED 
    Do not use this element.
  -->
  <xs:element abstract="false" name="DigitalSignature" nillable="false" substitutionGroup="cxml.authentication">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="any">
          <xs:attributeGroup ref="DigitalSignature.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="DigitalSignature.attlist">
    <xs:attribute default="PK7 self-contained" name="type" type="string" use="optional"/>
    <xs:attribute default="Base64" name="encoding" type="string" use="optional"/>
  </xs:attributeGroup>
  <!--
    A shared secret. Typically, this is a username/password type of secret
    exchanged through a secure transport before communication takes place.
  -->
  <xs:element abstract="false" name="SharedSecret" nillable="false" substitutionGroup="cxml.authentication" type="any"/>
  <!--
    Represents an identity for a credential.
    
    lastChangedTimestamp
       When the underlying object last changed in the originating system.
       This is used in cases where the same object (e.g. a buyer
       organization) is replicated, and kept synchronized, across two
       systems.
  -->
  <xs:element abstract="false" name="Identity" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="any">
          <xs:attributeGroup ref="Identity.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Identity.attlist">
    <xs:attribute name="lastChangedTimestamp" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!--
    A Credential Message Authentication Code (MAC).  This is used in
    situations where one party (the sender) must prove to another (the
    receiver) that it is authenticated by a shared secret with a third
    party trusted by both.
    
    The MAC should be computed by the trusted third party and
    transferred to the sender.  The MAC should be opaque to the sender
    (i.e., it should be secure and non-reversible).  The MAC should
    use as its inputs enough information to accomplish the following
    goals:
    
    (1) The MAC must prove to the receiver that it really originated
    with the trusted third party.  E.g., the MAC could use a shared
    secret between the receiver and the trusted third party as its
    secret key.
    
    (2) The MAC should be usable only by a certain sender.  E.g., the
    MAC could authenticate an identifier for the sending organization.
    
    (3) The MAC should prove that the sender is authorized to send on
    behalf of the From organization.  E.g., the MAC could authenticate
    an identifier for the From organization.
    
    (4) The MAC should limit the risk of the MAC being compromised and
    used to impersonate the sender by another party communicating with
    the receiver.  E.g., the MAC could authenticate an expiration date
    or sequence number.
    
    type
        An implementation-dependent identifier for the exact data
        being authenticated and the method in which it is formatted
        for authentication.  Currently the only supported value is
        "FromSenderCredentials".
    
    algorithm
        An implementation-dependent identifier for the exact MAC
        algorithm used on the data.  Currently the only supported
        value is "HMAC-SHA1-96".
    
    creationDate
        The time at which this MAC was issued.  The receiver must not
        accept the MAC before this time.
    
    expirationDate
        The time at which this MAC expires.  The receiver must not
        accept the MAC after this time.
  -->
  <xs:element abstract="false" name="CredentialMac" nillable="false" substitutionGroup="cxml.authentication">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="CredentialMac.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="CredentialMac.attlist">
    <xs:attribute name="type" type="string" use="required"/>
    <xs:attribute name="algorithm" type="string" use="required"/>
    <xs:attribute name="creationDate" type="datetime.tz" use="required"/>
    <xs:attribute name="expirationDate" type="datetime.tz" use="required"/>
  </xs:attributeGroup>
  <!--
    A combination of an Identity and authentication element. If the
    authentication element is present, it strongly authenticates who/what
    someone is.  The authentication element should not be sent within Message
    documents transported via an end user's browser.  One-way communication
    must be authenticated in the transport layer.
    
    domain
        In what domain is this Credential represented?
    type
        Does this Credential identify a marketplace or one of its member
        companies?  A Credential without this attribute describes a member
        company or unaffiliated buying organization.
  -->
  <xs:element abstract="true" name="cxml.authentication" nillable="false"/>
  <xs:element abstract="false" name="Credential" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Identity"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="cxml.authentication"/>
      </xs:sequence>
      <xs:attributeGroup ref="Credential.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Credential.attlist">
    <xs:attribute name="domain" type="string" use="required"/>
    <xs:attribute name="type" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="marketplace"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Status of a Response or Message.  If present, the element content
    describes specifics of a problem.
    
    code
        HTTP or cXML-specific status code.
    
    text
        Textual version of the status code (not specific issue).
    
    xml:lang
        The language in which the text attribute and element content are
    written.  This attribute will be required in a future version of
    cXML.  (Leaving it out is deprecated.)
  -->
  <xs:element abstract="false" name="Status" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="Status.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Status.attlist">
    <xs:attribute name="code" type="uint" use="required"/>
    <xs:attribute name="text" type="string" use="required"/>
    <xs:attribute ref="xml:lang" use="optional"/>
  </xs:attributeGroup>
  <!--
    Message
    
    When Status not present, '<Status code="200" text="OK" />' is implied.
  -->
  <xs:element abstract="false" name="Message" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="Status"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="cxml.messages"/>
      </xs:choice>
      <xs:attributeGroup ref="Message.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Message.attlist">
    <xs:attribute default="production" name="deploymentMode" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="production"/>
          <xs:enumeration value="test"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="inReplyTo" type="string" use="optional"/>
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!-- request -->
  <xs:element abstract="false" name="Request" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="cxml.requests">
          <xs:attributeGroup ref="Request.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Request.attlist">
    <xs:attribute default="production" name="deploymentMode" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="production"/>
          <xs:enumeration value="test"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!-- response -->
  <xs:element abstract="false" name="Response" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Status"/>
        <xs:group maxOccurs="1" minOccurs="1" ref="cxml.responses"/>
      </xs:choice>
      <xs:attributeGroup ref="Response.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Response.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!--
    This element includes signed cXML-specific details about the
    document being signed.  When a cXML document is signed, this
    element must appear inside the first ds:Object element in the
    ds:Signature element.
    
    signatureVersion
        This specifies the cXML signature version to which this
        document conforms.  It is an error if this attribute value
        does not exactly match the value of the signatureVersion
        attribute from the top-level cXML element.  It is an error if
        the document does not conform to the specified cXML signature
        version.
    
    payloadID
        Specifies the payloadID of the document.  It is an error if
        the value of this attribute does not exactly match the value
        of the payloadID attribute from the top-level cXML element.
    
    Id
        This identifies this cXMLSignedInfo element for purposes of
        the signature.  This attribute must always be present and
        should always have the value "cXMLSignedInfo"
    
  -->
  <xs:element abstract="false" name="cXMLSignedInfo" nillable="false" substitutionGroup="Object.ANY">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="cXMLSignedInfo.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="cXMLSignedInfo.attlist">
    <xs:attribute name="signatureVersion" type="cxml.signatureVersions" use="required"/>
    <xs:attribute name="payloadID" type="string" use="required"/>
    <xs:attribute name="Id" type="xs:ID" use="required"/>
  </xs:attributeGroup>
  <!--
    This element includes the contact information of the organisation
    to/from whom the document is sent/received.
    
    preferredLanguage
        optional language which the organisation, identified by this 
        element, would prefer to use. Refer to the definition of 
        xmlLangCode entity.
  -->
  <xs:element abstract="false" name="Correspondent" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Contact"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Extrinsic"/>
      </xs:sequence>
      <xs:attributeGroup ref="Correspondent.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Correspondent.attlist">
    <xs:attribute name="preferredLanguage" type="xmlLangCode" use="optional"/>
  </xs:attributeGroup>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/modules/Contract.mod#6 $
  -->
  <!--
    Use of the Contract element is deprecated
    
    A  mechanism for sending static contract pricing information.
  -->
  <xs:element abstract="false" name="Contract" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="SupplierID"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Comments"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="ItemSegment"/>
      </xs:sequence>
      <xs:attributeGroup ref="Contract.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Contract.attlist">
    <xs:attribute name="effectiveDate" type="datetime.tz" use="required"/>
    <xs:attribute name="expirationDate" type="datetime.tz" use="required"/>
  </xs:attributeGroup>
  <!--
    Use of the ItemSegment element is deprecated.
    
    Defines an item segment for the index.  An item segment is an
    overlay for index items, allowing suppliers to override certain
    item attributes on a per-contract basis.
    
    Items may be segmented by some agreed-upon user-specific key that
    is used to determine who is eligible for these particular overlaid
    attributes (such as reduced or different prices).  Omitting the
    segmentKey indicates that the supplier wishes to set the given
    contract price system wide (for all users).
    
    segmentKey      - optional agreed-upon string used to segment
                      custom prices
  -->
  <xs:element abstract="false" name="ItemSegment" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="ContractItem"/>
      </xs:sequence>
      <xs:attributeGroup ref="ItemSegment.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ItemSegment.attlist">
    <xs:attribute name="segmentKey" type="string" use="optional"/>
  </xs:attributeGroup>
  <!--
    Use of the ContractItem element is deprecated
    
    A particular (custom) item overlay for a index item.  The item is
    referenced by the supplierPartID.
    
    ItemID - ID for the part to be overlaid.
    UnitPrice - Contract price for item
    Extrinsic - Named overlay. The Extrinsic should be named with the
    item field name it is to overlay. The Extrinsic must contain a
    <value> element which supplies the replacement value for the item
    field.
    For example:
    <ContractItem>
      <ItemID>
           <SupplierPartID>123456</SupplierPartID>
      </ItemID>
      <Extrinsic name="URL">http://www.newaddress.com</Extrinsic>
    </ContractItem>
  -->
  <xs:element abstract="false" name="ContractItem" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="ItemID.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="0"   ref="UnitPrice"/>
            <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Extrinsic"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/Index.mod#5 $
  -->
  <!--
    IndexItemAdd is the element used to insert an item in an index.
    
    ItemID          - uniquely identifies the item
    ItemDetail      - general information about the item
    IndexItemDetail - Index specific item detail
    
    Note that for historical reasons there is a LeadTime element in
    both ItemDetail and IndexItemDetail.  For interoperability, it is
    recommended to specify the same value in both LeadTime elements.
    If different values are specified in the different LeadTime
    elements for the same IndexItemAdd, the meaning of this is
    undefined.
  -->
  <xs:element abstract="false" name="IndexItemAdd" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="ItemID.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="1"   ref="ItemDetail"/>
            <xs:element maxOccurs="1" minOccurs="1"   ref="IndexItemDetail"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!--
    IndexItemDelete is the element used to remove an item from the
    index.
    ItemID          - uniquely identifies the item
    
  -->
  <xs:element abstract="false" name="IndexItemDelete" nillable="false" type="ItemID.element"/>
  <!--
    IndexItemPunchout is the element used to dynamically connect an
    index item to the supplier's resource for that item.
    
    ItemID          - uniquely identifies the item
    PunchoutDetail  - Describes the item being accessed
  -->
  <xs:element abstract="false" name="IndexItemPunchout" nillable="false">
    <xs:complexType mixed="false">
      <xs:complexContent>
        <xs:extension base="ItemID.element">
          <xs:sequence maxOccurs="1" minOccurs="1">
            <xs:element maxOccurs="1" minOccurs="1"   ref="PunchoutDetail"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!--
    IndexItem is the general ELEMENT for the list of items in an
    index.
    
    IndexItemAdd      - Item(s) to be added to the index
    IndexItemDelete   - Item(s) to be removed from the index
    IndexItemPunchout - PunchOut Item(s) to be added to the index
    
  -->
  <xs:element abstract="false" name="IndexItem" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="IndexItemAdd"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="IndexItemDelete"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="IndexItemPunchout"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    PunchoutDetail is the description of an item which is referenced
    in the index.
    
  -->
  <xs:element abstract="false" name="PunchoutDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Description"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="URL"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Classification"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="ManufacturerName"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="ManufacturerPartID"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="ExpirationDate"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="EffectiveDate"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="SearchGroupData"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="TerritoryAvailable"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Extrinsic"/>
      </xs:sequence>
      <xs:attributeGroup ref="PunchoutDetail.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="PunchoutDetail.attlist">
    <xs:attribute default="store" name="punchoutLevel" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="store"/>
          <xs:enumeration value="aisle"/>
          <xs:enumeration value="shelf"/>
          <xs:enumeration value="product"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Index is the element used to update the list of goods and/or
    services which are being handled by the system.
    
    SupplierID  - One or more identities by which this supplier is
                  known. NOTE: These are to be considered synonyms
                  for the same Supplier.
    SearchGroup - Description(s) of parametric search(es) for this
                  index.  Use of the SearchGroup element is
                  deprecated.
    IndexItem   - The list of items with which to modify the index
    
    loadmode    - The mode in which the Index is loaded, either Full
                  or Incremental.  A full index load will
                  completely replace a previously loaded index. The
                  recommended application default is incremental.
  -->
  <xs:element abstract="false" name="Index" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="SupplierID"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Comments"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="SearchGroup"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="IndexItem"/>
      </xs:sequence>
      <xs:attributeGroup ref="Index.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Index.attlist">
    <xs:attribute name="loadmode" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="Full"/>
          <xs:enumeration value="Incremental"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Use of the SearchGroup element is deprecated.  Parametric search
    shapes should be defined using TypeDefinition and its child
    elements.
    
    SearchGroup is a grouping of attributes which constitute a search
    which can be performed against an index.
    
    Name            - Name of the search
    SearchAttribute - List of searchable index fields.
  -->
  <xs:element abstract="false" name="SearchGroup" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Name"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="SearchAttribute"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Use of the SearchAttribute element is deprecated.  Parametric
    search shapes should be defined using TypeDefinition and its
    child elements.
    
    An attribute that can searched parametrically.
    
    name - name of the attribute.
    type - the type of the attribute
  -->
  <xs:element abstract="false" name="SearchAttribute" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="SearchAttribute.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="SearchAttribute.attlist">
    <xs:attribute name="name" type="string" use="required"/>
    <xs:attribute name="type" type="string" use="optional"/>
  </xs:attributeGroup>
  <!--
    ExpirationDate is the date and time after which the element is no longer
    valid.  Must be specified in ISO 8601 format.
    
  -->
  <xs:element abstract="false" name="ExpirationDate" nillable="false" type="xs:string"/>
  <!-- datetime.tz -->
  <!--
    EffectiveDate date and time at which the element becomes valid.
    Must be specified in ISO 8601 format.
  -->
  <xs:element abstract="false" name="EffectiveDate" nillable="false" type="xs:string"/>
  <!-- datetime.tz -->
  <!--
    IndexItemDetail contains various index specific elements which
    help to define an index item.
    LeadTime           - time in days to receive the item
    ExpirationDate     - Expiration date and time for the item in this index
    EffectiveDate      - Effective date and time for the item in this index
    SearchGroupData    - Parametric search data
    TerritoryAvailable - Country codes
  -->
  <xs:element abstract="false" name="IndexItemDetail" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="LeadTime"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="ExpirationDate"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="EffectiveDate"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="SearchGroupData"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="TerritoryAvailable"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Specification of a territory (using ISO country and/or region codes)
    in which the particular index item is available.
  -->
  <xs:element abstract="false" name="TerritoryAvailable" nillable="false" type="xs:string"/>
  <!--
    SearchGroupData specifies the data which should be used to identify
    this item in a search.
  -->
  <xs:element abstract="false" name="SearchGroupData" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Name"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="SearchDataElement"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    SearchDataElement is a field and value which are used to provide the
    parametric data to a search.
  -->
  <xs:element abstract="false" name="SearchDataElement" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="SearchDataElement.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="SearchDataElement.attlist">
    <xs:attribute name="name" type="string" use="required"/>
    <xs:attribute name="value" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/modules/Pending.mod#6 $
  -->
  <!--
    For better definitions of these Elements/Entities, refer to the cXML
    Specification documents.
  -->
  <!--
    A request used for polling for waiting messages. A waiting message, if
    any, will be included in the returned stream. The lastReceivedTimestamp
    attribute, if present, provides the timestamp of the last received
    message. When the Receiver sees this, it can remove messages with earlier
    timestamps from the pending queue.
    
    The maxMessages attribute is used to indicate the maximum number of
    pending messages that can be included in the response.
    
    
  -->
  <xs:element abstract="false" name="GetPendingRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="MessageType"/>
      </xs:sequence>
      <xs:attributeGroup ref="GetPendingRequest.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="GetPendingRequest.attlist">
    <xs:attribute name="maxMessages" type="uint" use="optional"/>
    <xs:attribute name="lastReceivedTimestamp" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <!--
    Indicates the type of message(s) being polled for. The valid values are
    the corresponding element names e.g. SubscriptionChangeMessage.
  -->
  <xs:element abstract="false" name="MessageType" nillable="false" type="xs:string"/>
  <!-- nmtoken -->
  <!--
    The data elements being carried back in the response. These are fully
    formed cXML messages being carried through the Request/Response channel.
  -->
  <xs:element abstract="false" name="GetPendingResponse" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="cXML"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/Subscription.mod#1 $
  -->
  <!--
    Indicates that something changed in a buyer's content subscription.
    Since this is a Message, it can come at any time - no explicit Request
    needs to be sent first.
  -->
  <xs:element abstract="false" name="SubscriptionChangeMessage" nillable="false" substitutionGroup="cxml.messages">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Subscription"/>
      </xs:sequence>
      <xs:attributeGroup ref="SubscriptionChangeMessage.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="SubscriptionChangeMessage.attlist">
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="new"/>
          <xs:enumeration value="update"/>
          <xs:enumeration value="delete"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!-- A content subscription. -->
  <xs:element abstract="false" name="Subscription" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="InternalID"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Name"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Changetime"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="SupplierID"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Format"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Description"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element abstract="false" name="Changetime" nillable="false" type="xs:string"/>
  <!-- datetime.tz -->
  <xs:element abstract="false" name="Format" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="Format.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="Format.attlist">
    <xs:attribute name="version" type="string" use="required"/>
  </xs:attributeGroup>
  <!-- Requests a complete list of catalog subscriptions for a buyer. -->
  <xs:element abstract="false" name="SubscriptionListRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false"/>
  </xs:element>
  <!-- The list of Subscriptions for the given buyer. -->
  <xs:element abstract="false" name="SubscriptionListResponse" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Subscription"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- Requests the contents of a catalog that the buyer is subscribed to. -->
  <xs:element abstract="false" name="SubscriptionContentRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="InternalID"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="SupplierID"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- The data associated with a particular subscription. -->
  <xs:element abstract="false" name="SubscriptionContentResponse" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Subscription"/>
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="SubscriptionContent"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    The actual content associated with a particular subscription.
    
    Use of the Contract element is deprecated.
  -->
  <xs:element abstract="false" name="SubscriptionContent" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="CIFContent"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Index"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Contract"/>
      </xs:choice>
      <xs:attributeGroup ref="SubscriptionContent.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="SubscriptionContent.attlist">
    <xs:attribute name="filename" type="string" use="optional"/>
  </xs:attributeGroup>
  <!-- Contents of CIF file in base64 encoding. -->
  <xs:element abstract="false" name="CIFContent" nillable="false" type="xs:string"/>
  <!-- bin.base64 -->
  <!--
    Indicates that something has changed in the supplier data for
    a supplier the buyer has a relationship with. Since this is a message, no
    Request needs to be sent to receive this Message.
  -->
  <xs:element abstract="false" name="SupplierChangeMessage" nillable="false" substitutionGroup="cxml.messages">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Supplier"/>
      </xs:sequence>
      <xs:attributeGroup ref="SupplierChangeMessage.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="SupplierChangeMessage.attlist">
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="new"/>
          <xs:enumeration value="update"/>
          <xs:enumeration value="delete"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    Requests for a complete list of suppliers the buyer currently has
    relationships with.
  -->
  <xs:element abstract="false" name="SupplierListRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false"/>
  </xs:element>
  <!-- The list of suppliers requested by SupplierListRequest. -->
  <xs:element abstract="false" name="SupplierListResponse" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Supplier"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    Requests for a data associated with a particular supplier identified by
    SupplierID.
  -->
  <xs:element abstract="false" name="SupplierDataRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="SupplierID"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- The data associated with the desired supplier. -->
  <xs:element abstract="false" name="SupplierDataResponse" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="Supplier"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/Provider.mod#1 $
  -->
  <!--
    ====
        Provider* transaction is used to visually integrate an application with
        a UI provided by a service provider.
    ====
  -->
  <!--
    ProviderSetupRequest
    
    The originating application would provide the BrowserFormPost location
    only if it wished the provider site to display a "Done" button or
    would like information (at least Status) returned at the end of the
    interactive session.  Inclusion should lead to a ProviderDoneMessage
    from the provider at the end of a session.
    
    The originating application would provide the Followup location if it
    wished the provider to provide information about later status changes
    in the service (after the end of a particular Provider session).  This
    applies only when the initial status (transmitted via a
    ProviderDoneMessage) was an interim value.
  -->
  <xs:element abstract="false" name="ProviderSetupRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="OriginatorCookie"/>
        <xs:sequence maxOccurs="1" minOccurs="0">
          <xs:element maxOccurs="1" minOccurs="1"   ref="BrowserFormPost"/>
          <xs:element maxOccurs="1" minOccurs="0"   ref="Followup"/>
        </xs:sequence>
        <xs:element maxOccurs="1" minOccurs="1"   ref="SelectedService"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="Extrinsic"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- ProviderSetupResponse -->
  <xs:element abstract="false" name="ProviderSetupResponse" nillable="false" type="StartPage.element"/>
  <!-- ProviderDoneMessage -->
  <xs:element abstract="false" name="ProviderDoneMessage" nillable="false" substitutionGroup="cxml.messages">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="OriginatorCookie"/>
        <xs:element maxOccurs="unbounded" minOccurs="0"   ref="ReturnData"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/DataAvailable.mod#1 $
  -->
  <!-- DataAvailable message. -->
  <xs:element abstract="false" name="DataAvailableMessage" nillable="false" substitutionGroup="cxml.messages">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="InternalID"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/DataRequest.mod#1 $
  -->
  <!-- Definition of a DataRequest. -->
  <xs:element abstract="false" name="DataRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="InternalID"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    DataResponse. Contains the attachments if any for this response.
    Only a successful response to a download attempt would include this element
  -->
  <xs:element abstract="false" name="DataResponse" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Attachment"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/schema/Modules/CatalogUpload.mod#1 $
  -->
  <!--
    Contain all the information related to the catalog upload, the same
    functionality as the catalog upload provided by supplier.ariba.com
  -->
  <xs:element abstract="false" name="CatalogUploadRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="CatalogName"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Description"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Attachment"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="Commodities"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="AutoPublish"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="Notification"/>
      </xs:sequence>
      <xs:attributeGroup ref="CatalogUploadRequest.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="CatalogUploadRequest.attlist">
    <xs:attribute name="operation" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="new"/>
          <xs:enumeration value="update"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    CatalogName is the name of the uploaded/published catalog. The
    name is unique per supplier, and it can be defined in the
    different languages
  -->
  <xs:element abstract="false" name="CatalogName" nillable="false">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="CatalogName.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- string -->
  <xs:attributeGroup name="CatalogName.attlist">
    <xs:attribute ref="xml:lang" use="required"/>
  </xs:attributeGroup>
  <!-- The list of the commodity codes. -->
  <xs:element abstract="false" name="Commodities" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="CommodityCode"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- The two-digit code -->
  <xs:element abstract="false" name="CommodityCode" nillable="false" type="xs:string"/>
  <!-- string -->
  <!--
    If the attribute "enabled" set to be "true", the updated catalog
    will be published to the same buyers according to its previous
    publish
  -->
  <xs:element abstract="false" name="AutoPublish" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="AutoPublish.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="AutoPublish.attlist">
    <xs:attribute name="enabled" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    The information used by Ariba CSN to send the notification (the
    status of the catalog upload) to the suppliers.
  -->
  <xs:element abstract="false" name="Notification" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="0"   ref="Email"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="URLPost"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    The URL to receive the StatusUpdateRequest, which describes the
    status of the catalog upload, such as the "success" (means the
    catalog is validated, or the catalog is published),
    the "failed" (the catalog has errors, ......)
  -->
  <xs:element abstract="false" name="URLPost" nillable="false">
    <xs:complexType mixed="false">
      <xs:attributeGroup ref="URLPost.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="URLPost.attlist">
    <xs:attribute name="enabled" type="string" use="required"/>
  </xs:attributeGroup>
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/Modules/Profile.mod#6 $
  -->
  <!--
    AuthRequest
    
    An AuthRequest is used when one party (the "receiver") receives
    credentials from another party (the "principal") and the receiver
    needs a trusted third party to validate the credentials.  The
    receiver should enclose the credentials in an AuthRequest and send
    them to the trusted third party for validation.
    
    If the principal attempts to authenticate by revealing the shared
    secret between itself and the trusted third party (not
    recommended), the receiver should forward the credentials as they
    were received, including the shared secret.
    
    If the principal attempts to authenticate through a client
    certificate (recommended), the receiver should forward the
    credentials as well as an X509Data element containing an
    X509IssuerSerial element describing the certificate used by the
    principal (the receiver normally obtains this information from its
    webserver or SSL/TLS implementation).
    
    If the supplied credential is invalid, the trusted third party
    should respond with an empty cXML response of status 403
    (Forbidden).  If the supplied credential is valid, the trusted
    third party should respond with an AuthResponse that contains the
    valid credentials.
  -->
  <xs:element abstract="false" name="AuthRequest" nillable="false" substitutionGroup="cxml.requests">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Credential"/>
        <xs:element maxOccurs="1" minOccurs="0"   ref="X509Data"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    X509Data
    
    An X509Data element is constructed to describe an X.509 client
    certificate being used for authentication.  This element (and its
    children) are derived from the XML Digital Signature standard ().
  -->
  <xs:element abstract="false" name="X509Data" nillable="false">
    <xs:complexType mixed="false">
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:choice maxOccurs="unbounded" minOccurs="1">
          <xs:element maxOccurs="1" minOccurs="1"   ref="X509IssuerSerial"/>
          <xs:element maxOccurs="1" minOccurs="1"   ref="X509SKI"/>
          <xs:element maxOccurs="1" minOccurs="1"   ref="X509SubjectName"/>
          <xs:element maxOccurs="1" minOccurs="1"   ref="X509Certificate"/>
        </xs:choice>
        <xs:element maxOccurs="1" minOccurs="1"   ref="X509CRL"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <!--
    X509IssuerSerial
    
    This element is a container for the serial number and issuer name
    of the X.509 certificate.
  -->
  <xs:element abstract="false" name="X509IssuerSerial" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="1" minOccurs="1"   ref="X509IssuerName"/>
        <xs:element maxOccurs="1" minOccurs="1"   ref="X509SerialNumber"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!--
    X509IssuerName
    
    This element contains the distinguished name of the issuer of the
    X.509 certificate.  The distinguished name should be a string 
    representation of an LDAP Distinguished Name, as described in RFC 
    2253.  For example,
    
    C=US, O="John Doe Data Security, Inc.", OU=Secure Server
    Certification Authority
    
  -->
  <xs:element abstract="false" name="X509IssuerName" nillable="false" type="xs:string"/>
  <!-- string -->
  <!--
    X509 SubjectName
    
    This element contains the distinguished name of the subject of the
    X.509 certificate.  This should be a string representation of an 
    LDAP distinguished name, as described in RFC 2253.
  -->
  <xs:element abstract="false" name="X509SubjectName" nillable="false" type="xs:string"/>
  <!-- string -->
  <!--
    X509SerialNumber
    
    This element contains the serial number of the X.509 certificate.
  -->
  <xs:element abstract="false" name="X509SerialNumber" nillable="false" type="xs:string"/>
  <!-- string -->
  <!--
    X509SKI
    
    This element contains the Subject Key Identifier of the X.509
    certificate.
  -->
  <xs:element abstract="false" name="X509SKI" nillable="false" type="xs:string"/>
  <!-- string -->
  <!--
    X509Certificate
    
    This element contains a Base 64-encoded X.509v3 certificate.
  -->
  <xs:element abstract="false" name="X509Certificate" nillable="false" type="xs:string"/>
  <!-- string -->
  <!--
    X509CRL
    
    This element contains a Base 64-encoded X.509v3 Certificate
    Revocation List.
  -->
  <xs:element abstract="false" name="X509CRL" nillable="false" type="xs:string"/>
  <!-- string -->
  <!--
    AuthResponse
    
    This response returns a list of valid credentials of the person
    entity in the AuthRequest.  An AuthResponse is returned only for a
    successful authentication; for failed authentications, an empty
    response with status 403 (Forbidden) will be returned.
    
    expirationDate
        Specifies the time beyond which the information contained in
        the AuthResponse must be discarded.  In other words, the
        inclusion of the expirationDate attribute specifies that the
        receiver of the AuthResponse may cache the information therein
        until the expirationDate.
    
        The absence of an expirationDate should be interpreted to
        forbid caching.
  -->
  <xs:element abstract="false" name="AuthResponse" nillable="false">
    <xs:complexType mixed="false">
      <xs:sequence maxOccurs="1" minOccurs="1">
        <xs:element maxOccurs="unbounded" minOccurs="1"   ref="Credential"/>
      </xs:sequence>
      <xs:attributeGroup ref="AuthResponse.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="AuthResponse.attlist">
    <xs:attribute name="expirationDate" type="datetime.tz" use="optional"/>
  </xs:attributeGroup>
  <xs:element abstract="true" name="Object.ANY" nillable="false"/>
  <!-- Start Core Signature declarations, these should NOT be altered -->
  <xs:attributeGroup name="ds.Signature.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="ds.SignatureValue.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="ds.SignedInfo.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="ds.CanonicalizationMethod.attlist">
    <xs:attribute name="Algorithm" use="required"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="ds.SignatureMethod.attlist">
    <xs:attribute name="Algorithm" use="required"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="ds.Reference.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
    <xs:attribute name="URI" use="optional"/>
    <xs:attribute name="Type" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="ds.Transform.attlist">
    <xs:attribute name="Algorithm" use="required"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="ds.DigestMethod.attlist">
    <xs:attribute name="Algorithm" use="required"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="ds.KeyInfo.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!-- Key Information -->
  <xs:attributeGroup name="ds.RetrievalMethod.attlist">
    <xs:attribute name="URI" use="required"/>
    <xs:attribute name="Type" use="optional"/>
  </xs:attributeGroup>
  <!-- X.509 Data -->
  <!-- PGPData -->
  <!-- SPKI Data -->
  <xs:complexType abstract="false" mixed="false" name="ds.SPKISexp.element">
    <xs:sequence maxOccurs="1" minOccurs="1">
      <xs:element maxOccurs="1" minOccurs="1"   ref="ds:SPKISexp"/>
    </xs:sequence>
  </xs:complexType>
  <!-- Extensible Content -->
  <xs:attributeGroup name="ds.Object.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
    <xs:attribute name="MimeType" use="optional"/>
    <xs:attribute name="Encoding" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="ds.Manifest.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="ds.SignatureProperties.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="ds.SignatureProperty.attlist">
    <xs:attribute name="Target" use="required"/>
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!-- Algorithm Parameters -->
  <!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp
    
    $Id: //ariba/cxml/Modules/Profile.mod#6 $
  -->
  <!--
    For more information about XAdES, refer to the following URL.
    Portions of this DTD are derived from information contained therein.
    http://uri.etsi.org/01903/v1.1.1#
  -->
  <!-- Start Any -->
  <!-- End Any -->
  <!-- Start ObjectIdentifier -->
  <xs:attributeGroup name="xades.Identifier.attlist">
    <xs:attribute name="Qualifier" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="OIDAsURI"/>
          <xs:enumeration value="OIDAsURN"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!-- End ObjectIdentifier -->
  <!-- Start EncapsulatedPKIData -->
  <xs:attributeGroup name="xades.EncapsulatedPKIData.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!-- End EncapsulatedPKIData -->
  <!-- Start EncapsulatedTimeStamp -->
  <xs:attributeGroup name="xades.HashDataInfo.attlist">
    <xs:attribute name="uri" use="required"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="xades.EncapsulatedTimeStamp.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!-- End EncapsulatedTimeStamp -->
  <!-- Start container types -->
  <!-- Start QualifyingProperties -->
  <xs:attributeGroup name="xades.QualifyingProperties.attlist">
    <xs:attribute name="Target" use="required"/>
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="xades.SignedProperties.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="xades.UnsignedProperties.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!-- End QualifyingProperties -->
  <!--
    Start SignedSignatureProperties, SignedDataObjectProperties, 
    UnsignedSignatureProperties, UnsignedDataObjectProperties
  -->
  <!--
    End SignedSignatureProperties, SignedDataObjectProperties, 
    UnsignedSignatureProperties, UnsignedDataObjectProperties
  -->
  <!-- Start QualifyingPropertiesReference -->
  <xs:attributeGroup name="xades.QualifyingPropertiesReference.attlist">
    <xs:attribute name="URI" use="required"/>
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!-- End QualifyingPropertiesReference -->
  <!-- End container types -->
  <!-- Start SigningTime -->
  <!-- End SigningTime -->
  <!-- Start SigningCertificate -->
  <!-- End SigningCertificate -->
  <!-- Start SignaturePolicyIdentifier -->
  <!-- End SignaturePolicyIdentifier -->
  <!-- Start SPURI and SPUserNotice -->
  <!-- End SPURI and SPUserNotice -->
  <!-- Start CounterSignature -->
  <!-- End CounterSignature -->
  <!-- Start DataObjectFormat -->
  <xs:attributeGroup name="xades.DataObjectFormat.attlist">
    <xs:attribute name="ObjectReference" use="required"/>
  </xs:attributeGroup>
  <!-- End DataObjectFormat -->
  <!-- Start CommitmentTypeIndication -->
  <!-- End CommitmentTypeIndication -->
  <!-- Start SignatureProductionPlace -->
  <!-- End SignatureProductionPlace -->
  <!-- Start SignerRole -->
  <!-- Start SignerRole -->
  <xs:attributeGroup name="xades.CertifiedRole.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!-- End SignerRole -->
  <!-- Start AllDataObjectsTimeStamp, IndividualDataObjectsTimeStamp, SignatureTimeStamp -->
  <!-- End AllDataObjectsTimeStamp, IndividualDataObjectsTimeStamp, SignatureTimeStamp -->
  <!-- Start CompleteCertificateRefs -->
  <xs:attributeGroup name="xades.CompleteCertificateRefs.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:complexType abstract="false" mixed="false" name="xades.CertRefs.element">
    <xs:sequence maxOccurs="1" minOccurs="1">
      <xs:element maxOccurs="1" minOccurs="1"   ref="xades:CertRefs"/>
    </xs:sequence>
  </xs:complexType>
  <!-- End CompleteCertificateRefs -->
  <!-- Start CompleteRevocationRefs -->
  <xs:attributeGroup name="xades.CompleteRevocationRefs.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="xades.CRLIdentifier.attlist">
    <xs:attribute name="URI" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="xades.OCSPIdentifier.attlist">
    <xs:attribute name="URI" use="optional"/>
  </xs:attributeGroup>
  <!-- End CompleteRevocationRefs -->
  <!-- Start SigAndRefsTimeStamp, RefsOnlyTimeStamp -->
  <!-- End SigAndRefsTimeStamp, RefsOnlyTimeStamp -->
  <!-- Start CertificateValues -->
  <xs:attributeGroup name="xades.CertificateValues.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="xades.EncapsulatedX509Certificate.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!-- End CertificateValues -->
  <!-- Start RevocationValues -->
  <xs:attributeGroup name="xades.RevocationValues.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="xades.EncapsulatedCRLValue.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="xades.EncapsulatedOCSPValue.attlist">
    <xs:attribute name="Id" type="xs:ID" use="optional"/>
  </xs:attributeGroup>
  <!-- End RevocationValues -->
  <!-- Start ArchiveTimeStamp -->
  <xs:complexType abstract="false" mixed="true" name="any">
    <xs:sequence maxOccurs="1" minOccurs="1">
      <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##any" processContents="skip"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>
<!-- End ArchiveTimeStamp -->
